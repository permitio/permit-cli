/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/optimized": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Data Optimized */
        get: operations["get_all_data_optimized"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Data */
        get: operations["get_all_data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Users Data */
        get: operations["get_all_users_data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/role_assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Role Assignments Data */
        get: operations["get_all_role_assignments_data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/resource_instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Resource Instances Data */
        get: operations["get_all_resource_instances_data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/relationships": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Relationships Data */
        get: operations["get_all_relationships_data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/members/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the authenticated account member
         * @description Gets the authenticated account member's details.
         */
        get: operations["get_authenticated_member"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List OrganizationReadWithAPIKey Members
         * @description Lists all the account members that current active account has access to, optionally filtering by project or environment.
         *     The active account/organization is determined by the API Key used or by the authenticated session id.
         */
        get: operations["list_organization_members"];
        put?: never;
        /**
         * Invite new members (EAP)
         * @description Create an organization member if needed, and grant it permissions.
         *
         *     The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).
         *
         *     For a new member, an invite will be sent.
         */
        post: operations["create_organization_members"];
        /**
         * Remove permission (EAP)
         * @description Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.
         */
        delete: operations["delete_organization_permissions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/members/{member_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get OrganizationReadWithAPIKey Member
         * @description Gets a single account member by its id or email address. matching the given member,
         *     if no such member exists under the current active account (organization), returns 404.
         */
        get: operations["get_organization_member"];
        put?: never;
        post?: never;
        /**
         * Remove member (EAP)
         * @description Deletes an account member matching the given id or email address.
         *     The member will be removed from the active account in permit.io.
         *
         *     If the member is the only member in its account (organization), returns 400 (bad request),
         *     due to nobody remains with access to the account, meaning deletion of the entire account (org).
         *     To completely remove an account, call DELETE `/orgs/{org}`.
         */
        delete: operations["delete_organization_member"];
        options?: never;
        head?: never;
        /**
         * Edit members (EAP)
         * @description Updates an account member's settings.
         */
        patch: operations["update_organization_member"];
        trace?: never;
    };
    "/v2/api-key/{proj_id}/{env_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Environment Api Key */
        get: operations["get_environment_api_key"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/api-key/scope": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Api Key Scope */
        get: operations["get_api_key_scope"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/api-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Api Keys
         * @description Lists all the api_keys under the active organization.
         */
        get: operations["list_api_keys"];
        put?: never;
        /**
         * Create Api Key
         * @description Creates a new api_key under the active organization.
         */
        post: operations["create_api_key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/api-key/{api_key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Api Key
         * @description Gets a single api_key matching the given api_key_id, if such api_key exists.
         */
        get: operations["get_api_key"];
        put?: never;
        post?: never;
        /**
         * Delete Api Key
         * @description Deletes the api_key and all its related data.
         */
        delete: operations["delete_api_key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/api-key/{api_key_id}/rotate-secret": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rotate API Key
         * @description Rotates the API key of the PDP container with id `pdp_id`.
         *
         *     The rotation of the API key revokes the old API key and issues a new API key to the PDP.
         */
        post: operations["rotate_api_key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Organizations
         * @description Lists all the organizations that can be accessed by the
         *     authenticated actor (i.e: human team member or api key).
         */
        get: operations["list_organizations"];
        put?: never;
        /**
         * Create OrganizationReadWithAPIKey
         * @description If you want to create org via API, reach out to us and we will add the permission to your API token
         */
        post: operations["create_organization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get OrganizationReadWithAPIKey
         * @description Gets a single organization (Permit.io account) matching the given org_id,
         *     if such org exists and can be accessed by the authenticated actor.
         */
        get: operations["get_organization"];
        put?: never;
        post?: never;
        /**
         * Delete OrganizationReadWithAPIKey
         * @description Deletes an organization (Permit.io account) and all its related data.
         */
        delete: operations["delete_organization"];
        options?: never;
        head?: never;
        /**
         * Update OrganizationReadWithAPIKey
         * @description Updates the organization's profile.
         */
        patch: operations["update_organization"];
        trace?: never;
    };
    "/v2/orgs/active/org": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Active OrganizationReadWithAPIKey
         * @description Gets a single organization (Permit.io account) matching the given org_id,
         *     if such org exists and can be accessed by the authenticated actor.
         */
        get: operations["get_active_organization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stats OrganizationReadWithAPIKey */
        get: operations["stats_organization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List OrganizationReadWithAPIKey Invites
         * @description Lists pending organization invites
         */
        get: operations["list_organization_invites"];
        put?: never;
        /**
         * Invite Members To OrganizationReadWithAPIKey
         * @description Invite new members into the organization.
         */
        post: operations["invite_members_to_organization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/invites/{invite_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cancel Invite
         * @description Cancels an invite that was sent to a new member.
         */
        delete: operations["cancel_invite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Projects
         * @description Lists all the projects under the active organization.
         */
        get: operations["list_projects"];
        put?: never;
        /**
         * Create Project
         * @description Creates a new project under the active organization.
         */
        post: operations["create_project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project
         * @description Gets a single project matching the given proj_id, if such project exists.
         */
        get: operations["get_project"];
        put?: never;
        post?: never;
        /**
         * Delete Project
         * @description Deletes the project and all its related data.
         */
        delete: operations["delete_project"];
        options?: never;
        head?: never;
        /**
         * Update Project
         * @description Updates the project.
         */
        patch: operations["update_project"];
        trace?: never;
    };
    "/v2/projects/{proj_id}/envs/{env_id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stats Environments */
        get: operations["stats_environments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/envs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Environments
         * @description Lists all the environments under a given project.
         */
        get: operations["list_environments"];
        put?: never;
        /**
         * Create Environment
         * @description Creates a new environment under a given project.
         */
        post: operations["create_environment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/envs/{env_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Environment
         * @description Gets a single environment matching the given env_id, if such environment exists.
         */
        get: operations["get_environment"];
        put?: never;
        post?: never;
        /**
         * Delete Environment
         * @description Deletes an environment and all its related data.
         */
        delete: operations["delete_environment"];
        options?: never;
        head?: never;
        /**
         * Update Environment
         * @description Updates the environment.
         */
        patch: operations["update_environment"];
        trace?: never;
    };
    "/v2/projects/{proj_id}/envs/{env_id}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy Environment
         * @description Copy environment
         *
         *     This endpoint either duplicates an existing environment to a new environment
         *     in the same project, or copies from an existing environment to another
         *     existing environment.
         *
         *     The `scope` object controls which objects will be copied to the target
         *     environment.
         *
         *     To clone to a new environment, the user must have write permissions
         *     to the containing project. To clone into an existing environment,
         *     the user must have write permissions to the target environment.
         *
         *     Copying environments across projects or organizations is not
         *     allowed.
         */
        post: operations["copy_environment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/envs/{env_id}/copy/async": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy Environment Async (EAP)
         * @description Copy environment
         *
         *     This endpoint either duplicates an existing environment to a new environment
         *     in the same project, or copies from an existing environment to another
         *     existing environment.
         *
         *     The `scope` object controls which objects will be copied to the target
         *     environment.
         *
         *     To clone to a new environment, the user must have write permissions
         *     to the containing project. To clone into an existing environment,
         *     the user must have write permissions to the target environment.
         *
         *     Copying environments across projects or organizations is not
         *     allowed.
         */
        post: operations["copy_environment_async"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/envs/{env_id}/copy/async/{task_id}/result": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Copy Environment Task Result (EAP)
         * @description Get the result of a copy environment task.
         */
        get: operations["get_copy_environment_async_result"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/envs/{env_id}/test_jwks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Jwks By Url
         * @description Test Jwks Url.
         */
        post: operations["test_jwks_by_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/bulk/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Bulk Create Or Replace Roles */
        put: operations["bulk_create_or_replace_roles"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/condition_sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Condition Sets
         * @description Lists all condition sets matching a filter.
         */
        get: operations["list_condition_sets"];
        put?: never;
        /**
         * Create Condition Set
         * @description Creates a new condition set (can be either a user set or a resource set).
         */
        post: operations["create_condition_set"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Condition Set
         * @description Gets a single condition set, if such condition set exists.
         */
        get: operations["get_condition_set"];
        put?: never;
        post?: never;
        /**
         * Delete Condition Set
         * @description Deletes a condition set and all its related data.
         *     This includes any permissions granted to said condition set (i.e: any matching condition set users_with_role).
         */
        delete: operations["delete_condition_set"];
        options?: never;
        head?: never;
        /**
         * Update Condition Set
         * @description Partially updates a condition set.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_condition_set"];
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/ancestors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Condition Set Ancestors
         * @description Gets all ancestors (parent, parent of parent, and so on)
         */
        get: operations["get_condition_set_ancestors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/descendants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Condition Set Descendants
         * @description Gets all descendants (children, children of children, and so on)
         */
        get: operations["get_condition_set_descendants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Implicit Grant
         * @description Creates an implicit grant on a given role
         */
        post: operations["create_implicit_grant"];
        /**
         * Delete Implicit Grant
         * @description Deletes an implicit grant on a given role
         */
        delete: operations["delete_implicit_grant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants/conditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Implicit Grants Conditions
         * @description Update the `when` for implicit grants on a given role
         */
        put: operations["update_implicit_grants_conditions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Resource Action Groups
         * @description Lists all the action groups defined on the resource.
         */
        get: operations["list_resource_action_groups"];
        put?: never;
        /**
         * Create Resource Action Group
         * @description Creates a new action group that can affect the resource.
         */
        post: operations["create_resource_action_group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Resource Action Group
         * @description Gets a single action group defined on the resource, if such action exists.
         */
        get: operations["get_resource_action_group"];
        put?: never;
        post?: never;
        /**
         * Delete Resource Action Group
         * @description Deletes the action and all its related data.
         *     This includes any permissions granted to perform the action.
         */
        delete: operations["delete_resource_action_group"];
        options?: never;
        head?: never;
        /**
         * Update Resource Action Group
         * @description Partially updates the action defined on a resource.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_resource_action_group"];
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Resource Actions
         * @description Lists all the actions defined on the resource.
         */
        get: operations["list_resource_actions"];
        put?: never;
        /**
         * Create Resource Action
         * @description Creates a new action that can affect the resource.
         */
        post: operations["create_resource_action"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Resource Action
         * @description Gets a single action defined on the resource, if such action exists.
         */
        get: operations["get_resource_action"];
        put?: never;
        post?: never;
        /**
         * Delete Resource Action
         * @description Deletes the action and all its related data.
         *     This includes any permissions granted to perform the action.
         */
        delete: operations["delete_resource_action"];
        options?: never;
        head?: never;
        /**
         * Update Resource Action
         * @description Partially updates the action defined on a resource.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_resource_action"];
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Resource Attributes
         * @description Lists all the attributes defined on the resource.
         */
        get: operations["list_resource_attributes"];
        put?: never;
        /**
         * Create Resource Attribute
         * @description Creates a new attribute as part of the resource definition.
         */
        post: operations["create_resource_attribute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Resource Attribute
         * @description Gets a single attribute defined on the resource, if such attribute exists.
         */
        get: operations["get_resource_attribute"];
        put?: never;
        post?: never;
        /**
         * Delete Resource Attribute
         * @description Deletes the attribute and all its related data.
         *
         *     Note: If the attribute is used by policies, removing it will cause the
         *     attribute to evaluate as `undefined`.
         */
        delete: operations["delete_resource_attribute"];
        options?: never;
        head?: never;
        /**
         * Update Resource Attribute
         * @description Partially updates the attribute defined on a resource.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_resource_attribute"];
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Resource Relations
         * @description List relations on a given resource
         */
        get: operations["list_resource_relations"];
        put?: never;
        /**
         * Create Resource Relation
         * @description Creates a resource relation to another resource
         */
        post: operations["create_resource_relation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations/{relation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Resource Relation
         * @description Get a resource relation
         */
        get: operations["get_resource_relation"];
        put?: never;
        post?: never;
        /**
         * Delete Resource Relation
         * @description Deletes a resource relation
         */
        delete: operations["delete_resource_relation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Resource Roles
         * @description Lists all the roles defined on the resource.
         */
        get: operations["list_resource_roles"];
        put?: never;
        /**
         * Create Resource Role
         * @description Creates a new role associated with the resource.
         */
        post: operations["create_resource_role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Resource Role
         * @description Gets a single role defined on the resource, if such role exists.
         */
        get: operations["get_resource_role"];
        put?: never;
        post?: never;
        /**
         * Delete Resource Role
         * @description Deletes the role and all its related data.
         *     This includes any permissions granted to said role.
         */
        delete: operations["delete_resource_role"];
        options?: never;
        head?: never;
        /**
         * Update Resource Role
         * @description Partially updates the role defined on a resource.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_resource_role"];
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign Permissions to Role
         * @description Assign permissions to role.
         *
         *     If some of the permissions specified are already assigned, will skip them.
         */
        post: operations["assign_permissions_to_resource_role"];
        /**
         * Remove Permissions from Role
         * @description Remove permissions from role.
         *
         *     If some of the permissions specified are already unassigned, will skip them.
         */
        delete: operations["remove_permissions_from_resource_role"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/ancestors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resource Role Ancestors */
        get: operations["get_resource_role_ancestors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/descendants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resource Role Descendants */
        get: operations["get_resource_role_descendants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Resources
         * @description Lists all the resources defined in your schema.
         */
        get: operations["list_resources"];
        put?: never;
        /**
         * Create Resource
         * @description Creates a new resource (a type of object you may protect with permissions).
         */
        post: operations["create_resource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Resource
         * @description Gets a single resource, if such resource exists.
         */
        get: operations["get_resource"];
        /**
         * Replace Resource
         * @description Completely replaces the resource definition.
         *
         *     - If the resource key is changed, all role and permissions assignments for the the resource will be revoked.
         *     - If the resource key is unchanged, but some actions are removed or renamed from the resource definition,
         *     role and permissions assignments for these actions will be revoked.
         *
         *     TODO: we need to decide if we are auto-revoking, or if we are rejecting the PUT completely while there are permissions that can be affected.
         */
        put: operations["replace_resource"];
        post?: never;
        /**
         * Delete Resource
         * @description Deletes the resource and all its related data.
         */
        delete: operations["delete_resource"];
        options?: never;
        head?: never;
        /**
         * Update Resource
         * @description Partially updates the resource definition.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_resource"];
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Roles
         * @description Lists all tenant roles.
         */
        get: operations["list_roles"];
        put?: never;
        /**
         * Create Role
         * @description Creates a new tenant role.
         */
        post: operations["create_role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Role
         * @description Gets a single tenant role, if such role exists.
         */
        get: operations["get_role"];
        put?: never;
        post?: never;
        /**
         * Delete Role
         * @description Deletes a tenant role and all its related data.
         *     This includes any permissions granted to said role.
         */
        delete: operations["delete_role"];
        options?: never;
        head?: never;
        /**
         * Update Role
         * @description Partially updates a tenant role.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_role"];
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign Permissions To Role
         * @description Assign permissions to role.
         *
         *     If some of the permissions specified are already assigned, will skip them.
         */
        post: operations["assign_permissions_to_role"];
        /**
         * Remove Permissions From Role
         * @description Remove permissions from role.
         *
         *     If some of the permissions specified are already unassigned, will skip them.
         */
        delete: operations["remove_permissions_from_role"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/ancestors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Role Ancestors */
        get: operations["get_role_ancestors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/descendants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Role Descendants */
        get: operations["get_role_descendants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/users/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List User Attributes
         * @description Lists all the attributes defined on the User resource.
         */
        get: operations["list_user_attributes"];
        put?: never;
        /**
         * Create User Attribute
         * @description Creates a new attribute for the User resource.
         */
        post: operations["create_user_attribute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Attribute
         * @description Gets a single attribute defined on the User resource, if such attribute exists.
         */
        get: operations["get_user_attribute"];
        put?: never;
        post?: never;
        /**
         * Delete User Attribute
         * @description Deletes the attribute and all its related data.
         *
         *     Note: If the attribute is used by policies, removing it will cause the
         *     attribute to evaluate as `undefined`.
         */
        delete: operations["delete_user_attribute"];
        options?: never;
        head?: never;
        /**
         * Update User Attribute
         * @description Partially updates the attribute defined on the User resource.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_user_attribute"];
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/groups/{group_instance_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Group
         * @description Retrieve a specific group by its instance key.
         */
        get: operations["get_group"];
        put?: never;
        post?: never;
        /**
         * Delete Group
         * @description Delete a group by its instance key.
         */
        delete: operations["delete_group"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Group
         * @description List all groups.
         */
        get: operations["list_group"];
        put?: never;
        /** Create Group */
        post: operations["create_group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/groups/{group_instance_key}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Assign User To Group
         * @description Assign a user to a group -
         *     This user will inherit the group's roles.
         */
        put: operations["assign_user_to_group"];
        post?: never;
        /**
         * Remove User From Group
         * @description Remove a user from a group-
         *     This user will be removed from the member role of the group, and will no longer inherit the group's roles.
         */
        delete: operations["remove_user_from_group"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/groups/{group_instance_key}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign Role To Group
         * @description Assign a role to a group -
         *     It will create relation between the group and the resource, relationship between the resource instances and derivation from the member role to this role.
         */
        post: operations["assign_role_to_group"];
        /**
         * Remove Role From Group
         * @description Remove a role from a group-
         *     It will remove the derivation from the member role to this role.
         */
        delete: operations["remove_role_from_group"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/schema/{proj_id}/{env_id}/groups/{group_instance_key}/assign_group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Assign Group To Group
         * @description Assign a group to a group -
         *     This group will inherit the group's roles.
         */
        put: operations["assign_group_to_group"];
        post?: never;
        /**
         * Remove Group From Group
         * @description Remove a group from a group-
         *     This group will be removed from the member role of the group, and will no longer inherit the group's roles.
         */
        delete: operations["remove_group_from_group"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description Lists all the users defined within an environment.
         */
        get: operations["list_users"];
        put?: never;
        /**
         * Create User
         * @description Creates a new user inside the Permit.io system, from that point forward
         *     you may run permission checks on that user.
         *
         *     Returns 201 if the user is created, 409 if the user already exists.
         *     User is identified by its key, and you can only create one user with the same key inside a Permit environment.
         */
        post: operations["create_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description Gets a user, if such user exists. Otherwise returns 404.
         */
        get: operations["get_user"];
        /**
         * Replace User
         * @description Replace User / Sync User upsert a user in the system.
         *     If the user already exists, it will update the user with the new data.
         *     If the user does not exist, it will create a new user with the provided data.
         *
         *     The user is identified by its key, and you can only create one user with the same key inside a Permit environment.
         *     A 200 status code will be returned if the user already exists, and a 201 status code will be returned if the user is created.
         */
        put: operations["replace_user"];
        post?: never;
        /**
         * Delete User
         * @description Deletes the user and all its related data.
         */
        delete: operations["delete_user"];
        options?: never;
        head?: never;
        /**
         * Update User
         * @description Partially updates the user definition.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_user"];
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign Role To User
         * @description Assigns a role to the user within the tenant.
         *
         *     The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         */
        post: operations["assign_role_to_user"];
        /**
         * Unassign Role From User
         * @description Unassigns the role from the user within the tenant.
         *
         *     The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         *
         *     If the role is not actually assigned, will return 404.
         */
        delete: operations["unassign_role_from_user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Tenant Users */
        get: operations["list_tenant_users"];
        put?: never;
        /**
         * Add User To Tenant
         * @description Create and add user to a tenant.
         */
        post: operations["add_user_to_tenant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/tenants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tenants
         * @description Lists all the tenants defined within an env.
         */
        get: operations["list_tenants"];
        put?: never;
        /**
         * Create Tenant
         * @description Creates a new tenant inside the Permit.io system.
         *
         *     If the tenant is already created: will return 200 instead of 201,
         *     and will return the existing tenant object in the response body.
         */
        post: operations["create_tenant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tenant
         * @description Gets a tenant, if such tenant exists. Otherwise returns 404.
         */
        get: operations["get_tenant"];
        put?: never;
        post?: never;
        /**
         * Delete Tenant
         * @description Deletes the tenant and all its related data.
         */
        delete: operations["delete_tenant"];
        options?: never;
        head?: never;
        /**
         * Update Tenant
         * @description Partially updates the tenant definition.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_tenant"];
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Tenant User
         * @description Deletes a user under a tenant.
         */
        delete: operations["delete_tenant_user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/role_assignments/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Role Assignments Detailed
         * @description Lists the role assignments defined within an environment.
         *
         *     - If the `user` filter is present, will only return the role assignments of that user (supports multiple).
         *     - If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple).
         *     - If the `role` filter is present, will only return role assignments that are granting that role (supports multiple).
         *     - If the `resource` filter is present, will only return role assignments for resource instances of that resource type.
         *     - If the `resource_instance` filter is present, will only return role assignments for that resource instance.
         *
         *     Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant.
         *     If multiple tenants are received, the last tenant will be compared with the resource instance.
         */
        get: operations["list_role_assignments_detailed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/role_assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Role Assignments
         * @description Lists the role assignments defined within an environment.
         *
         *     - If the `user` filter is present, will only return the role assignments of that user (supports multiple).
         *     - If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple).
         *     - If the `role` filter is present, will only return role assignments that are granting that role (supports multiple).
         *     - If the `resource` filter is present, will only return role assignments for resource instances of that resource type.
         *     - If the `resource_instance` filter is present, will only return role assignments for that resource instance.
         *
         *     Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant.
         *     If multiple tenants are received, the last tenant will be compared with the resource instance.
         */
        get: operations["list_role_assignments"];
        put?: never;
        /**
         * Assign Role
         * @description Assigns a role to a user within a tenant.
         *
         *     The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         */
        post: operations["assign_role"];
        /**
         * Unassign Role
         * @description Unassigns a user role within a tenant.
         *
         *     The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         *
         *     If the role is not actually assigned, will return 404.
         */
        delete: operations["unassign_role"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/role_assignments/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk create role assignments(EAP) */
        post: operations["bulk_assign_role"];
        /** Bulk Unassign Role */
        delete: operations["bulk_unassign_role"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/set_rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Set Permissions
         * @description Lists the condition set rules matching the filter.
         *     - If the `user_set` filter is present, will only return the permissions set of that user set.
         *     - If the `permission` filter is present, will only return the permissions sets that equals to the queried permission.
         *     - If the `resource_set` filter is present, will only return the permissions set of that resource set.
         */
        get: operations["list_set_permissions"];
        put?: never;
        /**
         * Assign Set Permissions
         * @description Grant permissions to a user set *on* a resource set.
         *
         *     If the permission is already granted, it is skipped.
         */
        post: operations["assign_set_permissions"];
        /**
         * Unassign Set Permissions
         * @description Revokes permissions to a user set *on* a resource set.
         *
         *     If the permission is not granted, it is skipped.
         */
        delete: operations["unassign_set_permissions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/resource_instances/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Resource Instances Detailed
         * @description Lists all the resource instances defined within an environment.
         */
        get: operations["list_resource_instances_detailed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/resource_instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Resource Instances
         * @description Lists all the resource instances defined within an environment.
         */
        get: operations["list_resource_instances"];
        put?: never;
        /**
         * Create Resource Instance
         * @description Creates a new instance inside the Permit.io system.
         *
         *     If the instance is already created: will return 200 instead of 201,
         *     and will return the existing instance object in the response body.
         */
        post: operations["create_resource_instance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Resource Instance
         * @description Gets a instance, if such instance exists. Otherwise returns 404.
         */
        get: operations["get_resource_instance"];
        put?: never;
        post?: never;
        /**
         * Delete Resource Instance
         * @description Deletes the instance and all its related data.
         */
        delete: operations["delete_resource_instance"];
        options?: never;
        head?: never;
        /**
         * Update Resource Instance
         * @description Partially updates the instance definition.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_resource_instance"];
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/proxy_configs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Proxy Configs
         * @description Lists all the proxy configs defined within an environment.
         */
        get: operations["list_proxy_configs"];
        put?: never;
        /**
         * Create Proxy Config
         * @description Creates a new proxy config inside the Permit.io system.
         *
         *     If the proxy config is already created: will return 200 instead of 201,
         *     and will return the existing proxy config object in the response body.
         */
        post: operations["create_proxy_config"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/proxy_configs/{proxy_config_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Proxy Config
         * @description Gets a proxy config, if such proxy config exists. Otherwise returns 404.
         */
        get: operations["get_proxy_config"];
        put?: never;
        post?: never;
        /**
         * Delete Proxy Config
         * @description Deletes the proxy config and all its related data.
         */
        delete: operations["delete_proxy_config"];
        options?: never;
        head?: never;
        /**
         * Update Proxy Config
         * @description Partially updates the proxy config definition.
         *     Fields that will be provided will be completely overwritten.
         */
        patch: operations["update_proxy_config"];
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/bulk/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Bulk Replace Users */
        put: operations["bulk_replace_users"];
        /** Bulk Create Users */
        post: operations["bulk_create_users"];
        /** Bulk Delete Users */
        delete: operations["bulk_delete_users"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/bulk/tenants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Create Tenants */
        post: operations["bulk_create_tenants"];
        /** Bulk Delete Tenants */
        delete: operations["bulk_delete_tenants"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/bulk/resource_instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Bulk Replace Resource Instances
         * @description Creates or replaces Resource Instances.
         *     If a resource instance with `key` and `resource` already exists,
         *     it will be replaced.
         */
        put: operations["bulk_replace_resource_instances"];
        post?: never;
        /**
         * Bulk Delete Resource Instances
         * @description Deletes many Resource Instances.
         */
        delete: operations["bulk_delete_resource_instances"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/email_configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Email Configuration
         * @description Gets the email configuration defined within an environment.
         */
        get: operations["get_email_configuration"];
        put?: never;
        /**
         * Create Or Update Email Configuration
         * @description Create new configuration or updates the email configuration
         */
        post: operations["create_or_update_email_configuration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/email_configurations/send_test_email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Test Email
         * @description Sends a test email to the email address defined in the user.
         */
        post: operations["send_test_email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/email_templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Templates
         * @description Lists all the email configurations defined within an environment.
         */
        get: operations["list_templates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/email_templates/{template_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Template By Type
         * @description Lists all the email configurations defined within an environment.
         */
        get: operations["get_template_by_type"];
        put?: never;
        /**
         * Update Template By Type
         * @description Updates an email template by a given type.
         */
        post: operations["update_template_by_type"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/email_templates/{template_type}/send_test_email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Test Email By Type */
        post: operations["send_test_email_by_type"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/relationship_tuples/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Relationship Tuples Detailed
         * @description Lists the relationship tuples defined within an environment.
         */
        get: operations["list_relationship_tuples_detailed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/relationship_tuples": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Relationship Tuples
         * @description Lists the relationship tuples defined within an environment.
         */
        get: operations["list_relationship_tuples"];
        put?: never;
        /**
         * Create Relationship Tuple
         * @description Create a relationship between two resource instances using a relation.
         */
        post: operations["create_relationship_tuple"];
        /**
         * Delete Relationship Tuple
         * @description Delete a relationship between two resource instances.
         */
        delete: operations["delete_relationship_tuple"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk create relationship tuples(EAP) */
        post: operations["bulk_create_relationship_tuples"];
        /** Bulk Delete Relationship Tuples */
        delete: operations["bulk_delete_relationship_tuples"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/user_invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List User Invites */
        get: operations["list_user_invites"];
        put?: never;
        /** Create User Invite */
        post: operations["create_user_invite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/user_invites/{user_invite_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Invite */
        get: operations["get_user_invite"];
        put?: never;
        post?: never;
        /** Delete User Invite */
        delete: operations["delete_user_invite"];
        options?: never;
        head?: never;
        /** Update User Invite */
        patch: operations["update_user_invite"];
        trace?: never;
    };
    "/v2/facts/{proj_id}/{env_id}/user_invites/{user_invite_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Approve User Invite */
        post: operations["approve_user_invite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pdps/{proj_id}/{env_id}/configs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List PDP configurations */
        get: operations["list_pdp_configs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get PDP configuration
         * @description Gets the configuration values for the PDP container with id `pdp_id`.
         *
         *     The config values returned are considered "overrides", meaning they are overriding
         *     any default values given to the container by the user.
         */
        get: operations["get_pdp_config_values"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/debug-audit-logs/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable debug audit logs
         * @description Enables debug audit logs for the PDP container with id `pdp_id`.
         */
        put: operations["enable_debug_audit_logs"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/debug-audit-logs/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Disable debug audit logs
         * @description Disabled debug audit logs for the PDP container with id `pdp_id`.
         */
        put: operations["disable_debug_audit_logs"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/rotate-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rotate PDP API Key
         * @description Rotates the API key of the PDP container with id `pdp_id`.
         *
         *     The rotation of the API key revokes the old API key and issues a new API key to the PDP.
         */
        post: operations["rotate_pdp_api_key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pdps/{proj_id}/{env_id}/configs/migrate-shards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Migrate PDP Config number of shards
         * @description The migration process is as followed:
         *     1. Perform request to this endpoint with the new number of shards
         *     2. A new PDP Config will be created with the new number of shards and a new api-key
         *     3. Create a new PDP cluster with the same instances as the number of shards defined in the new PDP Config
         *     4. Wait for the new PDP cluster to be ready
         *     5. Update your PDP load balancer to point to the new PDP cluster
         *
         *     More info can be found here https://docs.permit.io/concepts/pdp-sharding
         */
        post: operations["migrate_shards"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pdps/{proj_id}/{env_id}/audit_logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Audit Logs */
        get: operations["list_audit_logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/pdps/{proj_id}/{env_id}/audit_logs/{log_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detailed audit log */
        get: operations["get_detailed_audit_log"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Policy Repos
         * @description Lists all the policy repositories under a given project.
         */
        get: operations["list_policy_repos"];
        put?: never;
        /**
         * Create Policy Repo
         * @description Creates a new policy repository configuration under a given project.
         *     The given repository is created with status 'pending', it will be changed and used as the 'active' repository for
         *     the policy only after a successful attempt to use it.
         *     The repository main branch must be present in the remote.
         */
        post: operations["create_policy_repo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/repos/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Active Policy Repo
         * @description Gets the currently active repository, if such repository exists.
         */
        get: operations["get_active_policy_repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/repos/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Disable Active Policy Repo
         * @description Disable the currently active policy repo, this action means to turn off the gitops feature.
         *     If there is no active policy repo, this action will do nothing.
         */
        put: operations["disable_active_policy_repo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/repos/{repo_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Activate Policy Repo
         * @description Disable the currently active policy repo, this action means to turn off the gitops feature.
         *     If there is no active policy repo, this action will do nothing.
         */
        put: operations["activate_policy_repo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/repos/{repo_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Policy Repo
         * @description Gets a single repository matching the given repo_id, if such repository exists.
         */
        get: operations["get_policy_repo"];
        put?: never;
        post?: never;
        /**
         * Delete Policy Repo
         * @description Deletes an environment and all its related data.
         */
        delete: operations["delete_policy_repo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Elements Configs
         * @description Lists all the elements_configs under the active organization.
         */
        get: operations["list_elements_configs"];
        put?: never;
        /**
         * Create Elements Config
         * @description Creates a new elements_config under the active organization.
         */
        post: operations["create_elements_config"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Elements Config
         * @description Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
         */
        get: operations["get_elements_config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Elements Config
         * @description Updates the elements_config.
         */
        patch: operations["update_elements_config"];
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/runtime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Elements Config Runtime
         * @description Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
         */
        get: operations["get_elements_config_runtime"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/{elements_config_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Elements Config
         * @description Deletes the elements_config and all its related data.
         */
        delete: operations["delete_elements_config"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description Lists all the users defined within an environment.
         */
        get: operations["elements_list_users"];
        put?: never;
        /**
         * Create user
         * @description Creates a new user inside the Permit.io system, from that point forward
         *     you may run permission checks on that user.
         *
         *     If the user is already created: will return 200 instead of 201,
         *     and will return the existing user object in the response body.
         */
        post: operations["elements_create_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete user */
        delete: operations["elements_delete_user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List roles
         * @description Lists all the users defined within an environment.
         */
        get: operations["elements_list_roles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign role to user
         * @description Assigns a role to the user within the tenant.
         *
         *     The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         */
        post: operations["elements_assign_role_to_user"];
        /**
         * Unassign role from user
         * @description Unassigns the role from the user within the tenant.
         *
         *     The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         *
         *     If the role is not actually assigned, will return 404.
         */
        delete: operations["elements_unassign_role_from_user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Config Active
         * @description Updates the embed_config.
         */
        post: operations["set_config_active"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/audit_logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List audit logs
         * @description Lists audit logs for for specific elements config (tenant scope)
         */
        get: operations["elements_list_audit_logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Access Requests */
        get: operations["list_access_requests"];
        put?: never;
        /** Create Access Request */
        post: operations["create_access_request"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Access Request */
        get: operations["get_access_request"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/reviewer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Access Request Reviewer */
        patch: operations["update_access_request_reviewer"];
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Approve Access Request */
        put: operations["approve_access_request"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/deny": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Deny Access Request */
        put: operations["deny_access_request"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Cancel Access Request */
        put: operations["cancel_access_request"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Operation Approvals */
        get: operations["list_operation_approvals"];
        put?: never;
        /** Create Operation Approval */
        post: operations["create_operation_approval"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Operation Approval */
        get: operations["get_operation_approval"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/reviewer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Operation Approval Reviewer */
        patch: operations["update_operation_approval_reviewer"];
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Approve Operation Approval */
        put: operations["approve_operation_approval"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/deny": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Deny Operation Approval */
        put: operations["deny_operation_approval"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Cancel Operation Approval */
        put: operations["cancel_operation_approval"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/deprecated/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Api Events
         * @deprecated
         * @description Fetches all API History events for given filters.
         */
        get: operations["list_api_events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/deprecated/history/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Api Event
         * @deprecated
         * @description Returns full information, including request and response bodies, for one event.
         */
        get: operations["get_api_event"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/deprecated/history/{event_id}/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Request Body
         * @deprecated
         */
        get: operations["get_request_body"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/deprecated/history/{event_id}/response": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Response Body
         * @deprecated
         */
        get: operations["get_response_body"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Api Events
         * @description Fetches all API History events for given filters.
         *     Available to members with Viewer (or higher) role.
         */
        get: operations["list_api_events_v2_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/history/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Api Event
         * @description Returns full information, including request and response bodies, for one event.
         */
        get: operations["get_api_event_v2_history__event_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/history/{event_id}/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Request Body */
        get: operations["get_request_body_v2_history__event_id__request_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/history/{event_id}/response": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Response Body */
        get: operations["get_response_body_v2_history__event_id__response_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Activity Events
         * @description Fetches all API History events for given filters.
         *     Available to members with Viewer (or higher) role.
         */
        get: operations["list_activity_events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/activity/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Activity Types */
        get: operations["list_activity_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/deprecated/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Activity Events
         * @deprecated
         * @description Fetches all API History events for given filters.
         */
        get: operations["list_activity_events_v2_deprecated_activity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/deprecated/activity/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Activity Types
         * @deprecated
         */
        get: operations["list_activity_types_v2_deprecated_activity_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/policy_guards/scopes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Policy Guard Scopes
         * @description List all guarding policies scopes.
         */
        get: operations["list_policy_guard_scopes"];
        put?: never;
        /**
         * Create Policy Guard Scope
         * @description Create a new Policy guard scope.
         */
        post: operations["create_policy_guard_scope"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/policy_guards/scopes/{policy_guard_scope_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Policy Guard Scope
         * @description Get a Policy guard scope.
         */
        get: operations["get_policy_guard_scope"];
        put?: never;
        post?: never;
        /**
         * Delete Policy Guard Scope
         * @description Delete a Policy guard scope.
         */
        delete: operations["delete_policy_guard_scope"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/policy_guards/scopes/{policy_guard_scope_id}/associate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Associate Policy Guard Scope
         * @description associate a project to a Policy guard scope.
         */
        post: operations["associate_policy_guard_scope"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/policy_guards/scopes/{policy_guard_scope_id}/disassociate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Disassociate Policy Guard Scope
         * @description Disassociate a project from a Policy guard scope.
         */
        delete: operations["disassociate_policy_guard_scope"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/policy_guards/scopes/{policy_guard_scope_id}/rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Policy Guard Rules
         * @description List all rules for a Policy guard scope.
         */
        get: operations["list_policy_guard_rules"];
        put?: never;
        /**
         * Create Policy Guard Rule
         * @description Create a policy guard rule.
         */
        post: operations["create_policy_guard_rule"];
        /**
         * Delete Policy Guard Rule
         * @description Remove a policy guard rule.
         */
        delete: operations["delete_policy_guard_rule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/projects/{proj_id}/{env_id}/opal_scope": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Scope Config
         * @description Returns the custom OPAL Scope config for given environment, if exists.
         *     If not custom config is set, return 404.
         */
        get: operations["get_scope_config"];
        /** Set Scope Config */
        put: operations["set_scope_config"];
        post?: never;
        /** Reset Scope Config */
        delete: operations["reset_scope_config"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** APIHistoryEventFullRead */
        APIHistoryEventFullRead: {
            /**
             * Request Body
             * Format: binary
             */
            request_body?: string;
            /**
             * Response Body
             * Format: binary
             */
            response_body?: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /**
             * Timestamp Utc
             * Format: date-time
             */
            timestamp_utc?: string;
            /** Method */
            method: string;
            /** Path */
            path: string;
            /** Success */
            success: boolean;
            /** Status */
            status: number;
            /**
             * Request Id
             * Format: uuid
             */
            request_id?: string;
            /** Client Ip */
            client_ip: string;
            /** Actor Type */
            actor_type: string;
            /**
             * Actor Id
             * Format: uuid
             */
            actor_id: string;
            /** Actor Display Name */
            actor_display_name?: string;
            /**
             * Org Id
             * Format: uuid
             */
            org_id?: string;
            /** Project Key */
            project_key?: string;
            /**
             * Project Id
             * Format: uuid
             */
            project_id?: string;
            /** Env Key */
            env_key?: string;
            /**
             * Env Id
             * Format: uuid
             */
            env_id?: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** APIHistoryEventRead */
        APIHistoryEventRead: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /**
             * Timestamp Utc
             * Format: date-time
             */
            timestamp_utc?: string;
            /** Method */
            method: string;
            /** Path */
            path: string;
            /** Success */
            success: boolean;
            /** Status */
            status: number;
            /**
             * Request Id
             * Format: uuid
             */
            request_id?: string;
            /** Client Ip */
            client_ip: string;
            /** Actor Type */
            actor_type: string;
            /**
             * Actor Id
             * Format: uuid
             */
            actor_id: string;
            /** Actor Display Name */
            actor_display_name?: string;
            /**
             * Org Id
             * Format: uuid
             */
            org_id?: string;
            /** Project Key */
            project_key?: string;
            /**
             * Project Id
             * Format: uuid
             */
            project_id?: string;
            /** Env Key */
            env_key?: string;
            /**
             * Env Id
             * Format: uuid
             */
            env_id?: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** APIKeyCreate */
        APIKeyCreate: {
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             */
            project_id?: string;
            /**
             * Environment Id
             * Format: uuid
             */
            environment_id?: string;
            /** @default env */
            object_type: components["schemas"]["MemberAccessObj"];
            /** @default admin */
            access_level: components["schemas"]["MemberAccessLevel"];
            /** @default member */
            owner_type: components["schemas"]["APIKeyOwnerType"];
            /** Name */
            name?: string;
        };
        /**
         * APIKeyOwnerType
         * @description An enumeration.
         * @enum {string}
         */
        APIKeyOwnerType: "pdp_config" | "member" | "elements";
        /** APIKeyRead */
        APIKeyRead: {
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             */
            project_id?: string;
            /**
             * Environment Id
             * Format: uuid
             */
            environment_id?: string;
            /** @default env */
            object_type: components["schemas"]["MemberAccessObj"];
            /** @default admin */
            access_level: components["schemas"]["MemberAccessLevel"];
            owner_type: components["schemas"]["APIKeyOwnerType"];
            /** Name */
            name?: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Secret */
            secret?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by_member?: components["schemas"]["OrgMemberRead"];
            /**
             * Last Used At
             * Format: date-time
             */
            last_used_at?: string;
            env?: components["schemas"]["EnvironmentRead"];
            project?: components["schemas"]["ProjectRead"];
        };
        /** APIKeyScopeRead */
        APIKeyScopeRead: {
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the api_key belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the api_key belongs to.
             */
            project_id?: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the api_key belongs to.
             */
            environment_id?: string;
        };
        /** AVPEngineDecisionLog */
        AVPEngineDecisionLog: {
            /**
             * Engine
             * @default AVP
             * @enum {string}
             */
            engine: "AVP";
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Tenant */
            tenant: string;
            /** Process Time Ms */
            process_time_ms?: number;
            /** Input */
            input: Record<string, never>;
            /** Result */
            result: Record<string, never>;
        };
        /**
         * AccessRequestApproved
         * @example {
         *       "requesting_user_id": "1c1e4ada-f282-40e6-b3b7-20b3a51c93b5",
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66",
         *         "role": "ac4e70c8-d5be-48af-93eb-760f58fc91a9"
         *       },
         *       "reason": "done onboarding",
         *       "org_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "env_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "status": "approved",
         *       "reviewer_user_id": "1b287364-14ff-4b72-8953-b40399093a6f",
         *       "reviewed_at": "2019-08-24T14:15:22Z",
         *       "reviewer_comment": "new employee",
         *       "type": "access_request"
         *     }
         */
        AccessRequestApproved: {
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
            /**
             * Access Request Details
             * @description details of the access request, including the resource and tenant
             */
            access_request_details: components["schemas"]["AccessRequestDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting access
             */
            reason?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the access request
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the access request belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the access request belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the access request belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the access request was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the access request was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Requesting User Id
             * Format: uuid
             * @description optional id of the user that is requesting the access
             */
            requesting_user_id?: string;
            /**
             * Reviewed At
             * Format: date-time
             * @description when the access request was reviewed
             */
            reviewed_at?: string;
            /** @default access_request */
            type: components["schemas"]["RequestType"];
            /** @description current status of the access request */
            status: components["schemas"]["RequestStatus"];
            /**
             * Reviewer User Id
             * Format: uuid
             * @description Optional id of the user who review the access request
             */
            reviewer_user_id?: string;
        };
        /**
         * AccessRequestCanceled
         * @example {
         *       "requesting_user_id": "1c1e4ada-f282-40e6-b3b7-20b3a51c93b5",
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66",
         *         "role": "ac4e70c8-d5be-48af-93eb-760f58fc91a9"
         *       },
         *       "reason": "done onboarding",
         *       "org_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "env_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "status": "canceled",
         *       "type": "access_request"
         *     }
         */
        AccessRequestCanceled: {
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
            /**
             * Access Request Details
             * @description details of the access request, including the resource and tenant
             */
            access_request_details: components["schemas"]["AccessRequestDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting access
             */
            reason?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the access request
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the access request belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the access request belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the access request belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the access request was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the access request was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Requesting User Id
             * Format: uuid
             * @description optional id of the user that is requesting the access
             */
            requesting_user_id?: string;
            /**
             * Reviewed At
             * Format: date-time
             * @description when the access request was reviewed
             */
            reviewed_at?: string;
            /** @default access_request */
            type: components["schemas"]["RequestType"];
            /** @description current status of the access request */
            status: components["schemas"]["RequestStatus"];
            /**
             * Reviewer User Id
             * Format: uuid
             * @description Optional id of the user who review the access request
             */
            reviewer_user_id?: string;
        };
        /** AccessRequestCreateDetails */
        AccessRequestCreateDetails: {
            /**
             * Tenant
             * @description tenant id or key that the user is requesting access to
             */
            tenant: string;
            /**
             * Resource
             * @description resource id or key that the user is requesting access to
             */
            resource?: string;
            /**
             * Resource Instance
             * @description resource instance id or key that the user is requesting access to
             */
            resource_instance?: string;
            /**
             * Role
             * @description role id or key that the user is requesting access to
             */
            role: string;
        };
        /**
         * AccessRequestDenied
         * @example {
         *       "requesting_user_id": "1c1e4ada-f282-40e6-b3b7-20b3a51c93b5",
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66",
         *         "role": "ac4e70c8-d5be-48af-93eb-760f58fc91a9"
         *       },
         *       "reason": "done onboarding",
         *       "org_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "env_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "status": "denied",
         *       "reviewer_user_id": "1b287364-14ff-4b72-8953-b40399093a6f",
         *       "reviewed_at": "2019-08-24T14:15:22Z",
         *       "reviewer_comment": "need more info",
         *       "type": "access_request"
         *     }
         */
        AccessRequestDenied: {
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
            /**
             * Access Request Details
             * @description details of the access request, including the resource and tenant
             */
            access_request_details: components["schemas"]["AccessRequestDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting access
             */
            reason?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the access request
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the access request belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the access request belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the access request belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the access request was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the access request was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Requesting User Id
             * Format: uuid
             * @description optional id of the user that is requesting the access
             */
            requesting_user_id?: string;
            /**
             * Reviewed At
             * Format: date-time
             * @description when the access request was reviewed
             */
            reviewed_at?: string;
            /** @default access_request */
            type: components["schemas"]["RequestType"];
            /** @description current status of the access request */
            status: components["schemas"]["RequestStatus"];
            /**
             * Reviewer User Id
             * Format: uuid
             * @description Optional id of the user who review the access request
             */
            reviewer_user_id?: string;
        };
        /** AccessRequestDetails */
        AccessRequestDetails: {
            /**
             * Tenant
             * @description tenant id or key that the user is requesting access to
             */
            tenant: string;
            /**
             * Resource
             * @description resource id or key that the user is requesting access to
             */
            resource: string;
            /**
             * Resource Instance
             * @description Either the unique id of the resource instance that the user is requesting access to, or the URL-friendly key of the <resource_key:resource_instance_key> (i.e: file:my_file)
             */
            resource_instance?: string;
            /**
             * Role
             * @description role id or key that the user is requesting access to
             */
            role: string;
        };
        /**
         * AccessRequestRead
         * @example {
         *       "requesting_user_id": "1c1e4ada-f282-40e6-b3b7-20b3a51c93b5",
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66",
         *         "role": "ac4e70c8-d5be-48af-93eb-760f58fc91a9"
         *       },
         *       "reason": "string",
         *       "org_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "env_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "status": "approved",
         *       "reviewer_user_id": "1b287364-14ff-4b72-8953-b40399093a6f",
         *       "reviewed_at": "2019-08-24T14:15:22Z",
         *       "reviewer_comment": "new employee",
         *       "type": "access_request"
         *     }
         */
        AccessRequestRead: {
            /**
             * Access Request Details
             * @description details of the access request, including the resource and tenant
             */
            access_request_details: components["schemas"]["AccessRequestDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting access
             */
            reason?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the access request
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the access request belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the access request belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the access request belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the access request was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the access request was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Requesting User Id
             * Format: uuid
             * @description optional id of the user that is requesting the access
             */
            requesting_user_id?: string;
            /**
             * Reviewed At
             * Format: date-time
             * @description when the access request was reviewed
             */
            reviewed_at?: string;
            /** @default access_request */
            type: components["schemas"]["RequestType"];
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
            /** @description current status of the access request */
            status: components["schemas"]["RequestStatus"];
            /**
             * Reviewer User Id
             * Format: uuid
             * @description Optional id of the user who review the access request
             */
            reviewer_user_id?: string;
        };
        /**
         * AccessRequestReview
         * @example {
         *       "reviewer_comment": "new employee",
         *       "role": "ac4e70c8-d5be-48af-93eb-760f58fc91a9"
         *     }
         */
        AccessRequestReview: {
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
            /**
             * Role
             * @description role id or key that the user is requesting access to
             */
            role?: string;
        };
        /**
         * AccessRequestReviewDeny
         * @example {
         *       "reviewer_comment": "need more info"
         *     }
         */
        AccessRequestReviewDeny: {
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
        };
        /**
         * AccessRequestUserCreate
         * @example {
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66",
         *         "role": "ac4e70c8-d5be-48af-93eb-760f58fc91a9"
         *       },
         *       "reason": "done onboarding"
         *     }
         */
        AccessRequestUserCreate: {
            /**
             * Access Request Details
             * @description details of the access request, including the resource and tenant
             */
            access_request_details: components["schemas"]["AccessRequestCreateDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting access
             */
            reason?: string;
        };
        /** ActionBlockEditable */
        ActionBlockEditable: {
            /**
             * Name
             * @description a more descriptive name for the action
             */
            name?: string;
            /**
             * Description
             * @description optional description string explaining what this action represents in your system
             */
            description?: string;
            /** Attributes */
            attributes?: Record<string, never>;
            /** V1Compat Path */
            v1compat_path?: string;
            /** V1Compat Name */
            v1compat_name?: string;
        };
        /** ActionBlockRead */
        ActionBlockRead: {
            /**
             * Name
             * @description a more descriptive name for the action
             */
            name?: string;
            /**
             * Description
             * @description optional description string explaining what this action represents in your system
             */
            description?: string;
            /** Attributes */
            attributes?: Record<string, never>;
            /** V1Compat Path */
            v1compat_path?: string;
            /** V1Compat Name */
            v1compat_name?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the action
             */
            id: string;
            /**
             * Key
             * @description action key
             */
            key?: string;
        };
        /** ActionObj */
        ActionObj: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Name */
            name?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** ActivityDetailsList */
        ActivityDetailsList: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "list";
            /** Type */
            type: string;
            /** Items */
            items: components["schemas"]["ActivityDetailsObjectData"][];
        };
        /** ActivityDetailsObject */
        ActivityDetailsObject: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /** Key */
            key?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "object";
            /** Type */
            type: string;
        };
        /** ActivityDetailsObjectData */
        ActivityDetailsObjectData: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /** Key */
            key?: string;
        };
        /** ActivityLogEventRead */
        ActivityLogEventRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Activity Id */
            activity_id?: string;
            /** Activity Description */
            activity_description?: string;
            /** Activity Details */
            activity_details?: {
                [key: string]: components["schemas"]["ActivityDetailsObject"] | components["schemas"]["ActivityDetailsList"];
            };
            /** Client Ip */
            client_ip: string;
            /** Actor Type */
            actor_type: string;
            /**
             * Actor Id
             * Format: uuid
             */
            actor_id: string;
            /** Actor Display Name */
            actor_display_name?: string;
            /**
             * Org Id
             * Format: uuid
             */
            org_id?: string;
            /** Project Key */
            project_key?: string;
            /**
             * Project Id
             * Format: uuid
             */
            project_id?: string;
            /** Env Key */
            env_key?: string;
            /**
             * Env Id
             * Format: uuid
             */
            env_id?: string;
        };
        /**
         * AddRolePermissions
         * @example {
         *       "permissions": [
         *         "document:write"
         *       ]
         *     }
         */
        AddRolePermissions: {
            /**
             * Permissions
             * @description List of permissions to assign to the role. If a permission is already granted to the role it is skipped. Each permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the "permission name".
             */
            permissions: string[];
        };
        /** ApproveMessage */
        ApproveMessage: {
            /** Message */
            message: string;
        };
        /** AttributeBlockEditable */
        AttributeBlockEditable: {
            /** @description The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`. */
            type: components["schemas"]["AttributeType"];
            /**
             * Description
             * @description optional description string explaining what data this attribute will store
             */
            description?: string;
        };
        /** AttributeBlockRead */
        AttributeBlockRead: {
            /** @description The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`. */
            type: components["schemas"]["AttributeType"];
            /**
             * Description
             * @description optional description string explaining what data this attribute will store
             */
            description?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the attribute
             */
            id: string;
            /**
             * Key
             * @description action key
             */
            key?: string;
        };
        /**
         * AttributeType
         * @description supported attribute primitives
         * @enum {string}
         */
        AttributeType: "bool" | "number" | "string" | "time" | "array" | "json" | "object" | "object_array";
        /** AuditLogModel */
        AuditLogModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Raw Data */
            raw_data?: components["schemas"]["OPAEngineDecisionLog"] | components["schemas"]["AVPEngineDecisionLog"] | components["schemas"]["DummyEngineModel"];
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Query */
            query?: string;
            /** User Key */
            user_key?: string;
            /** User Email */
            user_email?: string;
            /** User Name */
            user_name?: string;
            /** Resource Type */
            resource_type?: string;
            /** Tenant */
            tenant?: string;
            /** Action */
            action?: string;
            /** Decision */
            decision?: boolean;
            /** Reason */
            reason?: string;
            /**
             * Org Id
             * Format: uuid
             */
            org_id: string;
            /**
             * Project Id
             * Format: uuid
             */
            project_id: string;
            /**
             * Env Id
             * Format: uuid
             */
            env_id: string;
            /**
             * Pdp Config Id
             * Format: uuid
             */
            pdp_config_id: string;
            /** Input */
            input?: unknown;
            /** Result */
            result?: unknown;
            /** Context */
            context?: unknown;
        };
        /** AuditLogObjectsModel */
        AuditLogObjectsModel: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /** OrganizationReadWithAPIKey Object */
            organization_object?: components["schemas"]["OrganizationObj"] | Record<string, never>;
            /** Project Object */
            project_object?: components["schemas"]["ProjectObj"] | Record<string, never>;
            /** Environment Object */
            environment_object?: components["schemas"]["EnvironmentObj"] | Record<string, never>;
            /** Pdp Config Object */
            pdp_config_object?: components["schemas"]["PdpConfigObj"] | Record<string, never>;
            user_object?: components["schemas"]["UserObj"];
            action_object?: components["schemas"]["ActionObj"];
            resource_type_object?: components["schemas"]["ResourceTypeObj"];
            tenant_object?: components["schemas"]["TenantObj"];
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
        };
        /**
         * AuditLogSortKey
         * @description An enumeration.
         * @enum {string}
         */
        AuditLogSortKey: "None" | "timestamp";
        /**
         * AuthMechanism
         * @description An enumeration.
         * @enum {string}
         */
        AuthMechanism: "Bearer" | "Basic" | "Headers";
        /**
         * BillingTierType
         * @description An enumeration.
         * @enum {string}
         */
        BillingTierType: "free" | "startup" | "pro" | "enterprise" | "internal";
        /** BulkRoleAssignmentReport */
        BulkRoleAssignmentReport: {
            /**
             * Assignments Created
             * @default 0
             */
            assignments_created: number;
        };
        /** BulkRoleUnAssignmentReport */
        BulkRoleUnAssignmentReport: {
            /**
             * Assignments Removed
             * @default 0
             */
            assignments_removed: number;
        };
        /** ConditionSet */
        ConditionSet: {
            /**
             * Key
             * @description The key of the condition set.
             */
            key: string;
            /**
             * Attribute
             * @description The attribute of the condition set.
             */
            attribute: string;
            /**
             * Operator
             * @description The operator of the condition set.
             */
            operator: string;
            /**
             * Value
             * @description The value of the condition set.
             */
            value: string;
        };
        /**
         * ConditionSetCreate
         * @example {
         *       "key": "na_based_employees",
         *       "name": "US or Canada based employees",
         *       "type": "userset",
         *       "conditions": {
         *         "allOf": [
         *           {
         *             "user.role": {
         *               "equals": "employee"
         *             }
         *           },
         *           {
         *             "user.location": {
         *               "in": [
         *                 "US",
         *                 "Canada"
         *               ]
         *             }
         *           }
         *         ]
         *       }
         *     }
         */
        ConditionSetCreate: {
            /**
             * Key
             * @description A unique id by which Permit will identify the condition set. The key will be used as the generated rego rule name.
             */
            key: string;
            /**
             * @description the type of the set: UserSet or ResourceSet
             * @default userset
             */
            type: components["schemas"]["ConditionSetType"];
            /**
             * Autogenerated
             * @description whether the set was autogenerated by the system.
             * @default false
             */
            autogenerated: boolean;
            /**
             * Resource Id
             * @description For ResourceSets, the id of the base resource.
             */
            resource_id?: string;
            /**
             * Name
             * @description A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'
             */
            name: string;
            /**
             * Description
             * @description an optional longer description of the set
             */
            description?: string;
            /**
             * Conditions
             * @description a boolean expression that consists of multiple conditions, with and/or logic.
             * @default {}
             */
            conditions: Record<string, never>;
            /**
             * Parent Id
             * @description Parent Condition Set
             */
            parent_id?: string;
        };
        /**
         * ConditionSetData
         * @description This is the data of a specific condition set in the system
         */
        ConditionSetData: {
            /** @description The type of the condition set. */
            type: components["schemas"]["ConditionSetType"];
            /**
             * Key
             * @description The key of the condition set.
             */
            key: string;
        };
        /**
         * ConditionSetRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "key": "na_based_employees",
         *       "name": "US or Canada based employees",
         *       "description": "All employees based in the US or Canada",
         *       "type": "userset",
         *       "autogenerated": false,
         *       "conditions": {
         *         "allOf": [
         *           {
         *             "user.role": {
         *               "equals": "employee"
         *             }
         *           },
         *           {
         *             "user.location": {
         *               "in": [
         *                 "US",
         *                 "Canada"
         *               ]
         *             }
         *           }
         *         ]
         *       }
         *     }
         */
        ConditionSetRead: {
            /**
             * Key
             * @description A unique id by which Permit will identify the condition set. The key will be used as the generated rego rule name.
             */
            key: string;
            /**
             * @description the type of the set: UserSet or ResourceSet
             * @default userset
             */
            type: components["schemas"]["ConditionSetType"];
            /**
             * Autogenerated
             * @description whether the set was autogenerated by the system.
             * @default false
             */
            autogenerated: boolean;
            /**
             * Resource Id
             * @description For ResourceSets, the id of the base resource.
             */
            resource_id?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the condition set
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the condition set belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the condition set belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the condition set belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the condition set was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the condition set was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            resource?: components["schemas"]["ResourceRead"];
            /**
             * Name
             * @description A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'
             */
            name: string;
            /**
             * Description
             * @description an optional longer description of the set
             */
            description?: string;
            /**
             * Conditions
             * @description a boolean expression that consists of multiple conditions, with and/or logic.
             * @default {}
             */
            conditions: Record<string, never>;
            /**
             * Parent Id
             * @description Parent Condition Set
             */
            parent_id?: string;
        };
        /**
         * ConditionSetRuleCreate
         * @example {
         *       "user_set": "us_based_employees",
         *       "permission": "repository:clone",
         *       "resource_set": "private_repos"
         *     }
         */
        ConditionSetRuleCreate: {
            /**
             * User Set
             * @description The userset that will be given permission, i.e: all the users matching this rule will be given the specified permission
             */
            user_set: string;
            /**
             * Permission
             * @description The permission that will be granted to the userset *on* the resourceset. The permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the "permission name".
             */
            permission: string;
            /**
             * Resource Set
             * @description The resourceset that represents the resources that are granted for access, i.e: all the resources matching this rule can be accessed by the userset to perform the granted *permission*
             */
            resource_set: string;
            /**
             * Is Role
             * @description if True, will set the condition set rule to the role's autogen user-set.
             * @default false
             */
            is_role: boolean;
            /**
             * Is Resource
             * @description if True, will set the condition set rule to the resource's autogen resource-set.
             * @default false
             */
            is_resource: boolean;
        };
        /**
         * ConditionSetRuleRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "key": "us_based_employees_can_repository_clone_private_repos",
         *       "user_set": "us_based_employees",
         *       "permission": "repository:clone",
         *       "resource_set": "private_repos",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:16:22Z"
         *     }
         */
        ConditionSetRuleRead: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the condition set rule
             */
            id: string;
            /**
             * Key
             * @description A unique id by which Permit will identify this condition set rule.
             */
            key: string;
            /**
             * User Set
             * @description the userset that is currently granted permissions, i.e: all the users matching this rule are granted the permission on the resourceset
             */
            user_set: string;
            /**
             * Permission
             * @description a permission that is currently granted to the userset *on* the resourceset.
             */
            permission: string;
            /**
             * Resource Set
             * @description the resourceset that represents the resources that are currently granted for access, i.e: all the resources matching this rule can be accessed by the userset to perform the granted *permission*
             */
            resource_set: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the condition set rule belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the condition set rule belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the condition set rule belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the condition set rule was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the condition set rule was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
        };
        /**
         * ConditionSetRuleRemove
         * @example {
         *       "user_set": "us_based_employees",
         *       "permission": "repository:clone",
         *       "resource_set": "private_repos"
         *     }
         */
        ConditionSetRuleRemove: {
            /**
             * User Set
             * @description The userset that will be unassigned these permission, i.e: all the users matching this rule will lose the specified permission
             */
            user_set: string;
            /**
             * Permission
             * @description The permission that will be removed from the userset *on* the resourceset. The permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the "permission name".
             */
            permission: string;
            /**
             * Resource Set
             * @description The resourceset that represents the resources that are no longer granted for access, i.e: all the resources matching this rule can no longer be accessed by the userset, and will be revoked the specified *permission*
             */
            resource_set: string;
            /**
             * Is Role
             * @description if True, will set the condition set rule to the role's autogen user-set.
             * @default false
             */
            is_role: boolean;
            /**
             * Is Resource
             * @description if True, will set the condition set rule to the resource's autogen resource-set.
             * @default false
             */
            is_resource: boolean;
        };
        /**
         * ConditionSetType
         * @description An enumeration.
         * @enum {string}
         */
        ConditionSetType: "userset" | "resourceset";
        /**
         * ConditionSetUpdate
         * @example {
         *       "name": "US based managers",
         *       "conditions": {
         *         "allOf": [
         *           {
         *             "user.role": {
         *               "equals": "manager"
         *             }
         *           },
         *           {
         *             "user.location": {
         *               "in": [
         *                 "US"
         *               ]
         *             }
         *           }
         *         ]
         *       }
         *     }
         */
        ConditionSetUpdate: {
            /**
             * Name
             * @description A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'
             */
            name?: string;
            /**
             * Description
             * @description an optional longer description of the set
             */
            description?: string;
            /**
             * Conditions
             * @description a boolean expression that consists of multiple conditions, with and/or logic.
             * @default {}
             */
            conditions: Record<string, never>;
            /**
             * Parent Id
             * @description Parent Condition Set
             */
            parent_id?: string;
        };
        /**
         * DataSourceConfig
         * @description Static list of Data Source Entries returned to client.
         *
         *     Answers this question for the client: from where should i get the
         *     full picture of data i need? (as opposed to incremental data
         *     updates)
         */
        DataSourceConfig: {
            /**
             * Entries
             * @description list of data sources and how to fetch from them
             * @default []
             */
            entries: components["schemas"]["DataSourceEntryWithPollingInterval"][];
        };
        /**
         * DataSourceEntryWithPollingInterval
         * @description Data source configuration - where client's should retrieve data from and how they should store it
         */
        DataSourceEntryWithPollingInterval: {
            /**
             * Url
             * @description Url source to query for data
             */
            url: string;
            /**
             * Config
             * @description Suggested fetcher configuration (e.g. auth or method) to fetch data with
             */
            config?: Record<string, never>;
            /**
             * Topics
             * @description topics the data applies to
             * @default [
             *       "policy_data"
             *     ]
             */
            topics: string[];
            /**
             * Dst Path
             * @description OPA data api path to store the document at
             * @default
             */
            dst_path: string;
            /**
             * Save Method
             * @description Method used to write into OPA - PUT/PATCH, when using the PATCH method the data field should conform to the JSON patch schema defined in RFC 6902(https://datatracker.ietf.org/doc/html/rfc6902#section-3)
             * @default PUT
             */
            save_method: string;
            /**
             * Data
             * @description Data payload to embed within the data update (instead of having the client fetch it from the url).
             */
            data?: components["schemas"]["JSONPatchAction"][] | unknown[] | Record<string, never>;
            /**
             * Periodic Update Interval
             * @description Polling interval to refresh data from data source
             */
            periodic_update_interval?: number;
        };
        /**
         * DerivedRole
         * @description This is the data of a specific derived role in the system
         */
        DerivedRole: {
            /** Conditions */
            conditions?: string;
            /**
             * Settings
             * @description Settings for the derived role.
             */
            settings: components["schemas"]["permit_backend__schemas__schema_opal_data__DerivationSettings"];
            /**
             * Rules
             * @description List of rules for the derived role.
             */
            rules: components["schemas"]["DerivedRoleRule"][];
        };
        /**
         * DerivedRoleBlockEdit
         * @example {
         *       "users_with_role": [
         *         {
         *           "role": "Admin",
         *           "on_resource": "organization",
         *           "linked_by_relation": "owner"
         *         }
         *       ]
         *     }
         */
        DerivedRoleBlockEdit: {
            /**
             * When
             * @description the settings of the derived role
             * @default {
             *       "no_direct_roles_on_object": false
             *     }
             */
            when: components["schemas"]["permit_backend__schemas__schema_derived_role_rule__DerivationSettings"];
            /**
             * Users With Role
             * @description the rules of the derived role
             * @default []
             */
            users_with_role: components["schemas"]["DerivedRoleRuleCreate"][];
        };
        /**
         * DerivedRoleBlockRead
         * @example {
         *       "id": "34821f4a-8191-491d-b550-864580f86ece",
         *       "users_with_role": [
         *         {
         *           "role": "Admin",
         *           "on_resource": "organization",
         *           "linked_by_relation": "owner",
         *           "role_id": "e985caaa-7712-4515-befd-e29336f6c954",
         *           "resource_id": "485c3c3b-edb3-4ef0-9d9b-ffd87a947236",
         *           "relation_id": "e1a09e35-5ff8-4beb-bc8e-847a16842a34"
         *         }
         *       ]
         *     }
         */
        DerivedRoleBlockRead: {
            /**
             * When
             * @description the settings of the derived role
             * @default {
             *       "no_direct_roles_on_object": false
             *     }
             */
            when: components["schemas"]["permit_backend__schemas__schema_derived_role_rule__DerivationSettings"];
            /**
             * Id
             * Format: uuid
             * @description The unique id of the derived_role
             */
            id: string;
            /**
             * Users With Role
             * @description the rules of the derived role
             * @default []
             */
            users_with_role: components["schemas"]["DerivedRoleRuleRead"][];
        };
        /**
         * DerivedRoleRule
         * @description This is the data of a specific derived role rule in the system
         */
        DerivedRoleRule: {
            /**
             * Relation
             * @description The relation between the resource and the related resource.
             */
            relation: string;
            /**
             * Related Resource
             * @description The related resource type key.
             */
            related_resource: string;
            /**
             * Related Role
             * @description The related role key.
             */
            related_role: string;
            /**
             * Settings
             * @description Settings for the derived role rule.
             */
            settings: components["schemas"]["permit_backend__schemas__schema_opal_data__DerivationSettings"];
        };
        /**
         * DerivedRoleRuleCreate
         * @example {
         *       "role": "Admin",
         *       "on_resource": "organization",
         *       "linked_by_relation": "owner"
         *     }
         */
        DerivedRoleRuleCreate: {
            /**
             * Role
             * @description the role key that needs to exist on the related resource (from the relation)
             */
            role: string;
            /**
             * On Resource
             * @description the resource key that needs to exist on the related role (from the relation)
             */
            on_resource: string;
            /**
             * Linked By Relation
             * @description the relation key that needs to exist between the resource and the related resource
             */
            linked_by_relation: string;
            /**
             * When
             * @description the settings of the derived role rule
             * @default {
             *       "no_direct_roles_on_object": false
             *     }
             */
            when: components["schemas"]["permit_backend__schemas__schema_derived_role_rule__DerivationSettings"];
        };
        /**
         * DerivedRoleRuleDelete
         * @example {
         *       "role": "Admin",
         *       "on_resource": "organization",
         *       "linked_by_relation": "owner"
         *     }
         */
        DerivedRoleRuleDelete: {
            /**
             * Role
             * @description the role key that needs to exist on the related resource (from the relation)
             */
            role: string;
            /**
             * On Resource
             * @description the resource key that needs to exist on the related role (from the relation)
             */
            on_resource: string;
            /**
             * Linked By Relation
             * @description the relation key that needs to exist between the resource and the related resource
             */
            linked_by_relation: string;
            /**
             * When
             * @description the settings of the derived role rule
             * @default {
             *       "no_direct_roles_on_object": false
             *     }
             */
            when: components["schemas"]["permit_backend__schemas__schema_derived_role_rule__DerivationSettings"];
        };
        /**
         * DerivedRoleRuleRead
         * @example {
         *       "role": "Admin",
         *       "on_resource": "organization",
         *       "linked_by_relation": "owner",
         *       "role_id": "e985caaa-7712-4515-befd-e29336f6c954",
         *       "resource_id": "485c3c3b-edb3-4ef0-9d9b-ffd87a947236",
         *       "relation_id": "e1a09e35-5ff8-4beb-bc8e-847a16842a34"
         *     }
         */
        DerivedRoleRuleRead: {
            /**
             * Role Id
             * Format: uuid
             * @description the role id that needs to exist on the related resource (from the relation)
             */
            role_id: string;
            /**
             * Resource Id
             * Format: uuid
             * @description the resource id that needs to exist on the related role (from the relation)
             */
            resource_id: string;
            /**
             * Relation Id
             * Format: uuid
             * @description the relation id that needs to exist between the resource and the related resource
             */
            relation_id: string;
            /**
             * Role
             * @description the role key that needs to exist on the related resource (from the relation)
             */
            role: string;
            /**
             * On Resource
             * @description the resource key that needs to exist on the related role (from the relation)
             */
            on_resource: string;
            /**
             * Linked By Relation
             * @description the relation key that needs to exist between the resource and the related resource
             */
            linked_by_relation: string;
            /**
             * When
             * @description the settings of the derived role rule
             * @default {
             *       "no_direct_roles_on_object": false
             *     }
             */
            when: components["schemas"]["permit_backend__schemas__schema_derived_role_rule__DerivationSettings"];
        };
        /** DetailedAuditLogModel */
        DetailedAuditLogModel: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Raw Data */
            raw_data: components["schemas"]["OPAEngineDecisionLog"] | components["schemas"]["AVPEngineDecisionLog"] | components["schemas"]["DummyEngineModel"];
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Query */
            query?: string;
            /** User Key */
            user_key?: string;
            /** User Email */
            user_email?: string;
            /** User Name */
            user_name?: string;
            /** Resource Type */
            resource_type?: string;
            /** Tenant */
            tenant?: string;
            /** Action */
            action?: string;
            /** Decision */
            decision?: boolean;
            /** Reason */
            reason?: string;
            /**
             * Org Id
             * Format: uuid
             */
            org_id: string;
            /**
             * Project Id
             * Format: uuid
             */
            project_id: string;
            /**
             * Env Id
             * Format: uuid
             */
            env_id: string;
            /**
             * Pdp Config Id
             * Format: uuid
             */
            pdp_config_id: string;
            /** Input */
            input?: unknown;
            /** Result */
            result?: unknown;
            /** Context */
            context?: unknown;
            objects: components["schemas"]["AuditLogObjectsModel"];
        };
        /**
         * DummyEngineModel
         * @description dummy engine class in case we couldn't parse the log but we didn't want to drop it
         */
        DummyEngineModel: {
            engine?: components["schemas"]["Engine"];
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
        };
        /** ElementsConfigCreate */
        ElementsConfigCreate: {
            /**
             * Key
             * @description A URL-friendly name of the elements_config (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the elements_config.
             */
            key: string;
            /**
             * Name
             * @description The name of the elements_config
             */
            name: string;
            /** @description The type of the elements interface, e.g: user management */
            elements_type: components["schemas"]["ElementsType"];
            /**
             * Settings
             * @description Obj with the options of the elements interface, e.g: primary color
             */
            settings: {
                [key: string]: number | string | boolean;
            };
            /**
             * Email Notifications
             * @description Whether to send email notifications to users using your Email Provider you set
             * @default false
             */
            email_notifications: boolean;
            /**
             * Roles To Levels
             * @description Obj with levels as keys and role ids as values
             */
            roles_to_levels: {
                [key: string]: string[];
            };
            webhook?: components["schemas"]["WebhookCreateWithElements"];
        };
        /** ElementsConfigRead */
        ElementsConfigRead: {
            /**
             * Key
             * @description A URL-friendly name of the elements_config (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the elements_config.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the elements_config
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the elements_config belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the elements_config belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the elements_config belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the elements_config was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the elements_config was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /** Is Active */
            is_active: boolean;
            /**
             * Name
             * @description The name of the elements_config
             */
            name: string;
            /** @description The type of the elements interface, e.g: user management */
            elements_type: components["schemas"]["ElementsType"];
            /**
             * Settings
             * @description Obj with the options of the elements interface, e.g: primary color
             */
            settings: {
                [key: string]: number | string | boolean;
            };
            /**
             * Email Notifications
             * @description Whether to send email notifications to users using your Email Provider you set
             * @default false
             */
            email_notifications: boolean;
            /**
             * Roles To Levels
             * @description Obj with levels as keys and role ids as values
             */
            roles_to_levels: {
                [key: string]: components["schemas"]["PermissionLevelRoleRead"][];
            };
            webhook?: components["schemas"]["WebhookRead"];
        };
        /** ElementsConfigRuntimeRead */
        ElementsConfigRuntimeRead: {
            config: components["schemas"]["ElementsConfigRead"];
            current_permission_level: components["schemas"]["ElementsPermissionLevel"];
        };
        /** ElementsConfigUpdate */
        ElementsConfigUpdate: {
            /**
             * Name
             * @description The name of the elements_config
             */
            name?: string;
            /** @description The type of the elements interface, e.g: user management */
            elements_type?: components["schemas"]["ElementsType"];
            /**
             * Settings
             * @description Obj with the options of the elements interface, e.g: primary color
             */
            settings?: {
                [key: string]: number | string | boolean;
            };
            /**
             * Email Notifications
             * @description Whether to send email notifications to users using your Email Provider you set
             * @default false
             */
            email_notifications: boolean;
            /**
             * Roles To Levels
             * @description Obj with levels as keys and role ids as values
             */
            roles_to_levels: {
                [key: string]: string[];
            };
            webhook?: components["schemas"]["WebhookUpdate"];
        };
        /**
         * ElementsPermissionLevel
         * @description An enumeration.
         * @enum {string}
         */
        ElementsPermissionLevel: "LEVEL_1" | "LEVEL_2" | "LEVEL_3" | "LEVEL_4" | "HIDDEN" | "UNCONFIGURED";
        /**
         * ElementsRoleRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "key": "editor",
         *       "name": "Editor",
         *       "permission_level": "LEVEL_2"
         *     }
         */
        ElementsRoleRead: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the role
             */
            id: string;
            /**
             * Key
             * @description A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.
             */
            key: string;
            /**
             * Name
             * @description The name of the role
             */
            name: string;
            permission_level: components["schemas"]["ElementsPermissionLevel"];
        };
        /**
         * ElementsType
         * @description An enumeration.
         * @enum {string}
         */
        ElementsType: "user_management" | "audit_log" | "approval_flow" | "operation_approval" | "approval_management";
        /**
         * ElementsUserCreate
         * @example {
         *       "key": "user|892179821739812389327",
         *       "email": "jane@coolcompany.com",
         *       "first_name": "Jane",
         *       "last_name": "Doe",
         *       "attributes": {
         *         "department": "marketing",
         *         "age": 30,
         *         "subscription": {
         *           "tier": "pro",
         *           "expired": false
         *         }
         *       },
         *       "role": "admin"
         *     }
         */
        ElementsUserCreate: {
            /**
             * Key
             * @description A unique id by which Permit will identify the user for permission checks.
             */
            key: string;
            /**
             * Email
             * Format: email
             * @description The email of the user. If synced, will be unique inside the environment.
             */
            email?: string;
            /**
             * First Name
             * @description First name of the user.
             */
            first_name?: string;
            /**
             * Last Name
             * @description Last name of the user.
             */
            last_name?: string;
            /**
             * Attributes
             * @description Arbitrary user attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
            /**
             * Role Assignments
             * @description List of roles to assign to the user in the environment.
             */
            role_assignments?: components["schemas"]["UserRoleCreate"][];
            /** Role */
            role?: string;
        };
        /** ElementsUserInviteApprove */
        ElementsUserInviteApprove: {
            /**
             * Email
             * Format: email
             * @description The email of the user that being invited
             */
            email: string;
            /**
             * Key
             * @description The key of the elements user invite
             */
            key: string;
            /**
             * Attributes
             * @description The attributes of the user
             */
            attributes: Record<string, never>;
        };
        /** ElementsUserInviteCreate */
        ElementsUserInviteCreate: {
            /**
             * Key
             * @description The key of the user that is being invited
             */
            key: string;
            /** @description The status of the user invite */
            status: components["schemas"]["UserInviteStatus"];
            /**
             * Email
             * Format: email
             * @description The email of the user that being invited
             */
            email: string;
            /**
             * First Name
             * @description The first name of the user that is being invited
             */
            first_name: string;
            /**
             * Last Name
             * @description The last name of the user that is being invited
             */
            last_name: string;
            /**
             * Role Id
             * Format: uuid
             * @description The role of the user that is being invited
             */
            role_id: string;
            /**
             * Tenant Id
             * Format: uuid
             * @description The tenant id of the user that is being invited
             */
            tenant_id: string;
        };
        /** ElementsUserInviteRead */
        ElementsUserInviteRead: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the elements_user_invite
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the elements_user_invite belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the elements_user_invite belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the elements_user_invite belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the elements_user_invite was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the elements_user_invite was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Key
             * @description The key of the user that is being invited
             */
            key: string;
            /** @description The status of the user invite */
            status: components["schemas"]["UserInviteStatus"];
            /**
             * Email
             * Format: email
             * @description The email of the user that being invited
             */
            email: string;
            /**
             * First Name
             * @description The first name of the user that is being invited
             */
            first_name: string;
            /**
             * Last Name
             * @description The last name of the user that is being invited
             */
            last_name: string;
            /**
             * Role Id
             * Format: uuid
             * @description The role of the user that is being invited
             */
            role_id: string;
            /**
             * Tenant Id
             * Format: uuid
             * @description The tenant id of the user that is being invited
             */
            tenant_id: string;
        };
        /** ElementsUserInviteUpdate */
        ElementsUserInviteUpdate: {
            /**
             * Key
             * @description The key of the user that is being invited
             */
            key: string;
            /** @description The status of the user invite */
            status: components["schemas"]["UserInviteStatus"];
            /**
             * Email
             * Format: email
             * @description The email of the user that being invited
             */
            email: string;
            /**
             * First Name
             * @description The first name of the user that is being invited
             */
            first_name: string;
            /**
             * Last Name
             * @description The last name of the user that is being invited
             */
            last_name: string;
            /**
             * Role Id
             * Format: uuid
             * @description The role of the user that is being invited
             */
            role_id: string;
            /**
             * Tenant Id
             * Format: uuid
             * @description The tenant id of the user that is being invited
             */
            tenant_id: string;
        };
        /**
         * ElementsUserRoleCreate
         * @example {
         *       "role": "admin"
         *     }
         */
        ElementsUserRoleCreate: {
            /**
             * Role
             * @description the role that will be assigned (accepts either the role id or the role key)
             */
            role: string;
        };
        /**
         * ElementsUserRoleRemove
         * @example {
         *       "role": "editor"
         *     }
         */
        ElementsUserRoleRemove: {
            /**
             * Role
             * @description the role that will be unassigned (accepts either the role id or the role key)
             */
            role: string;
        };
        /** EmailConfigurationCreate */
        EmailConfigurationCreate: components["schemas"]["SMTPEmailConfigurationCreate"] | components["schemas"]["MailgunEmailConfigurationCreate"];
        /** EmailConfigurationRead */
        EmailConfigurationRead: components["schemas"]["SMTPEmailConfigurationRead"] | components["schemas"]["MailgunEmailConfigurationRead"];
        /**
         * EmailMessageKeys
         * @description An enumeration.
         * @enum {string}
         */
        EmailMessageKeys: "approval_flows_deny" | "user_management_invite" | "approval_flows_approve" | "approval_flows_request" | "test_email";
        /** EmailTemplateMessage */
        EmailTemplateMessage: {
            /** @description The key of the message, can be either 'approval_flows_deny', 'approval_flows_approve', 'approval_flows_request' */
            message_type: components["schemas"]["EmailMessageKeys"];
            /**
             * Message Content
             * @description The value of the message
             */
            message_content: string;
        };
        /** EmailTemplateRead */
        EmailTemplateRead: {
            /** @description The type of the email template, can be either 'approval_flows' or 'user_management' */
            template_type: components["schemas"]["EmailTemplateType"];
            /**
             * Id
             * Format: uuid
             * @description Unique id of the EmailTemplate
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the EmailTemplate belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the EmailTemplate belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the EmailTemplate belongs to.
             */
            environment_id: string;
            /**
             * From Address
             * Format: email
             * @description The from address the mails will be sent from
             */
            from_address: string;
            /**
             * Redirect To
             * Format: uri
             * @description The redirect url the user will be redirected to after clicking the link in the email
             */
            redirect_to: string;
            /**
             * Url Ttl
             * @description The time to live of the url in the email, in seconds
             */
            url_ttl: string;
            /**
             * Subject
             * @description The subject of the email template
             */
            subject: string;
            /**
             * Messages
             * @description The messages of the email template
             */
            messages: components["schemas"]["EmailTemplateMessage"][];
        };
        /**
         * EmailTemplateType
         * @description An enumeration.
         * @enum {string}
         */
        EmailTemplateType: "approval_flows" | "user_management" | "test_email";
        /** EmailTemplateUpdate */
        EmailTemplateUpdate: {
            /**
             * From Address
             * Format: email
             * @description The from address the mails will be sent from
             */
            from_address: string;
            /**
             * Redirect To
             * Format: uri
             * @description The redirect url the user will be redirected to after clicking the link in the email
             */
            redirect_to: string;
            /**
             * Url Ttl
             * @description The time to live of the url in the email, in seconds
             */
            url_ttl: string;
            /**
             * Subject
             * @description The subject of the email template
             */
            subject: string;
            /**
             * Messages
             * @description The messages of the email template
             */
            messages: components["schemas"]["EmailTemplateMessage"][];
        };
        /**
         * Engine
         * @description An enumeration.
         * @enum {string}
         */
        Engine: "OPA" | "AVP";
        /** EnvironmentCopy */
        EnvironmentCopy: {
            /**
             * Target Env
             * @description If copying a new environment, the environment configuration. If copying to an existing environment, the environment identifier
             */
            target_env: components["schemas"]["EnvironmentCopyTarget"];
            /**
             * @description Action to take when detecting a conflict when copying. Only applies to copying into an existing environment
             * @default fail
             */
            conflict_strategy: components["schemas"]["EnvironmentCopyConflictStrategy"];
            /**
             * Scope
             * @description Filters to include and exclude copied objects
             * @default {
             *       "resources": {
             *         "include": [],
             *         "exclude": []
             *       },
             *       "roles": {
             *         "include": [],
             *         "exclude": []
             *       },
             *       "user_sets": {
             *         "include": [],
             *         "exclude": []
             *       },
             *       "resource_sets": {
             *         "include": [],
             *         "exclude": []
             *       },
             *       "custom_policies": {
             *         "include": [],
             *         "exclude": []
             *       }
             *     }
             */
            scope: components["schemas"]["EnvironmentCopyScope"];
        };
        /**
         * EnvironmentCopyConflictStrategy
         * @description An enumeration.
         * @enum {string}
         */
        EnvironmentCopyConflictStrategy: "fail" | "overwrite";
        /** EnvironmentCopyScope */
        EnvironmentCopyScope: {
            /**
             * Resources
             * @description Resources to copy
             * @default {
             *       "include": [],
             *       "exclude": []
             *     }
             */
            resources: components["schemas"]["EnvironmentCopyScopeFilters"];
            /**
             * Roles
             * @description Roles to copy
             * @default {
             *       "include": [],
             *       "exclude": []
             *     }
             */
            roles: components["schemas"]["EnvironmentCopyScopeFilters"];
            /**
             * User Sets
             * @description User sets to copy
             * @default {
             *       "include": [],
             *       "exclude": []
             *     }
             */
            user_sets: components["schemas"]["EnvironmentCopyScopeFilters"];
            /**
             * Resource Sets
             * @description Resource sets to copy
             * @default {
             *       "include": [],
             *       "exclude": []
             *     }
             */
            resource_sets: components["schemas"]["EnvironmentCopyScopeFilters"];
            /**
             * Custom Policies
             * @description Custom policies to copy
             * @default {
             *       "include": [],
             *       "exclude": []
             *     }
             */
            custom_policies: components["schemas"]["EnvironmentCopyScopeFilters"];
        };
        /** EnvironmentCopyScopeFilters */
        EnvironmentCopyScopeFilters: {
            /**
             * Include
             * @description Objects to include (use * as wildcard)
             * @default []
             */
            include: string[];
            /**
             * Exclude
             * @description Object to exclude (use * as wildcard)
             * @default []
             */
            exclude: string[];
        };
        /** EnvironmentCopyTarget */
        EnvironmentCopyTarget: {
            /**
             * Existing
             * @description Identifier of an existing environment to copy into
             */
            existing?: string;
            /**
             * New
             * @description Description of the environment to create. This environment must not already exist.
             */
            new?: components["schemas"]["EnvironmentCreate"];
        };
        /** EnvironmentCreate */
        EnvironmentCreate: {
            /**
             * Key
             * @description A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.
             */
            key: string;
            /**
             * Name
             * @description The name of the environment
             */
            name: string;
            /**
             * Description
             * @description an optional longer description of the environment
             */
            description?: string;
            /**
             * Custom Branch Name
             * @description when using gitops feature, an optional branch name for the environment
             */
            custom_branch_name?: string;
            /**
             * Jwks
             * @description jwks for element frontend only login
             */
            jwks?: components["schemas"]["JwksConfig"];
            /**
             * Settings
             * @description the settings for this environment
             */
            settings?: Record<string, never>;
        };
        /** EnvironmentObj */
        EnvironmentObj: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Name */
            name?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** EnvironmentRead */
        EnvironmentRead: {
            /**
             * Key
             * @description A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the environment
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the environment belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the environment belongs to.
             */
            project_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the environment was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the environment was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /** Avp Policy Store Id */
            avp_policy_store_id?: string;
            /**
             * Name
             * @description The name of the environment
             */
            name: string;
            /**
             * Description
             * @description an optional longer description of the environment
             */
            description?: string;
            /**
             * Custom Branch Name
             * @description when using gitops feature, an optional branch name for the environment
             */
            custom_branch_name?: string;
            /**
             * Jwks
             * @description jwks for element frontend only login
             */
            jwks?: components["schemas"]["JwksConfig"];
            /**
             * Settings
             * @description the settings for this environment
             */
            settings?: Record<string, never>;
        };
        /** EnvironmentReadWithEmailConfig */
        EnvironmentReadWithEmailConfig: {
            /**
             * Key
             * @description A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the environment
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the environment belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the environment belongs to.
             */
            project_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the environment was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the environment was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /** Avp Policy Store Id */
            avp_policy_store_id?: string;
            /**
             * Name
             * @description The name of the environment
             */
            name: string;
            /**
             * Description
             * @description an optional longer description of the environment
             */
            description?: string;
            /**
             * Custom Branch Name
             * @description when using gitops feature, an optional branch name for the environment
             */
            custom_branch_name?: string;
            /**
             * Jwks
             * @description jwks for element frontend only login
             */
            jwks?: components["schemas"]["JwksConfig"];
            /**
             * Settings
             * @description the settings for this environment
             */
            settings?: Record<string, never>;
            /**
             * Email Configuration
             * Format: uuid
             */
            email_configuration: string;
        };
        /** EnvironmentStatistics */
        EnvironmentStatistics: {
            /** Roles */
            roles: number;
            /** Users */
            users: number;
            /** Policies */
            policies: number;
            /** Resources */
            resources: number;
            /** Tenants */
            tenants: number;
            /** Has Decision Logs */
            has_decision_logs: boolean;
            /** Members */
            members: components["schemas"]["OrgMemberReadWithGrants"][];
            /** Mau */
            mau: number;
        };
        /** EnvironmentStats */
        EnvironmentStats: {
            /**
             * Key
             * @description A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the environment
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the environment belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the environment belongs to.
             */
            project_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the environment was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the environment was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /** Avp Policy Store Id */
            avp_policy_store_id?: string;
            /**
             * Name
             * @description The name of the environment
             */
            name: string;
            /**
             * Description
             * @description an optional longer description of the environment
             */
            description?: string;
            /**
             * Custom Branch Name
             * @description when using gitops feature, an optional branch name for the environment
             */
            custom_branch_name?: string;
            /**
             * Jwks
             * @description jwks for element frontend only login
             */
            jwks?: components["schemas"]["JwksConfig"];
            /**
             * Settings
             * @description the settings for this environment
             */
            settings?: Record<string, never>;
            /** Pdp Configs */
            pdp_configs: components["schemas"]["PDPConfigRead"][];
            stats: components["schemas"]["EnvironmentStatistics"];
        };
        /** EnvironmentUpdate */
        EnvironmentUpdate: {
            /**
             * Name
             * @description The name of the environment
             */
            name?: string;
            /**
             * Description
             * @description an optional longer description of the environment
             */
            description?: string;
            /**
             * Custom Branch Name
             * @description when using gitops feature, an optional branch name for the environment
             */
            custom_branch_name?: string;
            /**
             * Jwks
             * @description jwks for element frontend only login
             */
            jwks?: components["schemas"]["JwksConfig"];
            /**
             * Settings
             * @description the settings for this environment
             */
            settings?: Record<string, never>;
        };
        /**
         * ErrorCode
         * @description An enumeration.
         * @enum {string}
         */
        ErrorCode: "INVALID_INPUT" | "INVALID_JWKS_CONFIGURATION" | "UNEXPECTED_ERROR" | "NOT_FOUND" | "DUPLICATE_ENTITY" | "EMPTY_DECISION_LOGS" | "MISSING_REQUEST_ATTRIBUTE" | "FORBIDDEN_ACCESS" | "INVALID_PERMISSION_FORMAT" | "MISSING_PERMISSIONS" | "UNSUPPORTED_ATTRIBUTE_TYPE" | "MISSING_RESOURCE_ATTRIBUTE" | "MISMATCH_ATTRIBUTES_TYPES" | "INVALID_POLICY_REPO_STATUS" | "INVALID_SMTP_CONFIGURATION" | "MISMATCH_RESOURCE_INSTANCES_TENANTS" | "PAGINATION_SIZE_OVERREACHED" | "MISMATCH_RELATION_TYPE" | "CONCURRENT_OPERATION_DISALLOWED";
        /** ErrorDetails */
        ErrorDetails: {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /**
             * Support Link
             * Format: uri
             */
            support_link?: string;
            error_code: components["schemas"]["ErrorCode"];
            /**
             * Message
             * @default
             */
            message: string;
            /** Additional Info */
            additional_info?: unknown;
        };
        /** FailedInvite */
        FailedInvite: {
            /** Email */
            email: string;
            /** Reason */
            reason: string;
        };
        /**
         * FullData
         * @description This is the data structure that is used by the PDP in a manged Permit environment.
         *     The code Permit generates uses this data structure to enforce the policy and make decisions.
         * @example {
         *       "use_debugger": true,
         *       "mapping_rules": {
         *         "all": [
         *           {
         *             "action": "read",
         *             "http_method": "get",
         *             "resource": "document",
         *             "url": "https://example.com/{var}/resources/{var2}"
         *           }
         *         ]
         *       },
         *       "users": {
         *         "user1": {
         *           "roleAssignments": {
         *             "default": [
         *               "viewer"
         *             ]
         *           },
         *           "attributes": {
         *             "email": "user1@permit.io",
         *             "key": "user1"
         *           }
         *         }
         *       },
         *       "tenants": {
         *         "default": {
         *           "attributes": {
         *             "attr1": "value1"
         *           }
         *         }
         *       },
         *       "role_permissions": {
         *         "community": {
         *           "admin": {
         *             "grants": {}
         *           },
         *           "viewer": {
         *             "grants": {}
         *           }
         *         },
         *         "document": {
         *           "editor": {
         *             "grants": {
         *               "document": [
         *                 "update",
         *                 "read"
         *               ]
         *             }
         *           },
         *           "viewer": {
         *             "grants": {
         *               "document": [
         *                 "read"
         *               ]
         *             }
         *           }
         *         }
         *       },
         *       "roles": {
         *         "viewer": {
         *           "grants": {
         *             "document": [
         *               "read"
         *             ]
         *           }
         *         }
         *       },
         *       "condition_sets": {
         *         "resourceset_big_5ffiles": {
         *           "type": "resourceset",
         *           "key": "big_files"
         *         },
         *         "userset_permit_57users": {
         *           "type": "userset",
         *           "key": "permit_users"
         *         }
         *       },
         *       "condition_set_rules": {
         *         "permit_users": {
         *           "big_files": {
         *             "document": [
         *               "read",
         *               "update"
         *             ]
         *           }
         *         }
         *       },
         *       "resource_instances": {
         *         "community:community-0": {
         *           "attributes": {}
         *         },
         *         "document:document-0": {
         *           "attributes": {}
         *         },
         *         "document:document-1": {
         *           "attributes": {}
         *         }
         *       },
         *       "relationships": {
         *         "document:document-0": {
         *           "relation:community": {
         *             "community": [
         *               "community-0"
         *             ]
         *           }
         *         },
         *         "document:document-1": {
         *           "relation:community": {
         *             "community": [
         *               "community-0"
         *             ]
         *           }
         *         }
         *       },
         *       "resource_types": {
         *         "__tenant": {
         *           "actions": [],
         *           "derived_roles": {}
         *         },
         *         "__user": {
         *           "actions": [],
         *           "derived_roles": {}
         *         },
         *         "community": {
         *           "actions": [],
         *           "derived_roles": {}
         *         },
         *         "document": {
         *           "actions": [
         *             "read",
         *             "update"
         *           ],
         *           "derived_roles": {
         *             "editor": {
         *               "rules": [
         *                 {
         *                   "related_resource": "community",
         *                   "related_role": "admin",
         *                   "relation": "community",
         *                   "settings": {
         *                     "superseded_by_direct_role": false
         *                   }
         *                 }
         *               ],
         *               "settings": {
         *                 "superseded_by_direct_role": false
         *               }
         *             },
         *             "viewer": {
         *               "rules": [
         *                 {
         *                   "related_resource": "community",
         *                   "related_role": "admin",
         *                   "relation": "community",
         *                   "settings": {
         *                     "superseded_by_direct_role": false
         *                   }
         *                 },
         *                 {
         *                   "related_resource": "community",
         *                   "related_role": "viewer",
         *                   "relation": "community",
         *                   "settings": {
         *                     "superseded_by_direct_role": false
         *                   }
         *                 }
         *               ],
         *               "settings": {
         *                 "superseded_by_direct_role": false
         *               }
         *             }
         *           }
         *         }
         *       },
         *       "role_assignments": {
         *         "user:user1": {
         *           "__tenant:default": [
         *             "viewer"
         *           ],
         *           "document:document-1": [
         *             "editor"
         *           ]
         *         }
         *       }
         *     }
         */
        FullData: {
            /**
             * Use Debugger
             * @default true
             */
            use_debugger: boolean;
            /**
             * Users
             * @description Key-Value mapping of the users in the system.
             *     The key is the user key and the value contains some details about the user.
             */
            users: {
                [key: string]: components["schemas"]["UserData"];
            };
            /**
             * Tenants
             * @description Key-Value mapping of the tenants in the system.
             *     The key is the tenant key and the value contains some details about the tenant.
             */
            tenants: {
                [key: string]: components["schemas"]["TenantData"];
            };
            /**
             * Roles
             * @deprecated
             * @description Key-Value mapping of the roles in the system.
             *     The key is the role key and the value contains some details about the role.
             */
            roles: {
                [key: string]: components["schemas"]["RoleData"];
            };
            /**
             * Condition Set Rules
             * @description Key-Value mapping of the permissions for each condition set.
             *     The key is the user-set key and the value is Key-Value mapping of resource-set key to the permissions for that user-set & resource-set.The key is the resource key and the value is list of actions that the user-set can perform on that resource-set
             */
            condition_set_rules: {
                [key: string]: {
                    [key: string]: {
                        [key: string]: string[];
                    };
                };
            };
            /**
             * Condition Set Rules Expand
             * @description Sanitized Key-Value mapping of the permissions for each condition set.
             *     (Equal to condition_set_rules but user_set_key and resource_set_key are sanitized)The key is the user-set key and the value is Key-Value mapping of resource-set key to the permissions for that user-set & resource-set.The key is the resource key and the value is list of actions that the user-set can perform on that resource-set
             * @default {}
             */
            condition_set_rules_expand: {
                [key: string]: {
                    [key: string]: {
                        [key: string]: string[];
                    };
                };
            };
            /**
             * Relationships
             * @description Key-Value mapping of the relationships between resources.
             *     The key is the resource instance key and the value is Key-Value mapping of relation key to a Key-Value mapping of resource ( type ) to list of instances keys.
             */
            relationships: {
                [key: string]: {
                    [key: string]: {
                        [key: string]: string[];
                    };
                };
            };
            /**
             * Resource Types
             * @description Key-Value mapping of the resource types in the system.
             *     The key is the resource type key and the value contains some details about the resource type.
             */
            resource_types: {
                [key: string]: components["schemas"]["ResourceTypeData"];
            };
            /**
             * Condition Sets
             * @description Key-Value mapping of the condition sets in the system.
             *     The key is the formatted condition set key and the value contains some details about the condition set.
             */
            condition_sets: {
                [key: string]: components["schemas"]["ConditionSetData"];
            };
            /**
             * Role Assignments
             * @description Key-Value mapping of the role assignments for the users.
             *     The key is the user key and the value is Key-Value mapping of resource instance key or tenant key to list of role keys assigned to the user in that resource instance.
             */
            role_assignments: {
                [key: string]: {
                    [key: string]: string[];
                };
            };
            /**
             * Role Permissions
             * @description Key-Value mapping of the permissions for each role.
             *     The key is the resource key and the value is Key-Value mapping of role key to details on the role permissions.
             */
            role_permissions: {
                [key: string]: {
                    [key: string]: components["schemas"]["RoleData"];
                };
            };
            /**
             * Mapping Rules
             * @description Key-Value mapping of groups of mapping rules in the system.
             *     The key is the mapping rule group and the value is a list of mapping rules objects.We currently have only one group named 'all' which contains all the mapping rules.A mapping rule object contains, action, http_method, resource and url - all strings.
             * @default {}
             */
            mapping_rules: {
                [key: string]: {
                    [key: string]: string | number;
                }[];
            };
            /**
             * Resource Instances
             * @description Key-Value mapping of the resource instances in the system.
             *     The key is the resource instance key and the value contains some details about the resource instance.
             * @default {}
             */
            resource_instances: {
                [key: string]: components["schemas"]["ResourceInstanceAttributeData"];
            };
        };
        /**
         * GroupAddRole
         * @example {
         *       "role": "admin",
         *       "resource": "rnd",
         *       "resource_instance": "backend",
         *       "tenant": "business"
         *     }
         */
        GroupAddRole: {
            /**
             * Role
             * @description The role key or id that will be assigned to the group.
             */
            role: string;
            /**
             * Resource
             * @description The resource key or id that the role belongs to.
             */
            resource: string;
            /**
             * Resource Instance
             * @description The resource instance key or id that the role belongs to.
             */
            resource_instance: string;
            /**
             * Tenant
             * @description The tenant key or id that the role belongs to.
             */
            tenant: string;
        };
        /**
         * GroupAssignUser
         * @example {
         *       "tenant": "business"
         *     }
         */
        GroupAssignUser: {
            /**
             * Tenant
             * @description The tenant key or id that the user belongs to.
             */
            tenant: string;
        };
        /** GroupAssignment */
        GroupAssignment: {
            /**
             * Group Instance Key
             * @description Either the unique id of the resource instance that that the group belongs to, or the URL-friendly key of the <resource_key:resource_instance_key> (i.e: file:my_file)
             */
            group_instance_key: string;
        };
        /**
         * GroupCreate
         * @example {
         *       "group_resource_type_key": "company",
         *       "group_instance_key": "Acme",
         *       "group_tenant": "business"
         *     }
         */
        GroupCreate: {
            /**
             * Group Resource Type Key
             * @description The key of the resource type that the group belongs to.
             * @default group
             */
            group_resource_type_key: string;
            /**
             * Group Instance Key
             * @description Either the unique id of the resource instance that that the group belongs to, or the URL-friendly key of the <resource_key:resource_instance_key> (i.e: file:my_file)
             */
            group_instance_key: string;
            /**
             * Group Tenant
             * @description The tenant key or id that the group belongs to.
             */
            group_tenant: string;
        };
        /**
         * GroupRead
         * @example {
         *       "group_resource_type_key": "company",
         *       "group_instance_key": "Acme",
         *       "group_tenant": "business",
         *       "assigned_roles": [
         *         "rnd:backend#admin",
         *         "marketing:social_media#editor"
         *       ],
         *       "users": [
         *         "user_1",
         *         "user_2"
         *       ]
         *     }
         */
        GroupRead: {
            /**
             * Assigned Roles
             * @description List of roles that are assigned to this group
             */
            assigned_roles?: string[];
            /**
             * Users
             * @description List of user ids that are assigned to this group
             */
            users?: string[];
            /**
             * Group Resource Type Key
             * @description The key of the resource type that the group belongs to.
             * @default group
             */
            group_resource_type_key: string;
            /**
             * Group Instance Key
             * @description Either the unique id of the resource instance that that the group belongs to, or the URL-friendly key of the <resource_key:resource_instance_key> (i.e: file:my_file)
             */
            group_instance_key: string;
            /**
             * Group Tenant
             * @description The tenant key or id that the group belongs to.
             */
            group_tenant: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HistoricalUsage */
        HistoricalUsage: {
            current_month?: components["schemas"]["MonthlyUsage"];
            previous_month?: components["schemas"]["MonthlyUsage"];
            two_months_ago?: components["schemas"]["MonthlyUsage"];
        };
        /**
         * HttpMethods
         * @description An enumeration.
         * @enum {unknown}
         */
        HttpMethods: "get" | "post" | "put" | "patch" | "head" | "delete";
        /** IdentityRead */
        IdentityRead: {
            /**
             * User Id
             * @description Unique User Id of this identity in the identity provider (including the provider type)
             */
            user_id: string;
            /**
             * Provider
             * @description The identity provider type this identity came from
             */
            provider: string;
            /**
             * Sub
             * @description Unique User Id of this identity in the identity provider (NOT including the provider type)
             */
            sub: string;
            /**
             * Email
             * Format: email
             * @description Email connected to this account identity
             */
            email: string;
            /**
             * Email Verified
             * @description Whether this email address connected to this account identity is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.
             */
            email_verified: boolean;
            /**
             * Auth0 Info
             * @description Raw user info json coming from our identity provider and matching a specific account identity
             */
            auth0_info: Record<string, never>;
        };
        /** InviteCreate */
        InviteCreate: {
            /**
             * Member Id
             * Format: uuid
             * @description Unique id of the invite
             */
            member_id?: string;
            /**
             * Email
             * Format: email
             * @description The invited member's email address
             */
            email: string;
            /**
             * @description The role the member will be assigned with
             * @default admin
             */
            role: components["schemas"]["MemberAccessLevel"];
        };
        /**
         * InviteRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "invite_code": "40ef0e48-a11f-4963-a229-e396c9eeefff",
         *       "email": "jane@coolcompany.com",
         *       "role": "admin",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "status": "pending",
         *       "failed_reason": ""
         *     }
         */
        InviteRead: {
            /**
             * Member Id
             * Format: uuid
             * @description Unique id of the invite
             */
            member_id?: string;
            /**
             * Email
             * Format: email
             * @description The invited member's email address
             */
            email: string;
            /**
             * @description The role the member will be assigned with
             * @default admin
             */
            role: components["schemas"]["MemberAccessLevel"];
            /**
             * Id
             * Format: uuid
             * @description Unique id of the invite
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the invite belongs to.
             */
            organization_id: string;
            /**
             * Invite Code
             * Format: uuid
             * @description The invite code that is sent to the member's email
             */
            invite_code: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the invite was created (ISO_8601 format).
             */
            created_at: string;
            /** @description The status of the invite (pending, failed, etc) */
            status: components["schemas"]["InviteStatus"];
            /**
             * Failed Reason
             * @description if failed, the reason the invitation failed
             */
            failed_reason?: string;
        };
        /**
         * InviteStatus
         * @description An enumeration.
         * @enum {string}
         */
        InviteStatus: "pending" | "accepted" | "failed" | "canceled";
        /**
         * JSONPatchAction
         * @description Abstract base class for JSON patch actions (RFC 6902)
         */
        JSONPatchAction: {
            /**
             * Op
             * @description patch action to perform
             */
            op: string;
            /**
             * Path
             * @description target location in modified json
             */
            path: string;
            /**
             * Value
             * @description json document, the operand of the action
             */
            value?: unknown;
            /**
             * From
             * @description source location in json
             */
            from?: string;
        };
        /** JwksConfig */
        JwksConfig: {
            /**
             * Ttl
             * @description JWKS cache TTL (in seconds)
             * @default 600
             */
            ttl: number;
            /**
             * Url
             * @description ...
             */
            url?: string;
            /**
             * Jwks
             * @description ...
             */
            jwks?: components["schemas"]["JwksObj"];
        };
        /** JwksObj */
        JwksObj: {
            /**
             * Keys
             * @description The keys to match against the request headers
             */
            keys: Record<string, never>[];
        };
        /** LimitedPaginatedResult[APIHistoryEventRead] */
        LimitedPaginatedResult_APIHistoryEventRead_: {
            /**
             * Data
             * @description List of Api History Events
             */
            data: components["schemas"]["APIHistoryEventRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
            /** Pagination Count */
            pagination_count: number;
        };
        /** LimitedPaginatedResult[ActivityLogEventRead] */
        LimitedPaginatedResult_ActivityLogEventRead_: {
            /**
             * Data
             * @description List of Activity Log Events
             */
            data: components["schemas"]["ActivityLogEventRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
            /** Pagination Count */
            pagination_count: number;
        };
        /** LimitedPaginatedResult[AuditLogModel] */
        LimitedPaginatedResult_AuditLogModel_: {
            /**
             * Data
             * @description List of Audit Log Models
             */
            data: components["schemas"]["AuditLogModel"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
            /** Pagination Count */
            pagination_count: number;
        };
        /** MailgunEmailConfigurationCreate */
        MailgunEmailConfigurationCreate: {
            /**
             * From Address
             * @description The from address the mails will be sent from
             */
            from_address: string;
            /**
             * Api Key
             * @description The api key of the mail provider
             */
            api_key: string;
            /**
             * Region
             * @description The region of the mail provider
             */
            region: string;
            /**
             * Domain
             * Format: uri
             * @description The domain of the mail provider
             */
            domain: string;
            /**
             * @description The type of the email provider (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            email_provider_type: "mailgun";
        };
        /** MailgunEmailConfigurationRead */
        MailgunEmailConfigurationRead: {
            /**
             * From Address
             * @description The from address the mails will be sent from
             */
            from_address: string;
            /**
             * Api Key
             * @description The api key of the mail provider
             */
            api_key: string;
            /**
             * Region
             * @description The region of the mail provider
             */
            region: string;
            /**
             * Domain
             * Format: uri
             * @description The domain of the mail provider
             */
            domain: string;
            /**
             * @description The type of the email provider (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            email_provider_type: "mailgun";
            /**
             * Id
             * Format: uuid
             * @description Unique id of the email_configuration
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the email_configuration belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the email_configuration belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the email_configuration belongs to.
             */
            environment_id: string;
        };
        /** MappingRule */
        MappingRule: {
            /**
             * Url
             * Format: uri
             * @description The URL to match against the request URL
             */
            url: string;
            /** @description The HTTP method to match against the request method */
            http_method: components["schemas"]["Methods"];
            /**
             * Resource
             * @description The resource to match against the request resource
             */
            resource: string;
            /**
             * Headers
             * @description The headers to match against the request headers
             * @default {}
             */
            headers: {
                [key: string]: string;
            };
            /**
             * Action
             * @description The action to match against the request action
             */
            action?: string;
            /**
             * Priority
             * @description The priority of the mapping rule. The higher the priority, the higher the precedence
             */
            priority?: number;
        };
        /**
         * MemberAccessLevel
         * @description An enumeration.
         * @enum {string}
         */
        MemberAccessLevel: "admin" | "write" | "read" | "no_access";
        /**
         * MemberAccessObj
         * @description An enumeration.
         * @enum {string}
         */
        MemberAccessObj: "org" | "project" | "env";
        /**
         * Methods
         * @description An enumeration.
         * @enum {string}
         */
        Methods: "get" | "post" | "put" | "patch" | "delete" | "head" | "options";
        /**
         * MissingUserPolicy
         * @description An enumeration.
         * @enum {string}
         */
        MissingUserPolicy: "fail" | "ignore" | "create";
        /** MonthlyUsage */
        MonthlyUsage: {
            /**
             * Mau
             * @default 0
             */
            mau: number;
            /**
             * Tenants
             * @default 0
             */
            tenants: number;
            /**
             * Monthly Tenants
             * @default []
             */
            monthly_tenants: string[];
            /**
             * Month
             * @default 0
             */
            month: number;
            /**
             * Year
             * @default 0
             */
            year: number;
        };
        /** MultiInviteResult */
        MultiInviteResult: {
            /** Success */
            success: components["schemas"]["InviteRead"][];
            /**
             * Failed
             * @description invites that were not even attempted, and the reason why
             * @default []
             */
            failed: components["schemas"]["FailedInvite"][];
        };
        /** OPAEngineDecisionLog */
        OPAEngineDecisionLog: {
            /**
             * Engine
             * @default OPA
             * @enum {string}
             */
            engine: "OPA";
            /**
             * Decision Id
             * Format: uuid
             */
            decision_id: string;
            labels: components["schemas"]["OPALabels"];
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Path */
            path: string;
            /** Input */
            input?: unknown;
            /** Result */
            result?: unknown;
            metrics: components["schemas"]["OPAMetrics"];
        };
        /** OPALClient */
        OPALClient: {
            /** Data Topics */
            DATA_TOPICS: string[];
            /** Client Token */
            CLIENT_TOKEN: string;
            /** Server Url */
            SERVER_URL: string;
            /** Server Ws Url */
            SERVER_WS_URL: string;
            /** Server Pubsub Url */
            SERVER_PUBSUB_URL: string;
            /** Default Data Sources Config Url */
            DEFAULT_DATA_SOURCES_CONFIG_URL: string;
            /** Scope Id */
            SCOPE_ID?: string;
            /** Should Report On Data Updates */
            SHOULD_REPORT_ON_DATA_UPDATES?: boolean;
            DEFAULT_UPDATE_CALLBACKS?: components["schemas"]["OPALUpdateCallback"];
            DEFAULT_UPDATE_CALLBACK_CONFIG?: components["schemas"]["OPALHttpFetcherConfig"];
        };
        /** OPALCommon */
        OPALCommon: {
            /**
             * Fetching Callback Timeout
             * @default 60
             */
            FETCHING_CALLBACK_TIMEOUT: number;
            /** Auth Public Key */
            AUTH_PUBLIC_KEY: string;
        };
        /**
         * OPALHttpFetcherConfig
         * @description Config for HttpFetchProvider's Adding HTTP headers.
         */
        OPALHttpFetcherConfig: {
            /**
             * Fetcher
             * @description indicates to OPAL client that it should use a custom FetcherProvider to fetch the data
             */
            fetcher?: string;
            /** Headers */
            headers?: {
                [key: string]: string;
            };
            /**
             * Is Json
             * @default true
             */
            is_json: boolean;
            /**
             * Process Data
             * @default true
             */
            process_data: boolean;
            /** @default get */
            method: components["schemas"]["HttpMethods"];
            /** Data */
            data?: unknown;
        };
        /** OPALUpdateCallback */
        OPALUpdateCallback: {
            /** Callbacks */
            callbacks: (string | [
                string,
                components["schemas"]["OPALHttpFetcherConfig"]
            ])[];
        };
        /** OPALabels */
        OPALabels: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Version */
            version: string;
        };
        /** OPAMetrics */
        OPAMetrics: {
            /** Timer Rego Input Parse Ns */
            timer_rego_input_parse_ns?: number;
            /** Timer Rego Query Parse Ns */
            timer_rego_query_parse_ns?: number;
            /** Timer Rego Query Compile Ns */
            timer_rego_query_compile_ns?: number;
            /** Timer Rego Query Eval Ns */
            timer_rego_query_eval_ns?: number;
            /** Timer Rego Module Parse Ns */
            timer_rego_module_parse_ns?: number;
            /** Timer Rego Module Compile Ns */
            timer_rego_module_compile_ns?: number;
            /** Timer Server Handler Ns */
            timer_server_handler_ns?: number;
        };
        /**
         * OnboardingStep
         * @description An enumeration.
         * @enum {string}
         */
        OnboardingStep: "create_organization" | "create_project" | "create_resource" | "create_actions" | "assign_permissions" | "assign_user_roles" | "connect_sdk" | "done";
        /**
         * OperationApprovalApproved
         * @example {
         *       "requesting_user_id": "1c1e4ada-f282-40e6-b3b7-20b3a51c93b5",
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66"
         *       },
         *       "reason": "I need to create a new transfer for my client",
         *       "org_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "env_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "status": "approved",
         *       "reviewer_user_id": "1b287364-14ff-4b72-8953-b40399093a6f",
         *       "reviewed_at": "2019-08-24T14:15:22Z",
         *       "reviewer_comment": "transfer for a new client",
         *       "type": "operation_approval"
         *     }
         */
        OperationApprovalApproved: {
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
            /**
             * Access Request Details
             * @description details of the operation approval, including the resource and tenant
             */
            access_request_details: components["schemas"]["OperationApprovalDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting operation approval
             */
            reason?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the operation approval
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the operation approval  belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the operation approval  belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the operation approval  belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the operation approval  was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the operation approval  was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Requesting User Id
             * Format: uuid
             * @description optional id of the user that is requesting the approval
             */
            requesting_user_id: string;
            /**
             * Reviewed At
             * Format: date-time
             * @description when the operation approval was reviewed
             */
            reviewed_at?: string;
            /** @default operation_approval */
            type: components["schemas"]["RequestType"];
            /** @description current status of the operation approval */
            status: components["schemas"]["RequestStatus"];
            /**
             * Reviewer User Id
             * Format: uuid
             * @description Optional id of the user who review the operation approval
             */
            reviewer_user_id?: string;
        };
        /**
         * OperationApprovalCanceled
         * @example {
         *       "requesting_user_id": "1c1e4ada-f282-40e6-b3b7-20b3a51c93b5",
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66"
         *       },
         *       "reason": "I need to create a new transfer for my client",
         *       "org_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "env_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "status": "canceled",
         *       "type": "operation_approval"
         *     }
         */
        OperationApprovalCanceled: {
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
            /**
             * Access Request Details
             * @description details of the operation approval, including the resource and tenant
             */
            access_request_details: components["schemas"]["OperationApprovalDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting operation approval
             */
            reason?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the operation approval
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the operation approval  belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the operation approval  belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the operation approval  belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the operation approval  was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the operation approval  was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Requesting User Id
             * Format: uuid
             * @description optional id of the user that is requesting the approval
             */
            requesting_user_id: string;
            /**
             * Reviewed At
             * Format: date-time
             * @description when the operation approval was reviewed
             */
            reviewed_at?: string;
            /** @default operation_approval */
            type: components["schemas"]["RequestType"];
            /** @description current status of the operation approval */
            status: components["schemas"]["RequestStatus"];
            /**
             * Reviewer User Id
             * Format: uuid
             * @description Optional id of the user who review the operation approval
             */
            reviewer_user_id?: string;
        };
        /** OperationApprovalCreateDetails */
        OperationApprovalCreateDetails: {
            /**
             * Tenant
             * @description tenant id or key that the user is requesting operation approval for
             */
            tenant: string;
            /**
             * Resource
             * @description resource id or key that the user is requesting operation approval for
             */
            resource: string;
            /**
             * Resource Instance
             * @description resource instance id or key that the user is requesting operation approval for
             */
            resource_instance?: string;
        };
        /**
         * OperationApprovalDenied
         * @example {
         *       "requesting_user_id": "1c1e4ada-f282-40e6-b3b7-20b3a51c93b5",
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66"
         *       },
         *       "reason": "I need to create a new transfer for my client",
         *       "org_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "env_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "status": "denied",
         *       "reviewer_user_id": "1b287364-14ff-4b72-8953-b40399093a6f",
         *       "reviewed_at": "2019-08-24T14:15:22Z",
         *       "reviewer_comment": "need more info",
         *       "type": "operation_approval"
         *     }
         */
        OperationApprovalDenied: {
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
            /**
             * Access Request Details
             * @description details of the operation approval, including the resource and tenant
             */
            access_request_details: components["schemas"]["OperationApprovalDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting operation approval
             */
            reason?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the operation approval
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the operation approval  belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the operation approval  belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the operation approval  belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the operation approval  was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the operation approval  was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Requesting User Id
             * Format: uuid
             * @description optional id of the user that is requesting the approval
             */
            requesting_user_id: string;
            /**
             * Reviewed At
             * Format: date-time
             * @description when the operation approval was reviewed
             */
            reviewed_at?: string;
            /** @default operation_approval */
            type: components["schemas"]["RequestType"];
            /** @description current status of the operation approval */
            status: components["schemas"]["RequestStatus"];
            /**
             * Reviewer User Id
             * Format: uuid
             * @description Optional id of the user who review the operation approval
             */
            reviewer_user_id?: string;
        };
        /** OperationApprovalDetails */
        OperationApprovalDetails: {
            /**
             * Tenant
             * @description tenant id or key that the user is requesting operation approval for
             */
            tenant: string;
            /**
             * Resource
             * @description resource id or key that the user is requesting operation approval for
             */
            resource: string;
            /**
             * Resource Instance
             * @description resource instance id or key that the user is requesting operation approval for
             */
            resource_instance: string;
            /**
             * Element Config Id
             * @description element config id or key that the user is requesting operation approval from
             */
            element_config_id?: string;
        };
        /**
         * OperationApprovalList
         * @example {
         *       "requesting_user_id": "1c1e4ada-f282-40e6-b3b7-20b3a51c93b5",
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66"
         *       },
         *       "reason": "I need to create a new transfer for my client",
         *       "org_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "env_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "status": "approved",
         *       "reviewer_user_id": "1b287364-14ff-4b72-8953-b40399093a6f",
         *       "reviewed_at": "2019-08-24T14:15:22Z",
         *       "reviewer_comment": "transfer for a new client",
         *       "type": "operation_approval",
         *       "requesting_user_email": "maya@permit.io",
         *       "requesting_user_first_name": "Maya",
         *       "requesting_user_last_name": "Barak",
         *       "resource_key": "transfer",
         *       "resource_instance_key": "38462985692"
         *     }
         */
        OperationApprovalList: {
            /**
             * Access Request Details
             * @description details of the operation approval, including the resource and tenant
             */
            access_request_details: components["schemas"]["OperationApprovalDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting operation approval
             */
            reason?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the operation approval
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the operation approval  belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the operation approval  belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the operation approval  belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the operation approval  was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the operation approval  was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Requesting User Id
             * Format: uuid
             * @description optional id of the user that is requesting the approval
             */
            requesting_user_id: string;
            /**
             * Reviewed At
             * Format: date-time
             * @description when the operation approval was reviewed
             */
            reviewed_at?: string;
            /** @default operation_approval */
            type: components["schemas"]["RequestType"];
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
            /** @description current status of the operation approval */
            status: components["schemas"]["RequestStatus"];
            /**
             * Reviewer User Id
             * Format: uuid
             * @description Optional id of the user who review the operation approval
             */
            reviewer_user_id?: string;
            /**
             * Requesting User Email
             * @description email of the user that is requesting the approval
             */
            requesting_user_email?: string;
            /**
             * Requesting User First Name
             * @description first name of the user that is requesting the approval
             */
            requesting_user_first_name?: string;
            /**
             * Requesting User Last Name
             * @description last name of the user that is requesting the approval
             */
            requesting_user_last_name?: string;
            /**
             * Resource Key
             * @description key of the resource that the user is requesting operation approval for
             */
            resource_key?: string;
            /**
             * Resource Instance Key
             * @description key of the resource instance that the user is requesting operation approval for
             */
            resource_instance_key?: string;
        };
        /**
         * OperationApprovalRead
         * @example {
         *       "requesting_user_id": "1c1e4ada-f282-40e6-b3b7-20b3a51c93b5",
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66"
         *       },
         *       "reason": "I need to create a new transfer for my client",
         *       "org_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "env_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "status": "approved",
         *       "reviewer_user_id": "1b287364-14ff-4b72-8953-b40399093a6f",
         *       "reviewed_at": "2019-08-24T14:15:22Z",
         *       "reviewer_comment": "transfer for a new client",
         *       "type": "operation_approval"
         *     }
         */
        OperationApprovalRead: {
            /**
             * Access Request Details
             * @description details of the operation approval, including the resource and tenant
             */
            access_request_details: components["schemas"]["OperationApprovalDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting operation approval
             */
            reason?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the operation approval
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the operation approval  belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the operation approval  belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the operation approval  belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the operation approval  was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the operation approval  was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Requesting User Id
             * Format: uuid
             * @description optional id of the user that is requesting the approval
             */
            requesting_user_id: string;
            /**
             * Reviewed At
             * Format: date-time
             * @description when the operation approval was reviewed
             */
            reviewed_at?: string;
            /** @default operation_approval */
            type: components["schemas"]["RequestType"];
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
            /** @description current status of the operation approval */
            status: components["schemas"]["RequestStatus"];
            /**
             * Reviewer User Id
             * Format: uuid
             * @description Optional id of the user who review the operation approval
             */
            reviewer_user_id?: string;
        };
        /**
         * OperationApprovalReview
         * @example {
         *       "reviewer_comment": "transfer for a new client"
         *     }
         */
        OperationApprovalReview: {
            /**
             * Reviewer Comment
             * @description comment provided by the reviewer_user_id
             */
            reviewer_comment?: string;
        };
        /**
         * OperationApprovalUserCreate
         * @example {
         *       "access_request_details": {
         *         "tenant": "34f5c98e-f430-457b-a812-92637d0c6fd0",
         *         "resource": "4d5215ed-38bb-48ed-879a-fdb9ca58522f",
         *         "resource_instance": "2d98d9f8-e1b7-4f1d-baad-2edbf6fa6c66"
         *       },
         *       "reason": "I need to create a new transfer for my client"
         *     }
         */
        OperationApprovalUserCreate: {
            /**
             * Access Request Details
             * @description details of the operation approval, including the resource and tenant
             */
            access_request_details: components["schemas"]["OperationApprovalCreateDetails"];
            /**
             * Reason
             * @description Optional business justification provided by the user requesting operation approval
             */
            reason?: string;
        };
        /** OrgMemberCreate */
        OrgMemberCreate: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the account member
             */
            id?: string;
            /**
             * Email
             * Format: email
             * @description Email of the user controlling this account
             */
            email?: string;
            /** Permissions */
            permissions: components["schemas"]["Permission"][];
        };
        /**
         * OrgMemberRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "email": "janedoe@permituser.com",
         *       "email_verified": true,
         *       "given_name": "Jane",
         *       "family_name": "Doe",
         *       "name": "Jane Josephine Doe",
         *       "picture": "http://permituser.com/janedoe/me.jpg",
         *       "settings": {
         *         "option": "value",
         *         "another-option": "another-value"
         *       },
         *       "is_superuser": false,
         *       "is_onboarding": true,
         *       "onboarding_step": "done",
         *       "created_at": "2019-08-20T14:15:22Z",
         *       "last_login": "2019-08-24T14:15:22Z",
         *       "last_ip": "1.2.3.4",
         *       "logins_count": 2,
         *       "identities": [
         *         {
         *           "user_id": "google-oauth2|000000000000000000001",
         *           "provider": "google-oauth2",
         *           "sub": "000000000000000000001",
         *           "email": "Jane@permituser.com",
         *           "email_verified": true,
         *           "user_info": {
         *             "sub": "000000000000000000001",
         *             "name": "Jane Josephine Doe",
         *             "given_name": "Jane",
         *             "family_name": "Doe",
         *             "middle_name": "Josephine",
         *             "nickname": "JJ",
         *             "preferred_username": "j.doe",
         *             "profile": "http://permituser.com/janedoe",
         *             "picture": "http://permituser.com/janedoe/me.jpg",
         *             "website": "http://permituser.com",
         *             "email": "janedoe@permituser.com",
         *             "email_verified": true,
         *             "gender": "female",
         *             "birthdate": "1972-03-31",
         *             "zoneinfo": "America/Los_Angeles",
         *             "locale": "en-US",
         *             "phone_number": "+1 (111) 222-3434",
         *             "phone_number_verified": false,
         *             "address": {
         *               "country": "us"
         *             },
         *             "updated_at": "1556845729"
         *           }
         *         }
         *       ],
         *       "invite": {
         *         "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *         "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *         "invite_code": "40ef0e48-a11f-4963-a229-e396c9eeefff",
         *         "email": "Jane@permituser.com",
         *         "role": "admin",
         *         "created_at": "2019-08-24T14:15:22Z",
         *         "status": "pending",
         *         "failed_reason": ""
         *       }
         *     }
         */
        OrgMemberRead: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the account member
             */
            id: string;
            /**
             * Email
             * Format: email
             * @description Email of the user controlling this account
             */
            email: string;
            /**
             * Email Verified
             * @description Whether this email address is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.
             */
            email_verified: boolean;
            /**
             * Name
             * @description Name of this user
             */
            name?: string;
            /**
             * Given Name
             * @description First name of the user
             */
            given_name?: string;
            /**
             * Family Name
             * @description Last name of the user
             */
            family_name?: string;
            /**
             * Picture
             * @description URL to picture, photo, or avatar of the user that controls this account.
             */
            picture?: string;
            /**
             * Is Superuser
             * @description Whether or not this user has special access to permit.io organizations
             */
            is_superuser: boolean;
            /**
             * Is Onboarding
             * @description Whether or not this user is currently onboarding, needs to be replaced by a user journey object
             */
            is_onboarding: boolean;
            /** @description the step the user is currently going through in onboarding */
            onboarding_step: components["schemas"]["OnboardingStep"];
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the account member was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Last Login
             * Format: date-time
             * @description Last date and time this user logged in (ISO_8601 format).
             */
            last_login?: string;
            /**
             * Last Ip
             * @description Last IP address from which this user logged in.
             * @default 0.0.0.0
             */
            last_ip: string;
            /**
             * Logins Count
             * @description Total number of logins this user has performed.
             * @default 0
             */
            logins_count: number;
            /** Identities */
            identities: components["schemas"]["IdentityRead"][];
            invite?: components["schemas"]["InviteRead"];
            /**
             * Settings
             * @description Custom permit.io dashboard settings, such as preferred theme, etc.
             */
            settings: Record<string, never>;
        };
        /**
         * OrgMemberReadWithGrants
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "email": "janedoe@permituser.com",
         *       "email_verified": true,
         *       "given_name": "Jane",
         *       "family_name": "Doe",
         *       "name": "Jane Josephine Doe",
         *       "picture": "http://permituser.com/janedoe/me.jpg",
         *       "settings": {
         *         "option": "value",
         *         "another-option": "another-value"
         *       },
         *       "is_superuser": false,
         *       "is_onboarding": true,
         *       "onboarding_step": "done",
         *       "created_at": "2019-08-20T14:15:22Z",
         *       "last_login": "2019-08-24T14:15:22Z",
         *       "last_ip": "1.2.3.4",
         *       "logins_count": 2,
         *       "identities": [
         *         {
         *           "user_id": "google-oauth2|000000000000000000001",
         *           "provider": "google-oauth2",
         *           "sub": "000000000000000000001",
         *           "email": "Jane@permituser.com",
         *           "email_verified": true,
         *           "user_info": {
         *             "sub": "000000000000000000001",
         *             "name": "Jane Josephine Doe",
         *             "given_name": "Jane",
         *             "family_name": "Doe",
         *             "middle_name": "Josephine",
         *             "nickname": "JJ",
         *             "preferred_username": "j.doe",
         *             "profile": "http://permituser.com/janedoe",
         *             "picture": "http://permituser.com/janedoe/me.jpg",
         *             "website": "http://permituser.com",
         *             "email": "janedoe@permituser.com",
         *             "email_verified": true,
         *             "gender": "female",
         *             "birthdate": "1972-03-31",
         *             "zoneinfo": "America/Los_Angeles",
         *             "locale": "en-US",
         *             "phone_number": "+1 (111) 222-3434",
         *             "phone_number_verified": false,
         *             "address": {
         *               "country": "us"
         *             },
         *             "updated_at": "1556845729"
         *           }
         *         }
         *       ],
         *       "invite": {
         *         "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *         "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *         "invite_code": "40ef0e48-a11f-4963-a229-e396c9eeefff",
         *         "email": "Jane@permituser.com",
         *         "role": "admin",
         *         "created_at": "2019-08-24T14:15:22Z",
         *         "status": "pending",
         *         "failed_reason": ""
         *       },
         *       "grants": [
         *         {
         *           "object_type": "org",
         *           "access_level": "admin",
         *           "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6"
         *         }
         *       ]
         *     }
         */
        OrgMemberReadWithGrants: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the account member
             */
            id: string;
            /**
             * Email
             * Format: email
             * @description Email of the user controlling this account
             */
            email: string;
            /**
             * Email Verified
             * @description Whether this email address is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.
             */
            email_verified: boolean;
            /**
             * Name
             * @description Name of this user
             */
            name?: string;
            /**
             * Given Name
             * @description First name of the user
             */
            given_name?: string;
            /**
             * Family Name
             * @description Last name of the user
             */
            family_name?: string;
            /**
             * Picture
             * @description URL to picture, photo, or avatar of the user that controls this account.
             */
            picture?: string;
            /**
             * Is Superuser
             * @description Whether or not this user has special access to permit.io organizations
             */
            is_superuser: boolean;
            /**
             * Is Onboarding
             * @description Whether or not this user is currently onboarding, needs to be replaced by a user journey object
             */
            is_onboarding: boolean;
            /** @description the step the user is currently going through in onboarding */
            onboarding_step: components["schemas"]["OnboardingStep"];
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the account member was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Last Login
             * Format: date-time
             * @description Last date and time this user logged in (ISO_8601 format).
             */
            last_login?: string;
            /**
             * Last Ip
             * @description Last IP address from which this user logged in.
             * @default 0.0.0.0
             */
            last_ip: string;
            /**
             * Logins Count
             * @description Total number of logins this user has performed.
             * @default 0
             */
            logins_count: number;
            /** Identities */
            identities: components["schemas"]["IdentityRead"][];
            invite?: components["schemas"]["InviteRead"];
            /**
             * Settings
             * @description Custom permit.io dashboard settings, such as preferred theme, etc.
             */
            settings: Record<string, never>;
            /** Grants */
            grants: components["schemas"]["Permission"][];
        };
        /** OrgMemberRemovePermissions */
        OrgMemberRemovePermissions: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the account member
             */
            id: string;
            /** Permissions */
            permissions: components["schemas"]["Permission"][];
        };
        /** OrgMemberUpdate */
        OrgMemberUpdate: {
            /**
             * Settings
             * @description Custom permit.io dashboard settings, such as preferred theme, etc.
             */
            settings?: Record<string, never>;
            /** @description updates the onboarding step (optional) */
            onboarding_step?: components["schemas"]["OnboardingStep"];
        };
        /** OrganizationCreate */
        OrganizationCreate: {
            /**
             * Key
             * @description A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.
             */
            key: string;
            /**
             * Name
             * @description The name of the organization, usually it's your company's name.
             */
            name: string;
            /**
             * Settings
             * @description the settings for this project
             */
            settings?: Record<string, never>;
        };
        /** OrganizationObj */
        OrganizationObj: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Name */
            name?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** OrganizationRead */
        OrganizationRead: {
            /**
             * Key
             * @description A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the organization
             */
            id: string;
            /**
             * Is Enterprise
             * @description Is this an enterprise account?
             */
            is_enterprise: boolean;
            /**
             * Usage Limits
             * @description Usage limits for this organization
             * @default {
             *       "mau": 1000,
             *       "tenants": 20,
             *       "billing_tier": "free"
             *     }
             */
            usage_limits: components["schemas"]["UsageLimits"];
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the organization was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the organization was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Name
             * @description The name of the organization, usually it's your company's name.
             */
            name: string;
            /**
             * Settings
             * @description the settings for this project
             */
            settings?: Record<string, never>;
        };
        /** OrganizationReadWithAPIKey */
        OrganizationReadWithAPIKey: {
            /**
             * Key
             * @description A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the organization
             */
            id: string;
            /**
             * Is Enterprise
             * @description Is this an enterprise account?
             */
            is_enterprise: boolean;
            /**
             * Usage Limits
             * @description Usage limits for this organization
             * @default {
             *       "mau": 1000,
             *       "tenants": 20,
             *       "billing_tier": "free"
             *     }
             */
            usage_limits: components["schemas"]["UsageLimits"];
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the organization was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the organization was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Name
             * @description The name of the organization, usually it's your company's name.
             */
            name: string;
            /**
             * Settings
             * @description the settings for this project
             */
            settings?: Record<string, never>;
            /**
             * Api Key Id
             * Format: uuid
             */
            api_key_id?: string;
            /** Api Key Secret */
            api_key_secret?: string;
        };
        /** OrganizationStatistics */
        OrganizationStatistics: {
            /** Projects */
            projects: number;
            /** Environments */
            environments: number;
            /** Users */
            users: number;
        };
        /** OrganizationStats */
        OrganizationStats: {
            /**
             * Key
             * @description A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the organization
             */
            id: string;
            /**
             * Is Enterprise
             * @description Is this an enterprise account?
             */
            is_enterprise: boolean;
            /**
             * Usage Limits
             * @description Usage limits for this organization
             * @default {
             *       "mau": 1000,
             *       "tenants": 20,
             *       "billing_tier": "free"
             *     }
             */
            usage_limits: components["schemas"]["UsageLimits"];
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the organization was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the organization was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Name
             * @description The name of the organization, usually it's your company's name.
             */
            name: string;
            /**
             * Settings
             * @description the settings for this project
             */
            settings?: Record<string, never>;
            stats: components["schemas"]["OrganizationStatistics"];
            historical_usage: components["schemas"]["HistoricalUsage"];
        };
        /** OrganizationUpdate */
        OrganizationUpdate: {
            /**
             * Name
             * @description The name of the organization, usually it's your company's name.
             */
            name?: string;
            /**
             * Settings
             * @description the settings for this project
             */
            settings?: Record<string, never>;
        };
        /** PDPConfigRead */
        PDPConfigRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name?: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the pdp_config belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the pdp_config belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the pdp_config belongs to.
             */
            environment_id: string;
            /** Client Secret */
            client_secret: string;
            /** Opal Server Access Token */
            opal_server_access_token?: string;
            /** Num Shards */
            num_shards?: number;
            /**
             * Debug Audit Logs
             * @description Whether debug audit logs are enabled or not
             * @default true
             */
            debug_audit_logs: boolean;
            /**
             * Min Pdp Version
             * @description The minimum image version of PDP that can connect to this config
             */
            min_pdp_version?: string;
        };
        /** PDPContext */
        PDPContext: {
            /**
             * Customer Id
             * Format: uuid
             */
            customer_id: string;
            /** Client Id */
            client_id: string;
            /**
             * Backend Tier
             * Format: uri
             */
            backend_tier: string;
            /**
             * Component
             * @default sidecar
             */
            component: string;
            /**
             * Org Id
             * Format: uuid
             */
            org_id: string;
            /**
             * Project Id
             * Format: uuid
             */
            project_id: string;
            /**
             * Env Id
             * Format: uuid
             */
            env_id: string;
        };
        /** PDPShardMigration */
        PDPShardMigration: {
            /** Num Shards */
            num_shards: number;
        };
        /** PaginatedResult[APIHistoryEventRead] */
        PaginatedResult_APIHistoryEventRead_: {
            /**
             * Data
             * @description List of Api History Events
             */
            data: components["schemas"]["APIHistoryEventRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[APIKeyRead] */
        PaginatedResult_APIKeyRead_: {
            /**
             * Data
             * @description List of Api Keys
             */
            data: components["schemas"]["APIKeyRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[AccessRequestRead] */
        PaginatedResult_AccessRequestRead_: {
            /**
             * Data
             * @description List of Access Requests
             */
            data: components["schemas"]["AccessRequestRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[ActivityLogEventRead] */
        PaginatedResult_ActivityLogEventRead_: {
            /**
             * Data
             * @description List of Activity Log Events
             */
            data: components["schemas"]["ActivityLogEventRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[ConditionSetRead] */
        PaginatedResult_ConditionSetRead_: {
            /**
             * Data
             * @description List of Condition Sets
             */
            data: components["schemas"]["ConditionSetRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[ElementsConfigRead] */
        PaginatedResult_ElementsConfigRead_: {
            /**
             * Data
             * @description List of Elements Configs
             */
            data: components["schemas"]["ElementsConfigRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[ElementsUserInviteRead] */
        PaginatedResult_ElementsUserInviteRead_: {
            /**
             * Data
             * @description List of Elements User Invites
             */
            data: components["schemas"]["ElementsUserInviteRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[OperationApprovalList] */
        PaginatedResult_OperationApprovalList_: {
            /**
             * Data
             * @description List of Operation Approval Lists
             */
            data: components["schemas"]["OperationApprovalList"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[RelationRead] */
        PaginatedResult_RelationRead_: {
            /**
             * Data
             * @description List of Relations
             */
            data: components["schemas"]["RelationRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[RelationshipTupleDetailedRead] */
        PaginatedResult_RelationshipTupleDetailedRead_: {
            /**
             * Data
             * @description List of Relationship Tuple Detaileds
             */
            data: components["schemas"]["RelationshipTupleDetailedRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[RelationshipTupleRead] */
        PaginatedResult_RelationshipTupleRead_: {
            /**
             * Data
             * @description List of Relationship Tuples
             */
            data: components["schemas"]["RelationshipTupleRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[ResourceInstanceDetailedRead] */
        PaginatedResult_ResourceInstanceDetailedRead_: {
            /**
             * Data
             * @description List of Resource Instance Detaileds
             */
            data: components["schemas"]["ResourceInstanceDetailedRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[ResourceInstanceRead] */
        PaginatedResult_ResourceInstanceRead_: {
            /**
             * Data
             * @description List of Resource Instances
             */
            data: components["schemas"]["ResourceInstanceRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[ResourceRead] */
        PaginatedResult_ResourceRead_: {
            /**
             * Data
             * @description List of Resources
             */
            data: components["schemas"]["ResourceRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[ResourceRoleRead] */
        PaginatedResult_ResourceRoleRead_: {
            /**
             * Data
             * @description List of Resource Roles
             */
            data: components["schemas"]["ResourceRoleRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[RoleAssignmentDetailedRead] */
        PaginatedResult_RoleAssignmentDetailedRead_: {
            /**
             * Data
             * @description List of Role Assignment Detaileds
             */
            data: components["schemas"]["RoleAssignmentDetailedRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[RoleAssignmentRead] */
        PaginatedResult_RoleAssignmentRead_: {
            /**
             * Data
             * @description List of Role Assignments
             */
            data: components["schemas"]["RoleAssignmentRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[RoleRead] */
        PaginatedResult_RoleRead_: {
            /**
             * Data
             * @description List of Roles
             */
            data: components["schemas"]["RoleRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[TenantRead] */
        PaginatedResult_TenantRead_: {
            /**
             * Data
             * @description List of Tenants
             */
            data: components["schemas"]["TenantRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PaginatedResult[UserRead] */
        PaginatedResult_UserRead_: {
            /**
             * Data
             * @description List of Users
             */
            data: components["schemas"]["UserRead"][];
            /** Total Count */
            total_count: number;
            /**
             * Page Count
             * @default 0
             */
            page_count: number;
        };
        /** PdpConfigObj */
        PdpConfigObj: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** PdpValues */
        PdpValues: {
            /** Backend Service Url */
            BACKEND_SERVICE_URL: string;
            /** Opa Decision Log Ingress Route */
            OPA_DECISION_LOG_INGRESS_ROUTE: string;
            /** Opa Decision Log Ingress Backend Tier Url */
            OPA_DECISION_LOG_INGRESS_BACKEND_TIER_URL: string;
            /** Control Plane Relay Jwt Tier */
            CONTROL_PLANE_RELAY_JWT_TIER: string;
            /** Control Plane Relay Api */
            CONTROL_PLANE_RELAY_API: string;
            /** Control Plane Pdp Deltas Api */
            CONTROL_PLANE_PDP_DELTAS_API: string;
            /** Factdb Enabled */
            FACTDB_ENABLED?: boolean;
            /** Factdb Backup Server Url */
            FACTDB_BACKUP_SERVER_URL: string;
        };
        /** Permission */
        Permission: {
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             */
            project_id?: string;
            /**
             * Environment Id
             * Format: uuid
             */
            environment_id?: string;
            object_type: components["schemas"]["MemberAccessObj"];
            access_level: components["schemas"]["MemberAccessLevel"];
            /** OrganizationReadWithAPIKey Key */
            organization_key?: string;
            /** Project Key */
            project_key?: string;
            /** Environment Key */
            environment_key?: string;
            /** OrganizationReadWithAPIKey Name */
            organization_name?: string;
            /** Project Name */
            project_name?: string;
            /** Environment Name */
            environment_name?: string;
        };
        /** PermissionLevelRoleRead */
        PermissionLevelRoleRead: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the elements_config
             */
            id: string;
            /**
             * Key
             * @description A URL-friendly name of the elements_config (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the elements_config.
             */
            key: string;
            /** Name */
            name: string;
            /**
             * Resource Id
             * Format: uuid
             * @description Unique id of the resource
             */
            resource_id: string;
        };
        /**
         * PolicyGuardRuleCreate
         * @example {
         *       "resource_key": "document",
         *       "role_key": "admin",
         *       "action_key": "read",
         *       "is_allowed": true
         *     }
         */
        PolicyGuardRuleCreate: {
            /**
             * Is Allowed
             * @description If True, the permission will be allowed for the role in the policy guard across all projectswithin the policy scope, and the permission will be locked from further editing.
             */
            is_allowed: boolean;
            /**
             * Resource Key
             * @description The key of the resource.
             */
            resource_key: string;
            /**
             * Role Key
             * @description The key of the role.
             */
            role_key?: string;
            /**
             * Action Key
             * @description The key of the action.
             */
            action_key: string;
            /**
             * Resource Set
             * @description The resource set that the permission will be applied to.
             */
            resource_set?: components["schemas"]["ConditionSet"];
            /**
             * User Set
             * @description The user set that the permission will be applied to.
             */
            user_set?: components["schemas"]["ConditionSet"];
        };
        /**
         * PolicyGuardRuleItem
         * @example {
         *       "resource_key": "document",
         *       "role_key": "admin",
         *       "action_key": "read"
         *     }
         */
        PolicyGuardRuleItem: {
            /**
             * Resource Key
             * @description The key of the resource.
             */
            resource_key: string;
            /**
             * Role Key
             * @description The key of the role.
             */
            role_key?: string;
            /**
             * Action Key
             * @description The key of the action.
             */
            action_key: string;
            /**
             * Resource Set
             * @description The resource set that the permission will be applied to.
             */
            resource_set?: components["schemas"]["ConditionSet"];
            /**
             * User Set
             * @description The user set that the permission will be applied to.
             */
            user_set?: components["schemas"]["ConditionSet"];
        };
        /**
         * PolicyGuardRuleRead
         * @example {
         *       "id": "c3b6f5d7-8b1e-4c6d-9e9f-8c9d6f8e0c8f",
         *       "scope_id": "c3b6f5d7-8b1e-4c6d-9e9f-hgk4f8e0c8f",
         *       "resource_key": "document",
         *       "role_key": "admin",
         *       "action_key": "read",
         *       "is_allowed": true,
         *       "org_id": "c3b6f5d7-8b1e-4c6d-9e9f-8c9d6f8e0c8f",
         *       "resource_set": {
         *         "key": "country_condition",
         *         "attribute": "document_country",
         *         "operator": "equals",
         *         "value": "US"
         *       },
         *       "user_set": {
         *         "key": "city_condition",
         *         "attribute": "city",
         *         "operator": "equals",
         *         "value": "New York"
         *       }
         *     }
         */
        PolicyGuardRuleRead: {
            /**
             * Is Allowed
             * @description If True, the permission will be allowed for the role in the policy guard across all projectswithin the policy scope, and the permission will be locked from further editing.
             */
            is_allowed: boolean;
            /**
             * Resource Key
             * @description The key of the resource.
             */
            resource_key: string;
            /**
             * Role Key
             * @description The key of the role.
             */
            role_key?: string;
            /**
             * Action Key
             * @description The key of the action.
             */
            action_key: string;
            /**
             * Resource Set
             * @description The resource set that the permission will be applied to.
             */
            resource_set?: components["schemas"]["ConditionSet"];
            /**
             * User Set
             * @description The user set that the permission will be applied to.
             */
            user_set?: components["schemas"]["ConditionSet"];
            /**
             * Scope Id
             * Format: uuid
             * @description The unique identifier of the policy guard.
             */
            scope_id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the ScopeConfig belongs to.
             */
            organization_id: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the ScopeConfig
             */
            id: string;
        };
        /** PolicyGuardScopeAssociate */
        PolicyGuardScopeAssociate: {
            /**
             * Project Id
             * @description The unique identifier of the project of this policy scope.
             */
            project_id: string;
        };
        /**
         * PolicyGuardScopeCreate
         * @example {
         *       "key": "policy_guard_acme",
         *       "policy_guard_scope_details": [
         *         {
         *           "project_id": "c3b6f5d78b1e4c6d9e9f8c9d6f8e0c8f"
         *         }
         *       ]
         *     }
         */
        PolicyGuardScopeCreate: {
            /**
             * Policy Guard Scope Details
             * @description list of projects that this policy guard is assigned to.
             * @default []
             */
            policy_guard_scope_details: components["schemas"]["PolicyGuardScopeDetailCreate"][];
            /**
             * Key
             * @description The unique key of the policy guard scope.
             */
            key: string;
        };
        /** PolicyGuardScopeDetail */
        PolicyGuardScopeDetail: {
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the ScopeConfig belongs to.
             */
            project_id: string;
        };
        /** PolicyGuardScopeDetailCreate */
        PolicyGuardScopeDetailCreate: {
            /**
             * Project Id
             * @description The unique identifier of the project of this policy scope.
             */
            project_id: string;
        };
        /**
         * PolicyGuardScopeRead
         * @example {
         *       "id": "c3b6f5d7-8b1e-4c6d-9e9f-8c9d6f8e0c8f",
         *       "key": "policy_guard_acme",
         *       "org_id": "c3b6f5d7-8b1e-4c6d-9e9f-8c9d6f8e0c8f",
         *       "policy_guard_scope_details": [
         *         {
         *           "project_id": "c3b6f5d78b1e4c6d9e9f8c9d6f8e0c8f"
         *         }
         *       ]
         *     }
         */
        PolicyGuardScopeRead: {
            /**
             * Key
             * @description The unique key of the policy guard scope.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the ScopeConfig
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the ScopeConfig belongs to.
             */
            organization_id: string;
            /**
             * Policy Guard Scope Details
             * @description list of projects that this policy guard is assigned to.
             * @default []
             */
            policy_guard_scope_details: components["schemas"]["PolicyGuardScopeDetail"][];
        };
        /** PolicyRepoCreate */
        PolicyRepoCreate: {
            /**
             * Key
             * @description A URL-friendly name of the policy repo (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the policy repo.
             */
            key: string;
            /**
             * Url
             * @description The SSH URL of the git repository (e.g. git@github.com:username/repository.git)
             */
            url: string;
            /**
             * Main Branch Name
             * @default main
             */
            main_branch_name: string;
            credentials: components["schemas"]["SSHAuthData"];
            /**
             * Activate When Validated
             * @description if you want to change your policy repository to this repo right after it is validated
             * @default false
             */
            activate_when_validated: boolean;
        };
        /** PolicyRepoRead */
        PolicyRepoRead: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the policy repo
             */
            id: string;
            status: components["schemas"]["PolicyRepoStatus"];
            /**
             * Key
             * @description A URL-friendly name of the policy repo (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the policy repo.
             */
            key: string;
            /**
             * Url
             * @description The SSH URL of the git repository (e.g. git@github.com:username/repository.git)
             */
            url: string;
            /**
             * Main Branch Name
             * @default main
             */
            main_branch_name: string;
            credentials: components["schemas"]["SSHAuthDataRead"];
            /**
             * Activate When Validated
             * @description if you want to change your policy repository to this repo right after it is validated
             * @default false
             */
            activate_when_validated: boolean;
        };
        /**
         * PolicyRepoStatus
         * @description An enumeration.
         * @enum {string}
         */
        PolicyRepoStatus: "invalid" | "pending" | "valid";
        /** ProjectCreate */
        ProjectCreate: {
            /**
             * Key
             * @description A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.
             */
            key: string;
            /**
             * Urn Namespace
             * @description Optional namespace for URNs. If empty, URNs will be generated from project key.
             */
            urn_namespace?: string;
            /**
             * Name
             * @description The name of the project
             */
            name: string;
            /**
             * Description
             * @description a longer description outlining the project objectives
             */
            description?: string;
            /**
             * Settings
             * @description the settings for this project
             */
            settings?: Record<string, never>;
            /**
             * Active Policy Repo Id
             * Format: uuid
             * @description the id of the policy repo to use for this project
             */
            active_policy_repo_id?: string;
            /**
             * Initial Environments
             * @description The initial environments to create for this project. By default, 'Development' and 'Production' are created, specify [] (empty list) to skip that.
             * @default [
             *       {
             *         "key": "dev",
             *         "name": "Development"
             *       },
             *       {
             *         "key": "production",
             *         "name": "Production"
             *       }
             *     ]
             */
            initial_environments: components["schemas"]["EnvironmentCreate"][];
        };
        /** ProjectObj */
        ProjectObj: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Name */
            name?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** ProjectRead */
        ProjectRead: {
            /**
             * Key
             * @description A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.
             */
            key: string;
            /**
             * Urn Namespace
             * @description Optional namespace for URNs. If empty, URNs will be generated from project key.
             */
            urn_namespace?: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the project
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the project belongs to.
             */
            organization_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the project was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the project was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Name
             * @description The name of the project
             */
            name: string;
            /**
             * Description
             * @description a longer description outlining the project objectives
             */
            description?: string;
            /**
             * Settings
             * @description the settings for this project
             */
            settings?: Record<string, never>;
            /**
             * Active Policy Repo Id
             * Format: uuid
             * @description the id of the policy repo to use for this project
             */
            active_policy_repo_id?: string;
        };
        /** ProjectUpdate */
        ProjectUpdate: {
            /**
             * Name
             * @description The name of the project
             */
            name?: string;
            /**
             * Description
             * @description a longer description outlining the project objectives
             */
            description?: string;
            /**
             * Settings
             * @description the settings for this project
             */
            settings?: Record<string, never>;
            /**
             * Active Policy Repo Id
             * Format: uuid
             * @description the id of the policy repo to use for this project
             */
            active_policy_repo_id?: string;
        };
        /**
         * ProxyConfigCreate
         * @example {
         *       "name": "Stripe API",
         *       "key": "stripe",
         *       "mapping_rules": [
         *         {
         *           "url": "https://api.stripe.com/v1/customers",
         *           "method": "post",
         *           "resource": "customers",
         *           "headers": {
         *             "required_header": "strict"
         *           }
         *         }
         *       ],
         *       "secret": "access_token_xxxxxx"
         *     }
         */
        ProxyConfigCreate: {
            /**
             * Secret
             * @description Proxy config secret is set to enable the Permit Proxy to make proxied requests to the backend service.
             */
            secret: Record<string, never> | Record<string, never> | Record<string, never>;
            /**
             * Key
             * @description Proxy Config is set to enable the Permit Proxy to make proxied requests as part of the Frontend AuthZ.
             */
            key: string;
            /**
             * Name
             * @description The name of the proxy config, for example: 'Stripe API'
             */
            name: string;
            /**
             * Mapping Rules
             * @description Proxy config mapping rules will include the rules that will be used to map the request to the backend service by a URL and a http method.
             * @default []
             */
            mapping_rules: components["schemas"]["MappingRule"][];
            /**
             * @description Proxy config auth mechanism will define the authentication mechanism that will be used to authenticate the request.
             *
             *     Bearer injects the secret into the Authorization header as a Bearer token,
             *
             *     Basic injects the secret into the Authorization header as a Basic user:password,
             *
             *     Headers injects plain headers into the request.
             * @default Bearer
             */
            auth_mechanism: components["schemas"]["AuthMechanism"];
        };
        /**
         * ProxyConfigRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "key": "stripe",
         *       "name": "Stripe API",
         *       "mapping_rules": [
         *         {
         *           "url": "https://api.stripe.com/v1/customers",
         *           "method": "post",
         *           "resource": "customers",
         *           "headers": {
         *             "required_header": "strict"
         *           }
         *         }
         *       ]
         *     }
         */
        ProxyConfigRead: {
            /**
             * Key
             * @description Proxy Config is set to enable the Permit Proxy to make proxied requests as part of the Frontend AuthZ.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the proxy config
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the proxy config belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the proxy config belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the proxy config belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the proxy config was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the proxy config was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Secret
             * @description Proxy config secret is set to enable the Permit Proxy to make proxied requests to the backend service.
             */
            secret: Record<string, never> | Record<string, never> | Record<string, never>;
            /**
             * Name
             * @description The name of the proxy config, for example: 'Stripe API'
             */
            name: string;
            /**
             * Mapping Rules
             * @description Proxy config mapping rules will include the rules that will be used to map the request to the backend service by a URL and a http method.
             * @default []
             */
            mapping_rules: components["schemas"]["MappingRule"][];
            /**
             * @description Proxy config auth mechanism will define the authentication mechanism that will be used to authenticate the request.
             *
             *     Bearer injects the secret into the Authorization header as a Bearer token,
             *
             *     Basic injects the secret into the Authorization header as a Basic user:password,
             *
             *     Headers injects plain headers into the request.
             * @default Bearer
             */
            auth_mechanism: components["schemas"]["AuthMechanism"];
        };
        /**
         * ProxyConfigUpdate
         * @example {
         *       "mapping_rules": [
         *         {
         *           "url": "https://api.stripe.com/v1/customers",
         *           "method": "post",
         *           "resource": "customers",
         *           "headers": {
         *             "required_header": "strict"
         *           }
         *         }
         *       ]
         *     }
         */
        ProxyConfigUpdate: {
            /**
             * Secret
             * @description Proxy config secret is set to enable the Permit Proxy to make proxied requests to the backend service.
             */
            secret?: Record<string, never> | Record<string, never> | Record<string, never>;
            /**
             * Name
             * @description The name of the proxy config, for example: 'Stripe API'
             */
            name?: string;
            /**
             * Mapping Rules
             * @description Proxy config mapping rules will include the rules that will be used to map the request to the backend service by a URL and a http method.
             * @default []
             */
            mapping_rules: components["schemas"]["MappingRule"][];
            /**
             * @description Proxy config auth mechanism will define the authentication mechanism that will be used to authenticate the request.
             *
             *     Bearer injects the secret into the Authorization header as a Bearer token,
             *
             *     Basic injects the secret into the Authorization header as a Basic user:password,
             *
             *     Headers injects plain headers into the request.
             * @default Bearer
             */
            auth_mechanism: components["schemas"]["AuthMechanism"];
        };
        /**
         * RelationBlockRead
         * @example {
         *       "resource_id": "759bae5c-c7c2-4cdf-bb8a-2de6425ad339",
         *       "relation_name": "parent",
         *       "resource": "parent-resource"
         *     }
         */
        RelationBlockRead: {
            /**
             * Description
             * @description An optional longer description of what this relation represents in your system
             */
            description?: string;
            /**
             * Resource Id
             * Format: uuid
             * @description Unique id of the relation
             */
            resource_id: string;
            /**
             * Relation Name
             * @description a more descriptive name for the relation
             */
            relation_name?: string;
            /**
             * Resource
             * @description The resource key
             */
            resource: string;
        };
        /**
         * RelationCreate
         * @example {
         *       "key": "parent",
         *       "name": "parent",
         *       "subject_resource": "organization"
         *     }
         */
        RelationCreate: {
            /**
             * Key
             * @description A URL-friendly name of the relation (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the relation.
             */
            key: string;
            /**
             * Name
             * @description The name of the relation
             */
            name: string;
            /**
             * Description
             * @description An optional longer description of what this relation represents in your system
             */
            description?: string;
            /**
             * Subject Resource
             * @description The subject resource ID or key
             */
            subject_resource: string;
        };
        /**
         * RelationRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "key": "parent",
         *       "name": "parent",
         *       "description": "parent relation",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "object_resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
         *       "object_resource": "repo",
         *       "subject_resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
         *       "subject_resource": "organization",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z"
         *     }
         */
        RelationRead: {
            /**
             * Description
             * @description An optional longer description of what this relation represents in your system
             */
            description?: string;
            /**
             * Subject Resource
             * @description The subject resource ID or key
             */
            subject_resource: string;
            /**
             * Key
             * @description A URL-friendly name of the relation (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the relation.
             */
            key: string;
            /**
             * Name
             * @description The name of the relation
             */
            name: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the relation
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the relation belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the relation belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the relation belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the relation was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the relation was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Object Resource Id
             * Format: uuid
             * @description The object resource id
             */
            object_resource_id: string;
            /**
             * Object Resource
             * @description The object resource key
             */
            object_resource: string;
            /**
             * Subject Resource Id
             * Format: uuid
             * @description The subject resource id
             */
            subject_resource_id: string;
        };
        /** RelationshipTupleBlockRead */
        RelationshipTupleBlockRead: {
            /**
             * Subject
             * @description resource_key:resource_instance_key of the subject
             */
            subject: string;
            /**
             * Relation
             * @description key of the assigned relation
             */
            relation: string;
            /**
             * Object
             * @description resource_key:resource_instance_key of the object
             */
            object: string;
        };
        /**
         * RelationshipTupleCreate
         * @example {
         *       "subject": "organization:permitio",
         *       "relation": "owner",
         *       "object": "repo:opal",
         *       "tenant": "public"
         *     }
         */
        RelationshipTupleCreate: {
            /**
             * Subject
             * @description the resource instance assigned the new relation (accepts either the resource instance id or resource_key:resource_instance_key)
             */
            subject: string;
            /**
             * Relation
             * @description the relation to assign between the subject and object
             */
            relation: string;
            /**
             * Object
             * @description the resource instance on which the new relation is assigned (accepts either the resource instance id or resource_key:resource_instance_key)
             */
            object: string;
            /**
             * Tenant
             * @description The tenant the subject and object belong to, if the resource instances don't exist yet, the tenant is required to create them. otherwise it is ignored
             */
            tenant?: string;
        };
        /** RelationshipTupleCreateBulkOperation */
        RelationshipTupleCreateBulkOperation: {
            /** Operations */
            operations: components["schemas"]["RelationshipTupleCreate"][];
        };
        /** RelationshipTupleCreateBulkOperationResult */
        RelationshipTupleCreateBulkOperationResult: Record<string, never>;
        /**
         * RelationshipTupleDelete
         * @example {
         *       "subject": "organization:permitio",
         *       "relation": "owner",
         *       "object": "repo:removed_repo"
         *     }
         */
        RelationshipTupleDelete: {
            /**
             * Subject
             * @description the resource instance assigned the new relation (accepts either the resource instance id or resource_key:resource_instance_key)
             */
            subject: string;
            /**
             * Relation
             * @description the relation to assign between the subject and object
             */
            relation: string;
            /**
             * Object
             * @description the resource instance on which the new relation is assigned (accepts either the resource instance id or resource_key:resource_instance_key)
             */
            object: string;
        };
        /**
         * RelationshipTupleDeleteBulkOperation
         * @example {
         *       "idents": [
         *         {
         *           "subject": "organization:permitio",
         *           "relation": "owner",
         *           "object": "repo:removed_repo"
         *         },
         *         {
         *           "subject": "organization:permitio",
         *           "relation": "parent",
         *           "object": "repo:removed_repo"
         *         }
         *       ]
         *     }
         */
        RelationshipTupleDeleteBulkOperation: {
            /**
             * Idents
             * @description List of relationship tuples objects to delete
             */
            idents: components["schemas"]["RelationshipTupleDelete"][];
        };
        /** RelationshipTupleDeleteBulkOperationResult */
        RelationshipTupleDeleteBulkOperationResult: Record<string, never>;
        /** RelationshipTupleDetailedRead */
        RelationshipTupleDetailedRead: {
            /**
             * Subject
             * @description resource_key:resource_instance_key of the subject
             */
            subject: string;
            /**
             * Relation
             * @description key of the assigned relation
             */
            relation: string;
            /**
             * Object
             * @description resource_key:resource_instance_key of the object
             */
            object: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the relationship tuple
             */
            id: string;
            /**
             * Tenant
             * @description The tenant the relationship tuple is associated with
             */
            tenant: string;
            /**
             * Subject Id
             * Format: uuid
             * @description Unique id of the subject
             */
            subject_id: string;
            /**
             * Relation Id
             * Format: uuid
             * @description Unique id of the relation
             */
            relation_id: string;
            /**
             * Object Id
             * Format: uuid
             * @description Unique id of the object
             */
            object_id: string;
            /**
             * Tenant Id
             * Format: uuid
             * @description Unique id of the tenant
             */
            tenant_id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the relationship tuple belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the relationship tuple belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the relationship tuple belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the relationship tuple was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the relationship tuple was created (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Subject Details
             * @description The subject details of the relationship tuple
             */
            subject_details: components["schemas"]["ResourceInstanceBlockRead"];
            /**
             * Relation Details
             * @description The relation details of the relationship tuple
             */
            relation_details: components["schemas"]["StrippedRelationBlockRead"];
            /**
             * Object Details
             * @description The object details of the relationship tuple
             */
            object_details: components["schemas"]["ResourceInstanceBlockRead"];
            /**
             * Tenant Details
             * @description The tenant details of the relationship tuple
             */
            tenant_details: components["schemas"]["TenantBlockRead"];
        };
        /** RelationshipTupleObj */
        RelationshipTupleObj: {
            /** Subject Str */
            subject_str: string;
            /** Relation Str */
            relation_str: string;
            /** Object Str */
            object_str: string;
        };
        /** RelationshipTupleRead */
        RelationshipTupleRead: {
            /**
             * Subject
             * @description resource_key:resource_instance_key of the subject
             */
            subject: string;
            /**
             * Relation
             * @description key of the assigned relation
             */
            relation: string;
            /**
             * Object
             * @description resource_key:resource_instance_key of the object
             */
            object: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the relationship tuple
             */
            id: string;
            /**
             * Tenant
             * @description The tenant the relationship tuple is associated with
             */
            tenant: string;
            /**
             * Subject Id
             * Format: uuid
             * @description Unique id of the subject
             */
            subject_id: string;
            /**
             * Relation Id
             * Format: uuid
             * @description Unique id of the relation
             */
            relation_id: string;
            /**
             * Object Id
             * Format: uuid
             * @description Unique id of the object
             */
            object_id: string;
            /**
             * Tenant Id
             * Format: uuid
             * @description Unique id of the tenant
             */
            tenant_id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the relationship tuple belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the relationship tuple belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the relationship tuple belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the relationship tuple was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the relationship tuple was created (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Subject Details
             * @description The subject details of the relationship tuple
             */
            subject_details?: components["schemas"]["ResourceInstanceBlockRead"];
            /**
             * Relation Details
             * @description The relation details of the relationship tuple
             */
            relation_details?: components["schemas"]["StrippedRelationBlockRead"];
            /**
             * Object Details
             * @description The object details of the relationship tuple
             */
            object_details?: components["schemas"]["ResourceInstanceBlockRead"];
            /**
             * Tenant Details
             * @description The tenant details of the relationship tuple
             */
            tenant_details?: components["schemas"]["TenantBlockRead"];
        };
        /** RemoteConfig */
        RemoteConfig: {
            opal_common: components["schemas"]["OPALCommon"];
            opal_client: components["schemas"]["OPALClient"];
            /**
             * Pdp
             * @default {}
             */
            pdp: components["schemas"]["PdpValues"];
            context: components["schemas"]["PDPContext"];
        };
        /**
         * RemoveRolePermissions
         * @example {
         *       "permissions": [
         *         "document:share"
         *       ]
         *     }
         */
        RemoveRolePermissions: {
            /**
             * Permissions
             * @description List of permissions to remove from the role. If a permission is not found it is skipped. Each permission can be either a resource action id, or `{resource_key}:{action_key}`,i.e: the "permission name".
             */
            permissions: string[];
        };
        /**
         * RequestStatus
         * @description An enumeration.
         * @enum {string}
         */
        RequestStatus: "pending" | "approved" | "denied" | "canceled";
        /**
         * RequestType
         * @description An enumeration.
         * @enum {string}
         */
        RequestType: "access_request" | "operation_approval";
        /**
         * ResourceActionCreate
         * @example {
         *       "key": "read",
         *       "name": "read",
         *       "description": "read a document"
         *     }
         */
        ResourceActionCreate: {
            /**
             * Key
             * @description A URL-friendly name of the action (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action.
             */
            key: string;
            /**
             * Name
             * @description The name of the action
             */
            name: string;
            /**
             * Description
             * @description An optional longer description of what this action respresents in your system
             */
            description?: string;
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix
             */
            attributes?: Record<string, never>;
            /** V1Compat Path */
            v1compat_path?: string;
            /** V1Compat Is Built In */
            v1compat_is_built_in?: boolean;
            /** V1Compat Name */
            v1compat_name?: string;
        };
        /**
         * ResourceActionGroupCreate
         * @example {
         *       "key": "writer",
         *       "name": "Writer",
         *       "actions": [
         *         "read",
         *         "update"
         *       ],
         *       "description": "Writer Action Group"
         *     }
         */
        ResourceActionGroupCreate: {
            /**
             * Key
             * @description A URL-friendly name of the action group (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action group.
             */
            key: string;
            /**
             * Name
             * @description The name of the action group
             */
            name: string;
            /**
             * Description
             * @description An optional longer description of what this action group represents in your system
             */
            description?: string;
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix
             */
            attributes?: Record<string, never>;
            /**
             * Actions
             * @default []
             */
            actions: string[];
        };
        /**
         * ResourceActionGroupRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "key": "writer",
         *       "name": "Writer",
         *       "actions": [
         *         "read",
         *         "update"
         *       ],
         *       "description": "Writer Action Group",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z"
         *     }
         */
        ResourceActionGroupRead: {
            /**
             * Name
             * @description The name of the action group
             */
            name: string;
            /**
             * Description
             * @description An optional longer description of what this action group represents in your system
             */
            description?: string;
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix
             */
            attributes?: Record<string, never>;
            /**
             * Actions
             * @default []
             */
            actions: string[];
            /**
             * Key
             * @description A URL-friendly name of the action group (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action group.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the action group
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the action group belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the action group belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the action group belongs to.
             */
            environment_id: string;
            /**
             * Resource Id
             * Format: uuid
             * @description Unique id of the resource that the action group belongs to.
             */
            resource_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the action group was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the action group was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
        };
        /** ResourceActionGroupUpdate */
        ResourceActionGroupUpdate: {
            /**
             * Name
             * @description The name of the action group
             */
            name?: string;
            /**
             * Description
             * @description An optional longer description of what this action group represents in your system
             */
            description?: string;
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix
             */
            attributes?: Record<string, never>;
            /**
             * Actions
             * @default []
             */
            actions: string[];
        };
        /**
         * ResourceActionRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "key": "read",
         *       "name": "read",
         *       "permission_name": "document:read",
         *       "description": "read a document",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z"
         *     }
         */
        ResourceActionRead: {
            /**
             * Name
             * @description The name of the action
             */
            name: string;
            /**
             * Description
             * @description An optional longer description of what this action respresents in your system
             */
            description?: string;
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix
             */
            attributes?: Record<string, never>;
            /** V1Compat Path */
            v1compat_path?: string;
            /** V1Compat Is Built In */
            v1compat_is_built_in?: boolean;
            /** V1Compat Name */
            v1compat_name?: string;
            /**
             * Key
             * @description A URL-friendly name of the action (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the action
             */
            id: string;
            /**
             * Permission Name
             * @description The name of the action, prefixed by the resource the action is acting upon.
             */
            permission_name: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the action belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the action belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the action belongs to.
             */
            environment_id: string;
            /**
             * Resource Id
             * Format: uuid
             * @description Unique id of the resource that the action belongs to.
             */
            resource_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the action was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the action was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
        };
        /**
         * ResourceActionUpdate
         * @example {
         *       "description": "read a document"
         *     }
         */
        ResourceActionUpdate: {
            /**
             * Name
             * @description The name of the action
             */
            name?: string;
            /**
             * Description
             * @description An optional longer description of what this action respresents in your system
             */
            description?: string;
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix
             */
            attributes?: Record<string, never>;
            /** V1Compat Path */
            v1compat_path?: string;
            /** V1Compat Is Built In */
            v1compat_is_built_in?: boolean;
            /** V1Compat Name */
            v1compat_name?: string;
        };
        /**
         * ResourceAttributeCreate
         * @example {
         *       "key": "private",
         *       "type": "bool",
         *       "description": "whether or not the github repository is private"
         *     }
         */
        ResourceAttributeCreate: {
            /**
             * Key
             * @description A URL-friendly name of the attribute (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the attribute.
             */
            key: string;
            /** @description The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`. */
            type: components["schemas"]["AttributeType"];
            /**
             * Description
             * @description An optional longer description of what this attribute respresents in your system
             */
            description?: string;
        };
        /**
         * ResourceAttributeRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "key": "private",
         *       "type": "bool",
         *       "description": "whether or not the github repository is private",
         *       "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
         *       "resource_key": "repository",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "built_in": false
         *     }
         */
        ResourceAttributeRead: {
            /** @description The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`. */
            type: components["schemas"]["AttributeType"];
            /**
             * Description
             * @description An optional longer description of what this attribute respresents in your system
             */
            description?: string;
            /**
             * Key
             * @description A URL-friendly name of the attribute (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the attribute.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the attribute
             */
            id: string;
            /**
             * Resource Id
             * Format: uuid
             * @description Unique id of the resource that the attribute belongs to.
             */
            resource_id: string;
            /**
             * Resource Key
             * @description A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.
             */
            resource_key: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the attribute belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the attribute belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the attribute belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the attribute was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the attribute was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Built In
             * @description Whether the attribute is built-in, and managed by the Permit system.
             */
            built_in: boolean;
        };
        /**
         * ResourceAttributeUpdate
         * @example {
         *       "description": "whether or not the github repository is private"
         *     }
         */
        ResourceAttributeUpdate: {
            /** @description The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`. */
            type?: components["schemas"]["AttributeType"];
            /**
             * Description
             * @description An optional longer description of what this attribute respresents in your system
             */
            description?: string;
        };
        /** ResourceAttributes */
        ResourceAttributes: {
            type: components["schemas"]["AttributeType"];
            /** Key */
            key: string;
        };
        /**
         * ResourceCreate
         * @example {
         *       "key": "repository",
         *       "name": "Repository",
         *       "actions": {
         *         "clone": {},
         *         "read": {},
         *         "push": {}
         *       },
         *       "roles": {
         *         "contributor": {
         *           "name": "contributor",
         *           "permissions": [
         *             "read"
         *           ],
         *           "description": "the contributor role can only read from the repo"
         *         },
         *         "maintainer": {
         *           "name": "maintainer",
         *           "permissions": [
         *             "push"
         *           ]
         *         }
         *       },
         *       "relations": {
         *         "parent": "OrganizationReadWithAPIKey"
         *       },
         *       "attributes": {
         *         "created": {
         *           "type": "time",
         *           "description": "the time (timestamp) the repository was created"
         *         },
         *         "private": {
         *           "type": "bool",
         *           "description": "whether the repo is private (if false, the repo is public)"
         *         }
         *       }
         *     }
         */
        ResourceCreate: {
            /**
             * Key
             * @description A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.
             */
            key: string;
            /**
             * Name
             * @description The name of the resource
             */
            name: string;
            /**
             * Urn
             * @description The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
             */
            urn?: string;
            /**
             * Description
             * @description An optional longer description of what this resource respresents in your system
             */
            description?: string;
            /**
             * Actions
             * @description
             *             A actions definition block, typically contained within a resource type definition block.
             *             The actions represents the ways you can interact with a protected resource.
             *
             */
            actions: {
                [key: string]: components["schemas"]["ActionBlockEditable"];
            };
            /**
             * Type Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this resource. This metadata can be used to filter resource using query parameters with attr_ prefix
             */
            type_attributes?: Record<string, never>;
            /**
             * Attributes
             * @description Attributes that each resource of this type defines, and can be used in your ABAC policies.
             */
            attributes?: {
                [key: string]: components["schemas"]["AttributeBlockEditable"];
            };
            /**
             * Roles
             * @description Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, base roles, etc.
             */
            roles?: {
                [key: string]: components["schemas"]["RoleBlockEditable"];
            };
            /**
             * Relations
             * @description Relations to other resources. The key is the relation key, and the value is the related resource.
             */
            relations?: {
                [key: string]: string;
            };
            /** V1Compat Path */
            v1compat_path?: string;
            /** V1Compat Type */
            v1compat_type?: string;
            /** V1Compat Name */
            v1compat_name?: string;
        };
        /**
         * ResourceInstanceAttributeData
         * @description This is the data of a specific resource instance in the system
         */
        ResourceInstanceAttributeData: {
            /**
             * Tenant
             * @description The tenant key that this resource instance belongs to.
             */
            tenant?: string;
            /**
             * Attributes
             * @description Key-Value mapping of the attributes of the resource instance.
             *     The key is the attribute key and the value is the attribute value.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /**
         * ResourceInstanceBlockRead
         * @example {
         *       "attributes": {
         *         "private": "false",
         *         "owner": "facebook"
         *       },
         *       "key": "react",
         *       "resource": "repository",
         *       "tenant": "default"
         *     }
         */
        ResourceInstanceBlockRead: {
            /**
             * Key
             * @description A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.
             */
            key: string;
            /**
             * Tenant
             * @description the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.
             */
            tenant: string;
            /**
             * Resource
             * @description the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.
             */
            resource: string;
            /**
             * Attributes
             * @description Arbitrary resource attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /**
         * ResourceInstanceCreate
         * @example {
         *       "key": "react",
         *       "resource": "repository",
         *       "tenant": "default",
         *       "attributes": {
         *         "private": "false",
         *         "owner": "facebook"
         *       }
         *     }
         */
        ResourceInstanceCreate: {
            /**
             * Key
             * @description A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.
             */
            key: string;
            /**
             * Tenant
             * @description the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.
             */
            tenant: string;
            /**
             * Resource
             * @description the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.
             */
            resource: string;
            /**
             * Attributes
             * @description Arbitrary resource attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /**
         * ResourceInstanceCreateBulkOperation
         * @example {
         *       "operations": [
         *         {
         *           "key": "react",
         *           "resource": "repository",
         *           "tenant": "default",
         *           "attributes": {
         *             "private": "false",
         *             "owner": "facebook"
         *           }
         *         },
         *         {
         *           "key": "deployment",
         *           "resource": "repository",
         *           "tenant": "default",
         *           "attributes": {
         *             "private": "true",
         *             "owner": "facebook"
         *           }
         *         }
         *       ]
         *     }
         */
        ResourceInstanceCreateBulkOperation: {
            /** Operations */
            operations: components["schemas"]["ResourceInstanceCreate"][];
        };
        /** ResourceInstanceCreateBulkOperationResult */
        ResourceInstanceCreateBulkOperationResult: Record<string, never>;
        /**
         * ResourceInstanceDeleteBulkOperation
         * @example {
         *       "idents": [
         *         "repository:react",
         *         "repository:deployment"
         *       ]
         *     }
         */
        ResourceInstanceDeleteBulkOperation: {
            /**
             * Idents
             * @description List of resource instance idents to delete. Either the unique id of the resource instance, or the URL-friendly key of the <resource_key:resource_instance_key> (i.e: file:my_file)
             */
            idents: string[];
        };
        /** ResourceInstanceDeleteBulkOperationResult */
        ResourceInstanceDeleteBulkOperationResult: Record<string, never>;
        /**
         * ResourceInstanceDetailedRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
         *       "relationships": [],
         *       "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "key": "react",
         *       "resource": "repository",
         *       "tenant": "default",
         *       "attributes": {
         *         "private": "false",
         *         "owner": "facebook"
         *       }
         *     }
         */
        ResourceInstanceDetailedRead: {
            /**
             * Key
             * @description A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.
             */
            key: string;
            /**
             * Tenant
             * @description the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.
             */
            tenant: string;
            /**
             * Resource
             * @description the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.
             */
            resource: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the resource instance
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the resource instance belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the resource instance belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the resource instance belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the resource instance was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the resource instance was created (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Resource Id
             * Format: uuid
             * @description Unique id of the resource
             */
            resource_id: string;
            /**
             * Tenant Id
             * Format: uuid
             * @description Unique id of the tenant
             */
            tenant_id: string;
            /**
             * Attributes
             * @description Arbitrary resource attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
            /**
             * Relationships
             * @description The relationships of the resource instance.
             */
            relationships: components["schemas"]["RelationshipTupleBlockRead"][];
        };
        /**
         * ResourceInstanceRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
         *       "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "key": "react",
         *       "resource": "repository",
         *       "tenant": "default",
         *       "attributes": {
         *         "private": "false",
         *         "owner": "facebook"
         *       }
         *     }
         */
        ResourceInstanceRead: {
            /**
             * Key
             * @description A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.
             */
            key: string;
            /**
             * Tenant
             * @description the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.
             */
            tenant: string;
            /**
             * Resource
             * @description the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.
             */
            resource: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the resource instance
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the resource instance belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the resource instance belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the resource instance belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the resource instance was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the resource instance was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Resource Id
             * Format: uuid
             * @description the id of the resource (type) of this resource instance.
             */
            resource_id: string;
            /**
             * Tenant Id
             * Format: uuid
             * @description the id of the tenant of this resource instance.
             */
            tenant_id: string;
            /**
             * Attributes
             * @description Arbitrary resource attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
            /**
             * Relationships
             * @description The relationships of the resource instance.
             */
            relationships?: components["schemas"]["RelationshipTupleBlockRead"][];
        };
        /**
         * ResourceInstanceUpdate
         * @example {
         *       "attributes": {
         *         "private": "false",
         *         "owner": "facebook"
         *       }
         *     }
         */
        ResourceInstanceUpdate: {
            /**
             * Attributes
             * @description Arbitrary resource attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /**
         * ResourceRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "key": "repository",
         *       "name": "Repository",
         *       "urn": "prn:github:scm:repository",
         *       "description": "a git repository stored on github",
         *       "actions": {
         *         "clone": {
         *           "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1"
         *         },
         *         "read": {
         *           "id": "2bc27751-6115-43c0-b68c-928cb46e34bc"
         *         },
         *         "push": {
         *           "id": "e06da336-6e03-41d6-a495-40b0d7537b2a"
         *         }
         *       },
         *       "roles": {
         *         "maintainer": {
         *           "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *           "key": "maintainer",
         *           "name": "Maintainer",
         *           "description": "the maintainer role can read from the repo and push changes",
         *           "permissions": [
         *             "push"
         *           ],
         *           "extends": [
         *             "contributor"
         *           ],
         *           "resource": "repo",
         *           "granted_to": {
         *             "id": "34821f4a-8191-491d-b550-864580f86ece",
         *             "users_with_role": [
         *               {
         *                 "role": "Admin",
         *                 "on_resource": "organization",
         *                 "linked_by_relation": "owner",
         *                 "role_id": "e985caaa-7712-4515-befd-e29336f6c954",
         *                 "resource_id": "485c3c3b-edb3-4ef0-9d9b-ffd87a947236",
         *                 "relation_id": "e1a09e35-5ff8-4beb-bc8e-847a16842a34"
         *               }
         *             ]
         *           },
         *           "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *           "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *           "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *           "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
         *           "created_at": "2019-08-24T14:15:22Z",
         *           "updated_at": "2019-08-24T14:15:22Z"
         *         }
         *       },
         *       "relations": {
         *         "parent": {
         *           "resource_id": "759bae5c-c7c2-4cdf-bb8a-2de6425ad339",
         *           "relation_name": "parent",
         *           "resource": "parent-resource"
         *         }
         *       },
         *       "attributes": {
         *         "created": {
         *           "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
         *           "type": "time",
         *           "description": "the time (timestamp) the repository was created"
         *         },
         *         "private": {
         *           "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
         *           "type": "bool",
         *           "description": "whether the repo is private (if false, the repo is public)"
         *         }
         *       }
         *     }
         */
        ResourceRead: {
            /**
             * Key
             * @description A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the resource
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the resource belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the resource belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the resource belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the resource was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the resource was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Name
             * @description The name of the resource
             */
            name: string;
            /**
             * Urn
             * @description The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
             */
            urn?: string;
            /**
             * Description
             * @description An optional longer description of what this resource respresents in your system
             */
            description?: string;
            /**
             * Actions
             * @description
             *             A actions definition block, typically contained within a resource type definition block.
             *             The actions represents the ways you can interact with a protected resource.
             *
             * @default {}
             */
            actions: {
                [key: string]: components["schemas"]["ActionBlockRead"];
            };
            /**
             * Type Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this resource. This metadata can be used to filter resource using query parameters with attr_ prefix
             */
            type_attributes?: Record<string, never>;
            /**
             * Attributes
             * @description Attributes that each resource of this type defines, and can be used in your ABAC policies.
             */
            attributes?: {
                [key: string]: components["schemas"]["AttributeBlockRead"];
            };
            /**
             * Roles
             * @description Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, etc.
             */
            roles?: {
                [key: string]: components["schemas"]["ResourceRoleRead"];
            };
            /**
             * Relations
             * @description
             *             A relations definition block, typically contained within a resource type definition block.
             *             The relations represents the ways you can interact with a protected resource.
             *
             * @default {}
             */
            relations: {
                [key: string]: components["schemas"]["RelationBlockRead"];
            };
            /** V1Compat Path */
            v1compat_path?: string;
            /** V1Compat Type */
            v1compat_type?: string;
            /** V1Compat Name */
            v1compat_name?: string;
            /**
             * Action Groups
             * @default {}
             */
            action_groups: {
                [key: string]: string[];
            };
        };
        /** ResourceReplace */
        ResourceReplace: {
            /**
             * Name
             * @description The name of the resource
             */
            name: string;
            /**
             * Urn
             * @description The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
             */
            urn?: string;
            /**
             * Description
             * @description An optional longer description of what this resource respresents in your system
             */
            description?: string;
            /**
             * Actions
             * @description
             *             A actions definition block, typically contained within a resource type definition block.
             *             The actions represents the ways you can interact with a protected resource.
             *
             */
            actions: {
                [key: string]: components["schemas"]["ActionBlockEditable"];
            };
            /**
             * Type Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this resource. This metadata can be used to filter resource using query parameters with attr_ prefix
             */
            type_attributes?: Record<string, never>;
            /**
             * Attributes
             * @description Attributes that each resource of this type defines, and can be used in your ABAC policies.
             */
            attributes?: {
                [key: string]: components["schemas"]["AttributeBlockEditable"];
            };
            /**
             * Roles
             * @description Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, base roles, etc.
             */
            roles?: {
                [key: string]: components["schemas"]["RoleBlockEditable"];
            };
            /**
             * Relations
             * @description Relations to other resources. The key is the relation key, and the value is the related resource.
             */
            relations?: {
                [key: string]: string;
            };
            /** V1Compat Path */
            v1compat_path?: string;
            /** V1Compat Type */
            v1compat_type?: string;
            /** V1Compat Name */
            v1compat_name?: string;
        };
        /**
         * ResourceRoleCreate
         * @example {
         *       "key": "maintainer",
         *       "name": "Maintainer",
         *       "description": "the maintainer role can read from the repo and push changes",
         *       "permissions": [
         *         "push"
         *       ],
         *       "extends": [
         *         "contributor"
         *       ],
         *       "granted_to": {
         *         "users_with_role": [
         *           {
         *             "role": "Admin",
         *             "on_resource": "organization",
         *             "linked_by_relation": "owner"
         *           }
         *         ]
         *       }
         *     }
         */
        ResourceRoleCreate: {
            /**
             * Key
             * @description A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.
             */
            key: string;
            /**
             * Name
             * @description The name of the role
             */
            name: string;
            /**
             * Description
             * @description optional description string explaining what this role represents, or what permissions are granted to it.
             */
            description?: string;
            /**
             * Permissions
             * @description list of action keys that define what actions this resource role is permitted to do
             */
            permissions?: string[];
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator
             */
            attributes?: Record<string, never>;
            /**
             * Extends
             * @description list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
             */
            extends?: string[];
            /**
             * Granted To
             * @description Derived role that inherit will be applied on this role
             */
            granted_to?: components["schemas"]["DerivedRoleBlockEdit"];
            /** V1Compat Settings */
            v1compat_settings?: Record<string, never>;
            /** V1Compat Attributes */
            v1compat_attributes?: Record<string, never>;
        };
        /** ResourceRoleList */
        ResourceRoleList: {
            /** Roles */
            roles: components["schemas"]["ResourceRoleRead"][] | components["schemas"]["PaginatedResult_ResourceRoleRead_"];
        };
        /**
         * ResourceRoleRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "key": "maintainer",
         *       "name": "Maintainer",
         *       "description": "the maintainer role can read from the repo and push changes",
         *       "permissions": [
         *         "push"
         *       ],
         *       "extends": [
         *         "contributor"
         *       ],
         *       "resource": "repo",
         *       "granted_to": {
         *         "id": "34821f4a-8191-491d-b550-864580f86ece",
         *         "users_with_role": [
         *           {
         *             "role": "Admin",
         *             "on_resource": "organization",
         *             "linked_by_relation": "owner",
         *             "role_id": "e985caaa-7712-4515-befd-e29336f6c954",
         *             "resource_id": "485c3c3b-edb3-4ef0-9d9b-ffd87a947236",
         *             "relation_id": "e1a09e35-5ff8-4beb-bc8e-847a16842a34"
         *           }
         *         ]
         *       },
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z"
         *     }
         */
        ResourceRoleRead: {
            /**
             * Name
             * @description The name of the role
             */
            name: string;
            /**
             * Description
             * @description optional description string explaining what this role represents, or what permissions are granted to it.
             */
            description?: string;
            /**
             * Permissions
             * @description list of action keys that define what actions this resource role is permitted to do
             */
            permissions?: string[];
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator
             */
            attributes?: Record<string, never>;
            /**
             * Extends
             * @description list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
             * @default []
             */
            extends: string[];
            /**
             * Granted To
             * @description Derived role that inherit will be applied on this role
             */
            granted_to?: components["schemas"]["DerivedRoleBlockRead"];
            /**
             * Key
             * @description A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the role
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the role belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the role belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the role belongs to.
             */
            environment_id: string;
            /**
             * Resource Id
             * Format: uuid
             * @description Unique id of the resource that the role belongs to.
             */
            resource_id: string;
            /**
             * Resource
             * @description The unique resource key that the role belongs to.
             */
            resource: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the role was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the role was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
        };
        /**
         * ResourceRoleUpdate
         * @example {
         *       "description": "the maintainer role can read from the repo and push changes",
         *       "permissions": [
         *         "push"
         *       ]
         *     }
         */
        ResourceRoleUpdate: {
            /**
             * Name
             * @description The name of the role
             */
            name?: string;
            /**
             * Description
             * @description optional description string explaining what this role represents, or what permissions are granted to it.
             */
            description?: string;
            /**
             * Permissions
             * @description list of action keys that define what actions this resource role is permitted to do
             */
            permissions?: string[];
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator
             */
            attributes?: Record<string, never>;
            /**
             * Extends
             * @description list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
             * @default []
             */
            extends: string[];
            /**
             * Granted To
             * @description Derived role that inherit will be applied on this role
             */
            granted_to?: components["schemas"]["DerivedRoleBlockEdit"];
        };
        /**
         * ResourceTypeData
         * @description This is the data of a specific resource type in the system
         */
        ResourceTypeData: {
            /**
             * Actions
             * @description List of actions that can be performed on the resource.
             */
            actions: string[];
            /**
             * Derived Roles
             * @description Key-Value mapping of the derived roles for the resource type.
             *     The key is the derived role key and the value is the details and conditions for the role derivation.
             */
            derived_roles: {
                [key: string]: components["schemas"]["DerivedRole"];
            };
        };
        /** ResourceTypeObj */
        ResourceTypeObj: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Name */
            name?: string;
            /** Attributes */
            attributes?: components["schemas"]["ResourceAttributes"][];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** ResourceUpdate */
        ResourceUpdate: {
            /**
             * Name
             * @description The name of the resource
             */
            name?: string;
            /**
             * Urn
             * @description The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
             */
            urn?: string;
            /**
             * Description
             * @description An optional longer description of what this resource respresents in your system
             */
            description?: string;
            /**
             * Actions
             * @description
             *             A actions definition block, typically contained within a resource type definition block.
             *             The actions represents the ways you can interact with a protected resource.
             *
             */
            actions?: {
                [key: string]: components["schemas"]["ActionBlockEditable"];
            };
            /**
             * Type Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this resource. This metadata can be used to filter resource using query parameters with attr_ prefix
             */
            type_attributes?: Record<string, never>;
            /**
             * Attributes
             * @description Attributes that each resource of this type defines, and can be used in your ABAC policies.
             */
            attributes?: {
                [key: string]: components["schemas"]["AttributeBlockEditable"];
            };
            /**
             * Roles
             * @description Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, base roles, etc.
             */
            roles?: {
                [key: string]: components["schemas"]["RoleBlockEditable"];
            };
            /**
             * Relations
             * @description Relations to other resources. The key is the relation key, and the value is the related resource.
             */
            relations?: {
                [key: string]: string;
            };
            /** V1Compat Path */
            v1compat_path?: string;
            /** V1Compat Type */
            v1compat_type?: string;
            /** V1Compat Name */
            v1compat_name?: string;
        };
        /**
         * RoleAssignmentCreate
         * @example {
         *       "user": "jane@coolcompany.com",
         *       "role": "admin",
         *       "tenant": "stripe-inc"
         *     }
         */
        RoleAssignmentCreate: {
            /**
             * Role
             * @description the role that will be assigned (accepts either the role id or the role key)
             */
            role: string;
            /**
             * Tenant
             * @description the tenant the role is associated with (accepts either the tenant id or the tenant key)
             */
            tenant?: string;
            /**
             * Resource Instance
             * @description the resource instance the role is associated with (accepts either the resource instance id or key using this format resource_type:resource_instance)The resource instance will be implicitly created if the tenant parameter is specified and the resource instance does not exist.
             */
            resource_instance?: string;
            /**
             * User
             * @description the user the role will be assigned to (accepts either the user id or the user key)
             */
            user: string;
        };
        /** RoleAssignmentDetailedRead */
        RoleAssignmentDetailedRead: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the role assignment
             */
            id: string;
            /**
             * Role
             * @description the role that is assigned
             */
            role: components["schemas"]["RoleAssignmentRole"];
            /**
             * User
             * @description the user the role is assigned to
             */
            user: components["schemas"]["RoleAssignmentUser"];
            /**
             * Tenant
             * @description the tenant the role is associated with
             */
            tenant: components["schemas"]["RoleAssignmentTenant"];
            resource_instance?: components["schemas"]["RoleAssignmentResourceInstance"];
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the role assignment belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the role assignment belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the role assignment belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the role assignment was created (ISO_8601 format).
             */
            created_at: string;
        };
        /**
         * RoleAssignmentRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "user": "jane@coolcompany.com",
         *       "role": "admin",
         *       "tenant": "stripe-inc",
         *       "user_id": "7c60d51f-b44e-4682-87d6-449835ea4d11",
         *       "role_id": "405d8375-3514-403b-8c43-83ae74cfe022",
         *       "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e733",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z"
         *     }
         */
        RoleAssignmentRead: {
            /**
             * Id
             * Format: uuid
             * @description Unique id of the role assignment
             */
            id: string;
            /**
             * User
             * @description the user the role is assigned to
             */
            user: string;
            /**
             * Role
             * @description the role that is assigned
             */
            role: string;
            /**
             * Tenant
             * @description the tenant the role is associated with
             */
            tenant?: string;
            /**
             * Resource Instance
             * @description the resource instance the role is associated with
             */
            resource_instance?: string;
            /**
             * Resource Instance Id
             * Format: uuid
             * @description Unique id of the resource instance
             */
            resource_instance_id?: string;
            /**
             * User Id
             * Format: uuid
             * @description Unique id of the user
             */
            user_id: string;
            /**
             * Role Id
             * Format: uuid
             * @description Unique id of the role
             */
            role_id: string;
            /**
             * Tenant Id
             * Format: uuid
             * @description Unique id of the tenant
             */
            tenant_id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the role assignment belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the role assignment belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the role assignment belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the role assignment was created (ISO_8601 format).
             */
            created_at: string;
        };
        /**
         * RoleAssignmentRemove
         * @example {
         *       "user": "jane@coolcompany.com",
         *       "role": "editor",
         *       "tenant": "google-inc"
         *     }
         */
        RoleAssignmentRemove: {
            /**
             * Role
             * @description the role that will be unassigned (accepts either the role id or the role key)
             */
            role: string;
            /**
             * Tenant
             * @description the tenant the role is associated with (accepts either the tenant id or the tenant key)
             */
            tenant: string;
            /**
             * Resource Instance
             * @description the resource instance the role is associated with (accepts either the resource instance id or key using this format resource_type:resource_instance)
             */
            resource_instance?: string;
            /**
             * User
             * @description the user the role will be unassigned from (accepts either the user id or the user key)
             */
            user: string;
        };
        /** RoleAssignmentResourceInstance */
        RoleAssignmentResourceInstance: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Resource */
            resource: string;
            /**
             * Attributes
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /** RoleAssignmentRole */
        RoleAssignmentRole: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Name */
            name: string;
            /** Permissions */
            permissions?: string[];
        };
        /** RoleAssignmentTenant */
        RoleAssignmentTenant: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Name */
            name: string;
            /**
             * Attributes
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /** RoleAssignmentUser */
        RoleAssignmentUser: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Email */
            email?: string;
            /** First Name */
            first_name?: string;
            /** Last Name */
            last_name?: string;
            /**
             * Attributes
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /** RoleBlockEditable */
        RoleBlockEditable: {
            /**
             * Name
             * @description The name of the role
             */
            name: string;
            /**
             * Description
             * @description optional description string explaining what this role represents, or what permissions are granted to it.
             */
            description?: string;
            /**
             * Permissions
             * @description list of action keys that define what actions this resource role is permitted to do
             */
            permissions?: string[];
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator
             */
            attributes?: Record<string, never>;
            /**
             * Extends
             * @description list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
             */
            extends?: string[];
            /**
             * Granted To
             * @description Derived role that inherit will be applied on this role
             */
            granted_to?: components["schemas"]["DerivedRoleBlockEdit"];
            /** V1Compat Settings */
            v1compat_settings?: Record<string, never>;
            /** V1Compat Attributes */
            v1compat_attributes?: Record<string, never>;
        };
        /**
         * RoleCreate
         * @example {
         *       "key": "editor",
         *       "name": "Editor",
         *       "description": "the editor role can read and write to documents",
         *       "permissions": [
         *         "document:write"
         *       ],
         *       "extends": [
         *         "viewer"
         *       ]
         *     }
         */
        RoleCreate: {
            /**
             * Key
             * @description A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.
             */
            key: string;
            /**
             * Name
             * @description The name of the role
             */
            name: string;
            /**
             * Description
             * @description optional description string explaining what this role represents, or what permissions are granted to it.
             */
            description?: string;
            /**
             * Permissions
             * @description list of action keys that define what actions this resource role is permitted to do
             */
            permissions?: string[];
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator
             */
            attributes?: Record<string, never>;
            /**
             * Extends
             * @description list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
             */
            extends?: string[];
            /**
             * Granted To
             * @description Derived role that inherit will be applied on this role
             */
            granted_to?: components["schemas"]["DerivedRoleBlockEdit"];
            /** V1Compat Settings */
            v1compat_settings?: Record<string, never>;
            /** V1Compat Attributes */
            v1compat_attributes?: Record<string, never>;
            /** V1Compat Is Built In */
            v1compat_is_built_in?: boolean;
        };
        /** RoleCreateBulk */
        RoleCreateBulk: {
            /**
             * Name
             * @description The name of the role
             */
            name: string;
            /**
             * Description
             * @description optional description string explaining what this role represents, or what permissions are granted to it.
             */
            description?: string;
            /**
             * Permissions
             * @description list of action keys that define what actions this resource role is permitted to do
             */
            permissions?: string[];
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator
             */
            attributes?: Record<string, never>;
            /**
             * Extends
             * @description list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
             */
            extends?: string[];
            /**
             * Granted To
             * @description Derived role that inherit will be applied on this role
             */
            granted_to?: components["schemas"]["DerivedRoleBlockEdit"];
            /** V1Compat Settings */
            v1compat_settings?: Record<string, never>;
            /** V1Compat Attributes */
            v1compat_attributes?: Record<string, never>;
            /**
             * Key
             * @description A URL-friendly name of the Role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the Role.
             */
            key: string;
            /**
             * Resource
             * @description The resource key for the role. Optional; for tenant roles, leave empty.
             */
            resource?: string;
        };
        /** RoleCreateBulkOperation */
        RoleCreateBulkOperation: {
            /** Operations */
            operations: components["schemas"]["RoleCreateBulk"][];
        };
        /** RoleCreateBulkOperationResult */
        RoleCreateBulkOperationResult: {
            /** Created */
            created: string[];
            /** Updated */
            updated: string[];
        };
        /**
         * RoleData
         * @description This is the data of a specific role in the system
         */
        RoleData: {
            /**
             * Grants
             * @description Key-Value mapping of the resources and actions that the role can perform.
             *     The key is the resource key and the value is a list of actions that the role can perform on that resource.
             */
            grants: {
                [key: string]: string[];
            };
            /**
             * Attributes
             * @description Key-Value mapping of the attributes of the role.
             *     The key is the attribute key and the value is the attribute value.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /** RoleList */
        RoleList: {
            /** Roles */
            roles: components["schemas"]["RoleRead"][] | components["schemas"]["PaginatedResult_RoleRead_"];
        };
        /**
         * RoleRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "key": "editor",
         *       "name": "Editor",
         *       "description": "the editor role can read and write to documents",
         *       "permissions": [
         *         "document:write"
         *       ],
         *       "extends": [
         *         "viewer"
         *       ],
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z"
         *     }
         */
        RoleRead: {
            /**
             * Name
             * @description The name of the role
             */
            name: string;
            /**
             * Description
             * @description optional description string explaining what this role represents, or what permissions are granted to it.
             */
            description?: string;
            /**
             * Permissions
             * @description list of action keys that define what actions this resource role is permitted to do
             */
            permissions?: string[];
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator
             */
            attributes?: Record<string, never>;
            /**
             * Extends
             * @description list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
             */
            extends?: string[];
            /**
             * Granted To
             * @description
             *             A derived role defintion block, typically contained whithin a role definition.
             *             The derived role is a role that is derived from the role definition.
             *
             * @default {}
             */
            granted_to: components["schemas"]["DerivedRoleBlockRead"];
            /** V1Compat Settings */
            v1compat_settings?: Record<string, never>;
            /** V1Compat Attributes */
            v1compat_attributes?: Record<string, never>;
            /**
             * Key
             * @description A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the role
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the role belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the role belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the role belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the role was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the role was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
        };
        /**
         * RoleUpdate
         * @example {
         *       "description": "the editor role can read and write to documents",
         *       "permissions": [
         *         "document:write"
         *       ]
         *     }
         */
        RoleUpdate: {
            /**
             * Name
             * @description The name of the role
             */
            name?: string;
            /**
             * Description
             * @description optional description string explaining what this role represents, or what permissions are granted to it.
             */
            description?: string;
            /**
             * Permissions
             * @description list of action keys that define what actions this resource role is permitted to do
             */
            permissions?: string[];
            /**
             * Attributes
             * @description optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator
             */
            attributes?: Record<string, never>;
            /**
             * Extends
             * @description list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
             */
            extends?: string[];
            /**
             * Granted To
             * @description Derived role that inherit will be applied on this role
             */
            granted_to?: components["schemas"]["DerivedRoleBlockEdit"];
            /** V1Compat Settings */
            v1compat_settings?: Record<string, never>;
            /** V1Compat Attributes */
            v1compat_attributes?: Record<string, never>;
        };
        /** SMTPEmailConfigurationCreate */
        SMTPEmailConfigurationCreate: {
            /**
             * Host
             * @description The host of the SMTP provider
             */
            host: string;
            /**
             * From Address
             * Format: email
             * @description The from address the mails will be sent from
             */
            from_address: string;
            /**
             * Port
             * @description The port of the SMTP provider
             */
            port: number;
            /**
             * Username
             * @description The username of the SMTP provider
             */
            username: string;
            /**
             * Password
             * @description The password of the SMTP provider
             */
            password: string;
            /**
             * @description The type of the email provider (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            email_provider_type: "smtp";
        };
        /** SMTPEmailConfigurationRead */
        SMTPEmailConfigurationRead: {
            /**
             * Host
             * @description The host of the SMTP provider
             */
            host: string;
            /**
             * From Address
             * Format: email
             * @description The from address the mails will be sent from
             */
            from_address: string;
            /**
             * Port
             * @description The port of the SMTP provider
             */
            port: number;
            /**
             * Username
             * @description The username of the SMTP provider
             */
            username: string;
            /**
             * Password
             * @description The password of the SMTP provider
             */
            password: string;
            /**
             * @description The type of the email provider (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            email_provider_type: "smtp";
            /**
             * Id
             * Format: uuid
             * @description Unique id of the email_configuration
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the email_configuration belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the email_configuration belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the email_configuration belongs to.
             */
            environment_id: string;
        };
        /** SSHAuthData */
        SSHAuthData: {
            /**
             * Auth Type
             * @default ssh
             * @enum {string}
             */
            auth_type: "ssh";
            /**
             * Username
             * @description SSH username
             */
            username: string;
            /**
             * Public Key
             * @description SSH public key
             */
            public_key?: string;
            /**
             * Private Key
             * @description SSH private key
             */
            private_key: string;
        };
        /** SSHAuthDataRead */
        SSHAuthDataRead: {
            /**
             * Auth Type
             * @default ssh
             * @enum {string}
             */
            auth_type: "ssh";
            /**
             * Username
             * @description SSH username
             */
            username: string;
            /**
             * Public Key
             * @description SSH public key
             */
            public_key?: string;
            /**
             * Private Key
             * @description SSH private key
             */
            private_key: string;
        };
        /** ScopeConfigRead */
        ScopeConfigRead: {
            data?: components["schemas"]["DataSourceConfig"];
            /**
             * Id
             * Format: uuid
             * @description Unique id of the ScopeConfig
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the ScopeConfig belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the ScopeConfig belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the ScopeConfig belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the ScopeConfig was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the ScopeConfig was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
        };
        /** ScopeConfigSet */
        ScopeConfigSet: {
            data?: components["schemas"]["DataSourceConfig"];
        };
        /**
         * SearchOperator
         * @description An enumeration.
         * @enum {string}
         */
        SearchOperator: "startswith" | "endswith" | "contains";
        /**
         * StrippedRelationBlockRead
         * @example {
         *       "description": "parent relation",
         *       "key": "parent",
         *       "name": "parent"
         *     }
         */
        StrippedRelationBlockRead: {
            /**
             * Key
             * @description A URL-friendly name of the relation (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the relation.
             */
            key: string;
            /**
             * Name
             * @description The name of the relation
             */
            name: string;
            /**
             * Description
             * @description An optional longer description of what this relation represents in your system
             */
            description?: string;
        };
        /** TaskResult[EnvironmentRead] */
        TaskResult_EnvironmentRead_: {
            /**
             * Task Id
             * @description The unique id of the task.
             */
            task_id: string;
            /** @description The status of the task. */
            status: components["schemas"]["TaskStatus"];
            /**
             * Result
             * @description The result of the task when the task finished.
             */
            result?: components["schemas"]["EnvironmentRead"];
            /**
             * Error
             * @description The error details when the task failed.
             */
            error?: components["schemas"]["ErrorDetails"];
        };
        /** TaskResult[PolicyGuardScopeRead] */
        TaskResult_PolicyGuardScopeRead_: {
            /**
             * Task Id
             * @description The unique id of the task.
             */
            task_id: string;
            /** @description The status of the task. */
            status: components["schemas"]["TaskStatus"];
            /**
             * Result
             * @description The result of the task when the task finished.
             */
            result?: components["schemas"]["PolicyGuardScopeRead"];
            /**
             * Error
             * @description The error details when the task failed.
             */
            error?: components["schemas"]["ErrorDetails"];
        };
        /**
         * TaskStatus
         * @description An enumeration.
         * @enum {string}
         */
        TaskStatus: "processing" | "success" | "failure" | "cancelled";
        /**
         * TenantBlockRead
         * @example {
         *       "name": "Stripe Inc",
         *       "description": "A payment processing company",
         *       "attributes": {
         *         "allowed_locations": [
         *           "US",
         *           "CA"
         *         ]
         *       },
         *       "key": "stripeinc"
         *     }
         */
        TenantBlockRead: {
            /**
             * Key
             * @description A unique id by which Permit will identify the tenant. The tenant key must be url-friendly (slugified).
             */
            key: string;
            /**
             * Name
             * @description A descriptive name for the tenant
             */
            name: string;
            /**
             * Description
             * @description an optional longer description of the tenant
             */
            description?: string;
            /**
             * Attributes
             * @description Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /**
         * TenantCreate
         * @example {
         *       "key": "stripeinc",
         *       "name": "Stripe Inc",
         *       "attributes": {
         *         "allowed_locations": [
         *           "US",
         *           "CA"
         *         ]
         *       }
         *     }
         */
        TenantCreate: {
            /**
             * Key
             * @description A unique id by which Permit will identify the tenant. The tenant key must be url-friendly (slugified).
             */
            key: string;
            /**
             * Name
             * @description A descriptive name for the tenant
             */
            name: string;
            /**
             * Description
             * @description an optional longer description of the tenant
             */
            description?: string;
            /**
             * Attributes
             * @description Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /** TenantCreateBulkOperation */
        TenantCreateBulkOperation: {
            /** Operations */
            operations: components["schemas"]["TenantCreate"][];
        };
        /** TenantCreateBulkOperationResult */
        TenantCreateBulkOperationResult: Record<string, never>;
        /**
         * TenantData
         * @description This is the data of a specific tenant in the system
         */
        TenantData: {
            /**
             * Roleassignments
             * @deprecated
             */
            roleAssignments?: {
                [key: string]: string[];
            };
            /**
             * Attributes
             * @description Key-Value mapping of the attributes of the tenant.
             *     The key is the attribute key and the value is the attribute value.
             */
            attributes: Record<string, never>;
        };
        /**
         * TenantDeleteBulkOperation
         * @example {
         *       "idents": [
         *         "default",
         *         "dev"
         *       ]
         *     }
         */
        TenantDeleteBulkOperation: {
            /**
             * Idents
             * @description List of tenant idents to delete. Either the unique id or the key of the tenants.
             */
            idents: string[];
        };
        /** TenantDeleteBulkOperationResult */
        TenantDeleteBulkOperationResult: Record<string, never>;
        /** TenantObj */
        TenantObj: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Name */
            name?: string;
            /** Attributes */
            attributes?: Record<string, never>;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * TenantRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "last_action_at": "2019-08-24T14:15:22Z",
         *       "key": "stripeinc",
         *       "name": "Stripe Inc",
         *       "attributes": {
         *         "allowed_locations": [
         *           "US",
         *           "CA"
         *         ]
         *       }
         *     }
         */
        TenantRead: {
            /**
             * Key
             * @description A unique id by which Permit will identify the tenant. The tenant key must be url-friendly (slugified).
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the tenant
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the tenant belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the tenant belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the tenant belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the tenant was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the tenant was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Last Action At
             * Format: date-time
             * @description Date and time when the tenant was last active (ISO_8601 format). In other words, this is the last time a permission check was done on a resource belonging to this tenant.
             */
            last_action_at: string;
            /**
             * Name
             * @description A descriptive name for the tenant
             */
            name: string;
            /**
             * Description
             * @description an optional longer description of the tenant
             */
            description?: string;
            /**
             * Attributes
             * @description Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /**
         * TenantUpdate
         * @example {
         *       "name": "Stripe Inc",
         *       "description": "A payment processing company",
         *       "attributes": {
         *         "allowed_locations": [
         *           "US",
         *           "CA"
         *         ]
         *       }
         *     }
         */
        TenantUpdate: {
            /**
             * Name
             * @description A descriptive name for the tenant
             */
            name?: string;
            /**
             * Description
             * @description an optional longer description of the tenant
             */
            description?: string;
            /**
             * Attributes
             * @description Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /** UsageLimits */
        UsageLimits: {
            /**
             * Mau
             * @description Monthly active users limit. Default for free-tier is 1000.
             * @default 1000
             */
            mau: number;
            /**
             * Tenants
             * @description Number of tenants limit. Default for free-tier is 20.
             * @default 20
             */
            tenants: number;
            /**
             * @description Billing tier. Default is free.
             * @default free
             */
            billing_tier: components["schemas"]["BillingTierType"];
        };
        /**
         * UserCreate
         * @example {
         *       "key": "user|892179821739812389327",
         *       "email": "jane@coolcompany.com",
         *       "first_name": "Jane",
         *       "last_name": "Doe",
         *       "attributes": {
         *         "department": "marketing",
         *         "age": 30,
         *         "subscription": {
         *           "tier": "pro",
         *           "expired": false
         *         }
         *       },
         *       "role_assignments": [
         *         {
         *           "role": "admin",
         *           "tenant": "stripe-inc"
         *         },
         *         {
         *           "role": "viewer",
         *           "tenant": "othercompany.com"
         *         }
         *       ]
         *     }
         */
        UserCreate: {
            /**
             * Key
             * @description A unique id by which Permit will identify the user for permission checks.
             */
            key: string;
            /**
             * Email
             * Format: email
             * @description The email of the user. If synced, will be unique inside the environment.
             */
            email?: string;
            /**
             * First Name
             * @description First name of the user.
             */
            first_name?: string;
            /**
             * Last Name
             * @description Last name of the user.
             */
            last_name?: string;
            /**
             * Attributes
             * @description Arbitrary user attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
            /**
             * Role Assignments
             * @description List of roles to assign to the user in the environment.
             */
            role_assignments?: components["schemas"]["UserRoleCreate"][];
        };
        /** UserCreateBulkOperation */
        UserCreateBulkOperation: {
            /** Operations */
            operations: components["schemas"]["UserCreate"][];
        };
        /** UserCreateBulkOperationResult */
        UserCreateBulkOperationResult: Record<string, never>;
        /**
         * UserData
         * @description This is the data of a specific user in the system
         */
        UserData: {
            /**
             * Roleassignments
             * @deprecated
             * @description Key-Value mapping of the roles assigned to the user.
             *     The key is the tenant key and the value is a list of role keys assigned to the user in that tenant.
             */
            roleAssignments: {
                [key: string]: string[];
            };
            /**
             * Attributes
             * @description Key-Value mapping of the attributes of the user.
             *     The key is the attribute key and the value is the attribute value.
             */
            attributes: Record<string, never>;
        };
        /**
         * UserDeleteBulkOperation
         * @example {
         *       "idents": [
         *         "jane_doe",
         *         "john_doe"
         *       ]
         *     }
         */
        UserDeleteBulkOperation: {
            /**
             * Idents
             * @description List of user idents to delete. Either the unique id or the key of the users.
             */
            idents: string[];
        };
        /** UserDeleteBulkOperationResult */
        UserDeleteBulkOperationResult: Record<string, never>;
        /** UserInTenant */
        UserInTenant: {
            /**
             * Tenant
             * @description The tenant key which the user is associated with
             */
            tenant: string;
            /**
             * Roles
             * @description List of roles assigned to the user in that tenant
             */
            roles: string[];
            /** @description Whether the user has signed in or not */
            status: components["schemas"]["UserStatus"];
            /**
             * Resource Instance Roles
             * @default []
             */
            resource_instance_roles: components["schemas"]["UserResourceInstanceRole"][];
        };
        /**
         * UserInviteStatus
         * @description An enumeration.
         * @enum {string}
         */
        UserInviteStatus: "pending" | "approved";
        /** UserObj */
        UserObj: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Key */
            key: string;
            /** Email */
            email?: string;
            /** First Name */
            first_name?: string;
            /** Last Name */
            last_name?: string;
            /** Attributes */
            attributes?: Record<string, never>;
            /** Roles */
            roles?: components["schemas"]["RelationshipTupleObj"][];
            /** Assigned Roles */
            assigned_roles?: string[];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * UserRead
         * @example {
         *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
         *       "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
         *       "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
         *       "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
         *       "key": "user|892179821739812389327",
         *       "email": "jane@coolcompany.com",
         *       "created_at": "2019-08-24T14:15:22Z",
         *       "updated_at": "2019-08-24T14:15:22Z",
         *       "first_name": "Jane",
         *       "last_name": "Doe",
         *       "attributes": {
         *         "department": "marketing",
         *         "age": 30,
         *         "subscription": {
         *           "tier": "pro",
         *           "expired": false
         *         }
         *       },
         *       "associated_tenants": [
         *         {
         *           "tenant": "stripe-inc",
         *           "roles": [
         *             "admin"
         *           ],
         *           "status": "active"
         *         },
         *         {
         *           "tenant": "othercompany.com",
         *           "roles": [
         *             "viewer"
         *           ],
         *           "status": "pending"
         *         }
         *       ],
         *       "roles": [
         *         {
         *           "role": "admin",
         *           "tenant": "stripe-inc"
         *         },
         *         {
         *           "role": "viewer",
         *           "tenant": "othercompany.com"
         *         }
         *       ]
         *     }
         */
        UserRead: {
            /**
             * Key
             * @description A unique id by which Permit will identify the user for permission checks.
             */
            key: string;
            /**
             * Id
             * Format: uuid
             * @description Unique id of the user
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the user belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the user belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the user belongs to.
             */
            environment_id: string;
            /**
             * Associated Tenants
             * @default []
             */
            associated_tenants: components["schemas"]["UserInTenant"][];
            /**
             * Roles
             * @deprecated
             * @default []
             */
            roles: components["schemas"]["UserRole"][];
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the user was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the user was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Email
             * Format: email
             * @description The email of the user. If synced, will be unique inside the environment.
             */
            email?: string;
            /**
             * First Name
             * @description First name of the user.
             */
            first_name?: string;
            /**
             * Last Name
             * @description Last name of the user.
             */
            last_name?: string;
            /**
             * Attributes
             * @description Arbitrary user attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /** UserReplaceBulkOperation */
        UserReplaceBulkOperation: {
            /** Operations */
            operations: components["schemas"]["UserCreate"][];
        };
        /** UserReplaceBulkOperationResult */
        UserReplaceBulkOperationResult: Record<string, never>;
        /** UserResourceInstanceRole */
        UserResourceInstanceRole: {
            /**
             * Resource Instance
             * @description The resource instance key which the role is associated with
             */
            resource_instance: string;
            /**
             * Resource
             * @description The resource type which the role is associated with
             */
            resource: string;
            /**
             * Role
             * @description The role key of this resource role
             */
            role: string;
        };
        /** UserRole */
        UserRole: {
            /**
             * Role
             * @description the role that is assigned
             */
            role: string;
            /**
             * Tenant
             * @description the tenant the role is associated with
             */
            tenant: string;
        };
        /**
         * UserRoleCreate
         * @example {
         *       "role": "admin",
         *       "tenant": "stripe-inc"
         *     }
         */
        UserRoleCreate: {
            /**
             * Role
             * @description the role that will be assigned (accepts either the role id or the role key)
             */
            role: string;
            /**
             * Tenant
             * @description the tenant the role is associated with (accepts either the tenant id or the tenant key)
             */
            tenant?: string;
            /**
             * Resource Instance
             * @description the resource instance the role is associated with (accepts either the resource instance id or key using this format resource_type:resource_instance)The resource instance will be implicitly created if the tenant parameter is specified and the resource instance does not exist.
             */
            resource_instance?: string;
        };
        /**
         * UserRoleRemove
         * @example {
         *       "role": "editor",
         *       "tenant": "google-inc"
         *     }
         */
        UserRoleRemove: {
            /**
             * Role
             * @description the role that will be unassigned (accepts either the role id or the role key)
             */
            role: string;
            /**
             * Tenant
             * @description the tenant the role is associated with (accepts either the tenant id or the tenant key)
             */
            tenant: string;
            /**
             * Resource Instance
             * @description the resource instance the role is associated with (accepts either the resource instance id or key using this format resource_type:resource_instance)
             */
            resource_instance?: string;
        };
        /**
         * UserStatus
         * @description An enumeration.
         * @enum {string}
         */
        UserStatus: "active" | "pending";
        /** UserUpdate */
        UserUpdate: {
            /**
             * Email
             * Format: email
             * @description The email of the user. If synced, will be unique inside the environment.
             */
            email?: string;
            /**
             * First Name
             * @description First name of the user.
             */
            first_name?: string;
            /**
             * Last Name
             * @description Last name of the user.
             */
            last_name?: string;
            /**
             * Attributes
             * @description Arbitrary user attributes that will be used to enforce attribute-based access control policies.
             * @default {}
             */
            attributes: Record<string, never>;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WebhookCreateWithElements */
        WebhookCreateWithElements: {
            /**
             * Type
             * @default elements
             * @enum {string}
             */
            type: "elements";
            /**
             * Url
             * @description The url to POST the webhook to
             */
            url: string;
            /**
             * Bearer Token
             * @description An optional bearer token to use to authenticate the request
             */
            bearer_token?: string;
        };
        /** WebhookRead */
        WebhookRead: {
            type: components["schemas"]["WebhookType"];
            /**
             * Id
             * Format: uuid
             * @description Unique id of the webhook
             */
            id: string;
            /**
             * OrganizationReadWithAPIKey Id
             * Format: uuid
             * @description Unique id of the organization that the webhook belongs to.
             */
            organization_id: string;
            /**
             * Project Id
             * Format: uuid
             * @description Unique id of the project that the webhook belongs to.
             */
            project_id: string;
            /**
             * Environment Id
             * Format: uuid
             * @description Unique id of the environment that the webhook belongs to.
             */
            environment_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Date and time when the webhook was created (ISO_8601 format).
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Date and time when the webhook was last updated/modified (ISO_8601 format).
             */
            updated_at: string;
            /**
             * Url
             * @description The url to POST the webhook to
             */
            url: string;
        };
        /**
         * WebhookType
         * @description An enumeration.
         * @enum {string}
         */
        WebhookType: "elements" | "pdp_sync_error";
        /** WebhookUpdate */
        WebhookUpdate: {
            /**
             * Url
             * @description The url to POST the webhook to
             */
            url?: string;
            /**
             * Bearer Token
             * @description An optional bearer token to use to authenticate the request
             */
            bearer_token?: string;
        };
        /**
         * DerivationSettings
         * @description Settings for a derived role or a derived role rule
         */
        permit_backend__schemas__schema_derived_role_rule__DerivationSettings: {
            /**
             * No Direct Roles On Object
             * @description If true, the derived role or the specific rule will not apply if the resource has any direct role
             * @default false
             */
            no_direct_roles_on_object: boolean;
        };
        /**
         * DerivationSettings
         * @description Settings for the derived role
         */
        permit_backend__schemas__schema_opal_data__DerivationSettings: {
            /**
             * Superseded By Direct Role
             * @description If True, the derived role is superseded by a direct role.meaning role derivation is not considered if the user has a direct role.
             * @default false
             */
            superseded_by_direct_role: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_all_data_optimized: {
        parameters: {
            query?: never;
            header?: {
                "X-Shard-ID"?: number;
            };
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FullData"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_data: {
        parameters: {
            query?: never;
            header?: {
                "X-Shard-ID"?: number;
            };
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FullData"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_users_data: {
        parameters: {
            query?: never;
            header?: {
                "X-Shard-ID"?: number;
            };
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["UserData"];
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_role_assignments_data: {
        parameters: {
            query?: never;
            header?: {
                "X-Shard-ID"?: number;
            };
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: {
                            [key: string]: string[];
                        };
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_resource_instances_data: {
        parameters: {
            query?: never;
            header?: {
                "X-Shard-ID"?: number;
            };
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["ResourceInstanceAttributeData"];
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_relationships_data: {
        parameters: {
            query?: never;
            header?: {
                "X-Shard-ID"?: number;
            };
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: {
                            [key: string]: {
                                [key: string]: string[];
                            };
                        };
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_authenticated_member: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrgMemberReadWithGrants"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_organization_members: {
        parameters: {
            query?: {
                project_id?: string;
                env_id?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrgMemberReadWithGrants"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_organization_members: {
        parameters: {
            query?: {
                inviter_name?: string;
                inviter_email?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrgMemberCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrgMemberReadWithGrants"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_organization_permissions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrgMemberRemovePermissions"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_organization_member: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id (UUID) of the account member, or the email address of the account member.
                 * @example 42f0e113-219b-4bb9-ba90-e2c904761be2
                 */
                member_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrgMemberReadWithGrants"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_organization_member: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id (UUID) of the account member, or the email address of the account member.
                 * @example 42f0e113-219b-4bb9-ba90-e2c904761be2
                 */
                member_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_organization_member: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id (UUID) of the account member, or the email address of the account member.
                 * @example 42f0e113-219b-4bb9-ba90-e2c904761be2
                 */
                member_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrgMemberUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrgMemberReadWithGrants"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_environment_api_key: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeyRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_api_key_scope: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeyScopeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_api_keys: {
        parameters: {
            query?: {
                object_type?: components["schemas"]["MemberAccessObj"];
                /** @description Optional project filter by project id or key */
                proj_id?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_APIKeyRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_api_key: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["APIKeyCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeyRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_api_key: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The unique id of the API key
                 * @example 42f0e113-219b-4bb9-ba90-e2c904761ce1
                 */
                api_key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeyRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_api_key: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The unique id of the API key
                 * @example 42f0e113-219b-4bb9-ba90-e2c904761ce1
                 */
                api_key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rotate_api_key: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The unique id of the API key
                 * @example 42f0e113-219b-4bb9-ba90-e2c904761ce1
                 */
                api_key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeyRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_organizations: {
        parameters: {
            query?: {
                /** @description Text search for the org name or key or id */
                search?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_organization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationReadWithAPIKey"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_organization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_organization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_organization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_active_organization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stats_organization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationStats"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_organization_invites: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    invite_members_to_organization: {
        parameters: {
            query?: {
                inviter_name?: string;
                inviter_email?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InviteCreate"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MultiInviteResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_invite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").
                 * @example my_organization
                 */
                org_id: string;
                /** @description Id of the invite to cancel */
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_projects: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_project: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stats_environments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvironmentStats"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_environments: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvironmentReadWithEmailConfig"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_environment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnvironmentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvironmentRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_environment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvironmentReadWithEmailConfig"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_environment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_environment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnvironmentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvironmentRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    copy_environment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnvironmentCopy"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvironmentRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    copy_environment_async: {
        parameters: {
            query?: {
                /** @description Time in seconds to wait for the task to complete. Default is 0, means no wait. */
                wait?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnvironmentCopy"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResult_EnvironmentRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_copy_environment_async_result: {
        parameters: {
            query?: {
                /** @description Time in seconds to wait for the task to complete. Default is 0, means no wait. */
                wait?: number;
            };
            header?: never;
            path: {
                /** @description The unique id of the task. */
                task_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResult_EnvironmentRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_jwks_by_url: {
        parameters: {
            query?: {
                /** @description URL of JWKs to test */
                url?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_create_or_replace_roles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleCreateBulkOperation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleCreateBulkOperationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_condition_sets: {
        parameters: {
            query?: {
                /** @description Text search for the condition sets name or key */
                search?: string;
                /** @description if provided, will return only the condition sets of the specified type. e.g: only user sets. */
                type?: components["schemas"]["ConditionSetType"];
                /**
                 * @deprecated
                 * @description Include total count in response
                 */
                include_total_count?: boolean;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_ConditionSetRead_"] | components["schemas"]["ConditionSetRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_condition_set: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConditionSetCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionSetRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_condition_set: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug"). */
                condition_set_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionSetRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_condition_set: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug"). */
                condition_set_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_condition_set: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug"). */
                condition_set_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConditionSetUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionSetRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_condition_set_ancestors: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug"). */
                condition_set_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionSetRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_condition_set_descendants: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug"). */
                condition_set_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionSetRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_implicit_grant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DerivedRoleRuleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DerivedRoleRuleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_implicit_grant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DerivedRoleRuleDelete"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_implicit_grants_conditions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["permit_backend__schemas__schema_derived_role_rule__DerivationSettings"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["permit_backend__schemas__schema_derived_role_rule__DerivationSettings"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_resource_action_groups: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceActionGroupRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_resource_action_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceActionGroupCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceActionGroupRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource_action_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").
                 * @example my_action_group
                 */
                action_group_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceActionGroupRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_resource_action_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").
                 * @example my_action_group
                 */
                action_group_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_resource_action_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").
                 * @example my_action_group
                 */
                action_group_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceActionGroupUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceActionGroupRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_resource_actions: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceActionRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_resource_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceActionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceActionRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug"). */
                action_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceActionRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_resource_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug"). */
                action_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_resource_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug"). */
                action_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceActionUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceActionRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_resource_attributes: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_resource_attribute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceAttributeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource_attribute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug"). */
                attribute_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_resource_attribute: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug"). */
                attribute_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_resource_attribute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug"). */
                attribute_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceAttributeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_resource_relations: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_RelationRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_resource_relation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RelationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource_relation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the "slug"). */
                relation_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_resource_relation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the "slug"). */
                relation_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_resource_roles: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRoleRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_resource_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceRoleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRoleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRoleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_resource_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_resource_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceRoleUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRoleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_permissions_to_resource_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddRolePermissions"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRoleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_permissions_from_resource_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveRolePermissions"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRoleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource_role_ancestors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRoleList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource_role_descendants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRoleList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_resources: {
        parameters: {
            query?: {
                /** @description Whether to include or exclude built-in resources, default is False */
                include_built_in?: boolean;
                /**
                 * @deprecated
                 * @description Include total count in response
                 */
                include_total_count?: boolean;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
                /** @description Text search for the object name or key */
                search?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_ResourceRead_"] | components["schemas"]["ResourceRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_resource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    replace_resource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceReplace"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_resource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_resource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").
                 * @example my_resource
                 */
                resource_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_roles: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Include total count in response
                 */
                include_total_count?: boolean;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
                /** @description Text search for the object name or key */
                search?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_RoleRead_"] | components["schemas"]["RoleRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_permissions_to_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddRolePermissions"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_permissions_from_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveRolePermissions"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_role_ancestors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_role_descendants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug"). */
                role_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_user_attributes: {
        parameters: {
            query?: {
                resource_id?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user_attribute: {
        parameters: {
            query?: {
                resource_id?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceAttributeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_attribute: {
        parameters: {
            query?: {
                resource_id?: string;
            };
            header?: never;
            path: {
                /** @description Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug"). */
                attribute_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_attribute: {
        parameters: {
            query?: {
                resource_id?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug"). */
                attribute_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_attribute: {
        parameters: {
            query?: {
                resource_id?: string;
            };
            header?: never;
            path: {
                /** @description Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug"). */
                attribute_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceAttributeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").
                 * @example my_instance_group
                 */
                group_instance_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").
                 * @example my_instance_group
                 */
                group_instance_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_group: {
        parameters: {
            query?: {
                /** @description The tenant key or id to filter by */
                tenant?: string;
                /** @description The resource key or id to filter by */
                resource?: string;
                /**
                 * @deprecated
                 * @description Include total count in response(will make the request slower)
                 */
                include_total_count?: boolean;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
                /** @description Text search for the object name or key */
                search?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_user_to_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").
                 * @example my_user
                 */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").
                 * @example my_instance_group
                 */
                group_instance_key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupAssignUser"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_user_from_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").
                 * @example my_user
                 */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").
                 * @example my_instance_group
                 */
                group_instance_key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupAssignUser"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_role_to_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").
                 * @example my_instance_group
                 */
                group_instance_key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupAddRole"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_role_from_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").
                 * @example my_instance_group
                 */
                group_instance_key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupAddRole"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_group_to_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").
                 * @example my_instance_group
                 */
                group_instance_key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupAssignment"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_group_from_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").
                 * @example my_instance_group
                 */
                group_instance_key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupAssignment"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users: {
        parameters: {
            query?: {
                /** @description Text search for the email field */
                search?: string;
                /** @description Match users with a specific role */
                role?: string;
                /** @description Should add resource instance roles */
                include_resource_instance_roles?: boolean;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_UserRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug"). */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    replace_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug"). */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description An existing user was replaced */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description An new user was created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug"). */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug"). */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_role_to_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug"). */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRoleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleAssignmentRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_role_from_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug"). */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRoleRemove"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tenant_users: {
        parameters: {
            query?: {
                /** @description Text search for the email field */
                search?: string;
                /** @description Match users with a specific role */
                role?: string;
                /** @description Should add resource instance roles */
                include_resource_instance_roles?: boolean;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").
                 * @example my_tenant
                 */
                tenant_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_UserRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_user_to_tenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").
                 * @example my_tenant
                 */
                tenant_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tenants: {
        parameters: {
            query?: {
                /** @description Text search for the tenant name or key */
                search?: string;
                /**
                 * @deprecated
                 * @description Include total count in response
                 */
                include_total_count?: boolean;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_TenantRead_"] | components["schemas"]["TenantRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_tenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TenantCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").
                 * @example my_tenant
                 */
                tenant_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_tenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").
                 * @example my_tenant
                 */
                tenant_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_tenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").
                 * @example my_tenant
                 */
                tenant_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TenantUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_tenant_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").
                 * @example my_tenant
                 */
                tenant_id: string;
                /**
                 * @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").
                 * @example my_user
                 */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_role_assignments_detailed: {
        parameters: {
            query?: {
                /** @description optional user(s) filter, will only return role assignments granted to this user(s). */
                user?: string[];
                /** @description optional role(s) filter, will only return role assignments granting this role(s). */
                role?: string[];
                /** @description optional tenant(s) filter, will only return role assignments granted in that tenant(s). */
                tenant?: string[];
                /** @description optional resource **type** filter, will only return role assignments granted on that resource type. */
                resource?: string;
                /** @description optional resource instance filter, will only return role assignments granted on that resource instance. */
                resource_instance?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_RoleAssignmentDetailedRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_role_assignments: {
        parameters: {
            query?: {
                /** @description optional user(s) filter, will only return role assignments granted to this user(s). */
                user?: string[];
                /** @description optional role(s) filter, will only return role assignments granting this role(s). */
                role?: string[];
                /** @description optional tenant(s) filter, will only return role assignments granted in that tenant(s). */
                tenant?: string[];
                /** @description optional resource **type** filter, will only return role assignments granted on that resource type. */
                resource?: string;
                /** @description optional resource instance filter, will only return role assignments granted on that resource instance. */
                resource_instance?: string;
                /**
                 * @deprecated
                 * @description Whether to return full details about the user, tenant and role
                 */
                detailed?: boolean;
                /**
                 * @deprecated
                 * @description If true, returns the list of role assignments and the total count.
                 */
                include_total_count?: boolean;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleAssignmentRead"][] | components["schemas"]["PaginatedResult_RoleAssignmentRead_"] | components["schemas"]["RoleAssignmentDetailedRead"][] | components["schemas"]["PaginatedResult_RoleAssignmentDetailedRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleAssignmentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleAssignmentRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleAssignmentRemove"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_assign_role: {
        parameters: {
            query?: {
                /** @description Policy for missing users - 'fail': Fail the entire operation if a user is missing; 'ignore': Skip assignments for missing users; 'create': Create missing users and continue with the operation */
                missing_user_policy?: components["schemas"]["MissingUserPolicy"];
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleAssignmentCreate"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkRoleAssignmentReport"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_unassign_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleAssignmentRemove"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkRoleUnAssignmentReport"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_set_permissions: {
        parameters: {
            query?: {
                /** @description optional user set filter, will only return rules where the permission is granted to this user set */
                user_set?: string;
                /** @description optional permission filter, will only return condition set rules granting this permission */
                permission?: string;
                /** @description optional resource set filter, will only return rules where the permission is granted on this resource set */
                resource_set?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionSetRuleRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_set_permissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConditionSetRuleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionSetRuleRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_set_permissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConditionSetRuleRemove"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_resource_instances_detailed: {
        parameters: {
            query?: {
                /** @description The tenant key or id to filter by */
                tenant?: string;
                /** @description The resource key or id to filter by */
                resource?: string;
                /** @description The resource instance key or id to filter by (supports multi-value like this url?search=key-1&search=key-2) */
                search?: string[];
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_ResourceInstanceDetailedRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_resource_instances: {
        parameters: {
            query?: {
                /** @description The tenant key or id to filter by */
                tenant?: string;
                /** @description The resource key or id to filter by */
                resource?: string;
                /** @description The resource instance key or id to filter by (supports multi-value like this url?search=key-1&search=key-2) */
                search?: string[];
                /**
                 * @deprecated
                 * @description If true, will return the relationships of the resource instance.
                 */
                detailed?: boolean;
                /**
                 * @deprecated
                 * @description Include total count in response(will make the request slower)
                 */
                include_total_count?: boolean;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceInstanceRead"][] | components["schemas"]["PaginatedResult_ResourceInstanceRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_resource_instance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceInstanceCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceInstanceRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource_instance: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description If true, will return the relationships of the resource instance.
                 */
                detailed?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /** @description f'Either the unique id of the resource instance, or the URL-friendly key of the <resource_key:resource_instance_key> (i.e: file:my_file.txt).' */
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceInstanceRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_resource_instance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /** @description f'Either the unique id of the resource instance, or the URL-friendly key of the <resource_key:resource_instance_key> (i.e: file:my_file.txt).' */
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_resource_instance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /** @description f'Either the unique id of the resource instance, or the URL-friendly key of the <resource_key:resource_instance_key> (i.e: file:my_file.txt).' */
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceInstanceUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceInstanceRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_proxy_configs: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyConfigRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_proxy_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProxyConfigCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_proxy_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the "slug"). */
                proxy_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_proxy_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the "slug"). */
                proxy_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_proxy_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the "slug"). */
                proxy_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProxyConfigUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_replace_users: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserReplaceBulkOperation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReplaceBulkOperationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_create_users: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreateBulkOperation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserCreateBulkOperationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_delete_users: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDeleteBulkOperation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDeleteBulkOperationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_create_tenants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TenantCreateBulkOperation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantCreateBulkOperationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_delete_tenants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TenantDeleteBulkOperation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantDeleteBulkOperationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_replace_resource_instances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceInstanceCreateBulkOperation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceInstanceCreateBulkOperationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_delete_resource_instances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceInstanceDeleteBulkOperation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceInstanceDeleteBulkOperationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_email_configuration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailConfigurationRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_or_update_email_configuration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailConfigurationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailConfigurationRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_test_email: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailConfigurationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_templates: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailTemplateRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_template_by_type: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_type: components["schemas"]["EmailTemplateType"];
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailTemplateRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_template_by_type: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_type: components["schemas"]["EmailTemplateType"];
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailTemplateUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailTemplateRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_test_email_by_type: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_type: components["schemas"]["EmailTemplateType"];
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailTemplateUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_relationship_tuples_detailed: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
                /** @description The tenant key or id to filter by */
                tenant?: string;
                /** @description The subject to filter by, accepts either the resource instance id or resource_type:resource_instance */
                subject?: string;
                /** @description The relation id or key to filter by */
                relation?: string;
                /** @description The object to filter by, accepts either the resource instance id or resource_type:resource_instance */
                object?: string;
                /** @description The object type to filter by, accepts resource type id or key */
                object_type?: string;
                /** @description The subject type to filter by, accepts resource type id or key */
                subject_type?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_RelationshipTupleDetailedRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_relationship_tuples: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description If true, will return the full subject and object resource instances.
                 */
                detailed?: boolean;
                /**
                 * @deprecated
                 * @description If true, returns the list of resource instances and the total count.
                 */
                include_total_count?: boolean;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
                /** @description The tenant key or id to filter by */
                tenant?: string;
                /** @description The subject to filter by, accepts either the resource instance id or resource_type:resource_instance */
                subject?: string;
                /** @description The relation id or key to filter by */
                relation?: string;
                /** @description The object to filter by, accepts either the resource instance id or resource_type:resource_instance */
                object?: string;
                /** @description The object type to filter by, accepts resource type id or key */
                object_type?: string;
                /** @description The subject type to filter by, accepts resource type id or key */
                subject_type?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationshipTupleRead"][] | components["schemas"]["PaginatedResult_RelationshipTupleRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_relationship_tuple: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RelationshipTupleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationshipTupleRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_relationship_tuple: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RelationshipTupleDelete"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_create_relationship_tuples: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RelationshipTupleCreateBulkOperation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationshipTupleCreateBulkOperationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_delete_relationship_tuples: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RelationshipTupleDeleteBulkOperation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationshipTupleDeleteBulkOperationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_user_invites: {
        parameters: {
            query?: {
                /** @description optional role filter, will only return invited users with this role. */
                role?: string;
                /** @description optional tenant filter, will only return invited users in that tenant. */
                tenant?: string;
                /** @description optional search, will only return invited users to that email, key or name. */
                search?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_ElementsUserInviteRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user_invite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ElementsUserInviteCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ElementsUserInviteRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_invite: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug"). */
                user_invite_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ElementsUserInviteRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_invite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug"). */
                user_invite_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_invite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug"). */
                user_invite_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ElementsUserInviteUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ElementsUserInviteRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    approve_user_invite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug"). */
                user_invite_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ElementsUserInviteApprove"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description The user already approved or the email requested doesn't match the email of the invite. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApproveMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_pdp_configs: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PDPConfigRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_pdp_config_values: {
        parameters: {
            query?: never;
            header?: {
                "X-Shard-ID"?: number;
            };
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description The unique id of the pdp
                 * @example 42f0e413-219b-4bb9-ba90-c2c904761be1
                 */
                pdp_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RemoteConfig"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    enable_debug_audit_logs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description The unique id of the pdp
                 * @example 42f0e413-219b-4bb9-ba90-c2c904761be1
                 */
                pdp_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PDPConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    disable_debug_audit_logs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description The unique id of the pdp
                 * @example 42f0e413-219b-4bb9-ba90-c2c904761be1
                 */
                pdp_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PDPConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rotate_pdp_api_key: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description The unique id of the pdp
                 * @example 42f0e413-219b-4bb9-ba90-c2c904761be1
                 */
                pdp_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PDPConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    migrate_shards: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PDPShardMigration"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PDPConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_audit_logs: {
        parameters: {
            query?: {
                /** @description Filter by pdp config id */
                pdp_id?: string;
                /** @description List of user keys or emails to filter by */
                users?: string[];
                /** @description Filter by decision result */
                decision?: boolean;
                /** @description Filter by resources */
                resources?: string[];
                /** @description Filter by tenant */
                tenant?: string;
                /** @description Filter by action */
                action?: string;
                /** @description Filter by timestamp from */
                timestamp_from?: number;
                /** @description Filter by timestamp to */
                timestamp_to?: number;
                /** @description Sort by column */
                sort_by?: components["schemas"]["AuditLogSortKey"];
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitedPaginatedResult_AuditLogModel_"];
                };
            };
            /** @description Overreach of pagination limits */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_detailed_audit_log: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The unique id of the audit log
                 * @example 42f0e113-219b-4bb9-ba90-e2c904761be1
                 */
                log_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailedAuditLogModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_policy_repos: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyRepoRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_policy_repo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyRepoCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyRepoRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_active_policy_repo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyRepoRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    disable_active_policy_repo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    activate_policy_repo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the "slug").
                 * @example my_policy_repo
                 */
                repo_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"];
                };
            };
            /** @description Invalid policy repo status */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_policy_repo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the "slug").
                 * @example my_policy_repo
                 */
                repo_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyRepoRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_policy_repo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the "slug").
                 * @example my_policy_repo
                 */
                repo_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_elements_configs: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_ElementsConfigRead_"] | components["schemas"]["ElementsConfigRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_elements_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ElementsConfigCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ElementsConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_elements_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ElementsConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_elements_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ElementsConfigUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ElementsConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_elements_config_runtime: {
        parameters: {
            query?: {
                /** @description For ReBAC Elements, the resource instance ID or key to work on */
                resource_instance_id?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ElementsConfigRuntimeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_elements_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    elements_list_users: {
        parameters: {
            query?: {
                /** @description Text search for the email field */
                search?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
                /** @description For ReBAC Elements, the resource instance ID or key to work on */
                resource_instance_id?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_UserRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    elements_create_user: {
        parameters: {
            query?: {
                /** @description For ReBAC Elements, the resource instance ID or key to work on */
                resource_instance_id?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ElementsUserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"] | components["schemas"]["ElementsUserInviteRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    elements_delete_user: {
        parameters: {
            query?: {
                /** @description For ReBAC Elements, the resource instance ID or key to work on */
                resource_instance_id?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /** @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug"). */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    elements_list_roles: {
        parameters: {
            query?: {
                /** @description Text search for the email field */
                search?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
                /** @description For ReBAC Elements, the resource instance ID or key to work on */
                resource_instance_id?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ElementsRoleRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    elements_assign_role_to_user: {
        parameters: {
            query?: {
                /** @description For ReBAC Elements, the resource instance ID or key to work on */
                resource_instance_id?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /** @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug"). */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ElementsUserRoleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleAssignmentRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    elements_unassign_role_from_user: {
        parameters: {
            query?: {
                /** @description For ReBAC Elements, the resource instance ID or key to work on */
                resource_instance_id?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /** @description Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug"). */
                user_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ElementsUserRoleRemove"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_config_active: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    elements_list_audit_logs: {
        parameters: {
            query?: {
                /** @description Text search for the email field */
                search?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitedPaginatedResult_AuditLogModel_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_access_requests: {
        parameters: {
            query?: {
                /** @description Optional status filter, will only return access requests with this status. */
                status?: components["schemas"]["RequestStatus"];
                /** @description Optional tenant filter, will only return access request granted in that tenant. */
                tenant?: string;
                /** @description Optional role filter, will only return access request granted with that role. */
                role?: string;
                /** @description Optional resource filter, will only return access request granted in that resource. */
                resource?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
                /** @description For ReBAC Elements, the resource instance ID or key to work on */
                resource_instance_id?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_AccessRequestRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_access_request: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccessRequestUserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessRequestRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_access_request: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
                /**
                 * @description Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").
                 * @example 42f0e113-219b-4bb9-ba90-c2c904761be1
                 */
                access_request_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessRequestRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_access_request_reviewer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").
                 * @example 42f0e113-219b-4bb9-ba90-c2c904761be1
                 */
                access_request_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccessRequestReview"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessRequestRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    approve_access_request: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").
                 * @example 42f0e113-219b-4bb9-ba90-c2c904761be1
                 */
                access_request_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccessRequestReview"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessRequestApproved"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deny_access_request: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").
                 * @example 42f0e113-219b-4bb9-ba90-c2c904761be1
                 */
                access_request_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccessRequestReviewDeny"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessRequestDenied"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_access_request: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").
                 * @example 42f0e113-219b-4bb9-ba90-c2c904761be1
                 */
                access_request_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessRequestCanceled"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_operation_approvals: {
        parameters: {
            query?: {
                /** @description Optional status filter, will only return access requests with this status. */
                status?: components["schemas"]["RequestStatus"];
                /** @description Optional resource filter, will only return access request granted in that resource. */
                resource?: string;
                /** @description Optional resource instance filter, will only return access request granted in that resource instance. */
                resource_instance?: string;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_OperationApprovalList_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_operation_approval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OperationApprovalUserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OperationApprovalRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_operation_approval: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").
                 * @example my_operation_approval
                 */
                operation_approval_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OperationApprovalRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_operation_approval_reviewer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").
                 * @example my_operation_approval
                 */
                operation_approval_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OperationApprovalReview"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OperationApprovalRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    approve_operation_approval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").
                 * @example my_operation_approval
                 */
                operation_approval_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OperationApprovalReview"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OperationApprovalApproved"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deny_operation_approval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").
                 * @example my_operation_approval
                 */
                operation_approval_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OperationApprovalReview"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OperationApprovalDenied"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_operation_approval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").
                 * @example my_operation_approval
                 */
                operation_approval_id: string;
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
                /**
                 * @description Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").
                 * @example my_elements_config
                 */
                elements_config_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OperationApprovalCanceled"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_api_events: {
        parameters: {
            query?: {
                /** @description HTTP methods to include in search */
                method?: string[];
                /** @description API paths to include in search */
                path?: string[];
                /** @description Filter by API request success/failure */
                success?: boolean;
                /** @description HTTP status codes to include in search */
                status_code?: number[];
                /** @description IPs of clients to include in search */
                client_ip?: string[];
                /** @description Actor type to search (member, user, api_key) */
                actor_type?: string[];
                /** @description Actor ID to search */
                actor_id?: string[];
                /** @description Actor display name to search */
                actor_display_name?: string;
                /** @description Projects to include in search */
                project_id?: string[];
                /** @description Environments to include in search */
                env_id?: string[];
                /** @description Retrieve only events after this timestamp (seconds since epoch) */
                timestamp_from?: number;
                /** @description Retrieve only events before this timestamp (seconds since epoch) */
                timestamp_until?: number;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_APIHistoryEventRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_api_event: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIHistoryEventFullRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_request_body: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_response_body: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_api_events_v2_history_get: {
        parameters: {
            query?: {
                /** @description HTTP methods to include in search */
                method?: string[];
                /** @description API paths to include in search */
                path?: string[];
                /** @description Filter by API request success/failure */
                success?: boolean;
                /** @description HTTP status codes to include in search */
                status_code?: number[];
                /** @description IPs of clients to include in search */
                client_ip?: string[];
                /** @description Actor type to search (member, user, api_key) */
                actor_type?: string[];
                /** @description Actor ID to search */
                actor_id?: string[];
                /** @description Actor display name to search */
                actor_display_name?: string;
                /** @description Projects to include in search */
                project_id?: string[];
                /** @description Environments to include in search */
                env_id?: string[];
                /** @description Retrieve only events after this timestamp (seconds since epoch) */
                timestamp_from?: number;
                /** @description Retrieve only events before this timestamp (seconds since epoch) */
                timestamp_until?: number;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitedPaginatedResult_APIHistoryEventRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_api_event_v2_history__event_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIHistoryEventFullRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_request_body_v2_history__event_id__request_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_response_body_v2_history__event_id__response_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_activity_events: {
        parameters: {
            query?: {
                /** @description Actor ID to search */
                actor_id?: string[];
                /** @description Actor display name to search */
                actor_display_name?: string;
                /** @description Actor type to search (member, user, api_key) */
                actor_type?: string[];
                /** @description Projects to include in search */
                project_id?: string[];
                /** @description Environments to include in search */
                env_id?: string[];
                /** @description Retrieve only events after this timestamp (seconds since epoch) */
                timestamp_from?: number;
                /** @description Retrieve only events before this timestamp (seconds since epoch) */
                timestamp_until?: number;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitedPaginatedResult_ActivityLogEventRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_activity_types: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_activity_events_v2_deprecated_activity_get: {
        parameters: {
            query?: {
                /** @description Actor ID to search */
                actor_id?: string[];
                /** @description Actor display name to search */
                actor_display_name?: string;
                /** @description Actor type to search (member, user, api_key) */
                actor_type?: string[];
                /** @description Projects to include in search */
                project_id?: string[];
                /** @description Environments to include in search */
                env_id?: string[];
                /** @description Retrieve only events after this timestamp (seconds since epoch) */
                timestamp_from?: number;
                /** @description Retrieve only events before this timestamp (seconds since epoch) */
                timestamp_until?: number;
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_ActivityLogEventRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_activity_types_v2_deprecated_activity_types_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_policy_guard_scopes: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyGuardScopeRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_policy_guard_scope: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyGuardScopeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyGuardScopeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_policy_guard_scope: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the policy_guard_scope, or the URL-friendly key of the policy_guard_scope (i.e: the "slug").
                 * @example my_policy_guard_scope
                 */
                policy_guard_scope_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyGuardScopeRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_policy_guard_scope: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the policy_guard_scope, or the URL-friendly key of the policy_guard_scope (i.e: the "slug").
                 * @example my_policy_guard_scope
                 */
                policy_guard_scope_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    associate_policy_guard_scope: {
        parameters: {
            query?: {
                /** @description Time in seconds to wait for the task to complete. Default is 0, means no wait. */
                wait?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the policy_guard_scope, or the URL-friendly key of the policy_guard_scope (i.e: the "slug").
                 * @example my_policy_guard_scope
                 */
                policy_guard_scope_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyGuardScopeAssociate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResult_PolicyGuardScopeRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    disassociate_policy_guard_scope: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the policy_guard_scope, or the URL-friendly key of the policy_guard_scope (i.e: the "slug").
                 * @example my_policy_guard_scope
                 */
                policy_guard_scope_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyGuardScopeAssociate"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_policy_guard_rules: {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch, starting at 1. */
                page?: number;
                /** @description The number of results per page (max 100). */
                per_page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the policy_guard_scope, or the URL-friendly key of the policy_guard_scope (i.e: the "slug").
                 * @example my_policy_guard_scope
                 */
                policy_guard_scope_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyGuardRuleRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_policy_guard_rule: {
        parameters: {
            query?: {
                /** @description Time in seconds to wait for the task to complete. Default is 0, means no wait. */
                wait?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the policy_guard_scope, or the URL-friendly key of the policy_guard_scope (i.e: the "slug").
                 * @example my_policy_guard_scope
                 */
                policy_guard_scope_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyGuardRuleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResult_PolicyGuardScopeRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_policy_guard_rule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the policy_guard_scope, or the URL-friendly key of the policy_guard_scope (i.e: the "slug").
                 * @example my_policy_guard_scope
                 */
                policy_guard_scope_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyGuardRuleItem"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_scope_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_scope_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScopeConfigSet"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeConfigRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_scope_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").
                 * @example my_project
                 */
                proj_id: string;
                /**
                 * @description Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").
                 * @example my_environment
                 */
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
