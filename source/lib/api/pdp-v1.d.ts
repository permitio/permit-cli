/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/policy-updater/trigger': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Trigger Policy Update */
		post: operations['trigger_policy_update_policy_updater_trigger_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/data-updater/trigger': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Trigger Policy Data Update */
		post: operations['trigger_policy_data_update_data_updater_trigger_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/policy-store/config': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Policy Store Details
		 * @deprecated
		 */
		get: operations['get_policy_store_details_policy_store_config_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/callbacks': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List Callbacks
		 * @description List all the callbacks currently registered by OPAL client.
		 */
		get: operations['list_callbacks_callbacks_get'];
		put?: never;
		/**
		 * Register Callback
		 * @description Register a new callback by OPAL client, to be called on OPA state updates.
		 */
		post: operations['register_callback_callbacks_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/callbacks/{key}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Callback By Key
		 * @description Get a callback by its key (if such callback is indeed registered).
		 */
		get: operations['get_callback_by_key_callbacks__key__get'];
		put?: never;
		post?: never;
		/**
		 * Get Callback By Key
		 * @description Unregisters a callback identified by its key (if such callback is indeed registered).
		 */
		delete: operations['get_callback_by_key_callbacks__key__delete'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/authorized_users': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Authorized Users */
		post: operations['authorized_users_authorized_users_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/allowed_url': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Is Allowed Url */
		post: operations['is_allowed_url_allowed_url_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user-permissions': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Get User Permissions */
		post: operations['Get_User_Permissions_user_permissions_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user-tenants': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Get User Tenants */
		post: operations['Get_User_Tenants_user_tenants_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/allowed/all-tenants': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Is Allowed All Tenants */
		post: operations['is_allowed_all_tenants_allowed_all_tenants_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/allowed/bulk': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Is Allowed Bulk */
		post: operations['is_allowed_bulk_allowed_bulk_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/allowed': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Is Allowed */
		post: operations['is_allowed_allowed_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/nginx_allowed': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Is Allowed Nginx */
		post: operations['is_allowed_nginx_nginx_allowed_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/kong': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Is Allowed Kong */
		post: operations['is_allowed_kong_kong_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/local/role_assignments': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List Role Assignments
		 * @description Get all role assignments stored in the PDP. You can filter the results by providing optional filters.
		 */
		get: operations['list_role_assignments_local_role_assignments_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/healthchecks/opa/ready': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Proxy ready healthcheck - OPAL_OPA_HEALTH_CHECK_POLICY_ENABLED must be set to True */
		get: operations['ready_opa_healthcheck_healthchecks_opa_ready_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/healthchecks/opa/healthy': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Proxy healthy healthcheck - OPAL_OPA_HEALTH_CHECK_POLICY_ENABLED must be set to True */
		get: operations['health_opa_healthcheck_healthchecks_opa_healthy_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/healthchecks/opa/system': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Proxy system data - OPAL_OPA_HEALTH_CHECK_POLICY_ENABLED must be set to True */
		get: operations['system_opa_healthcheck_healthchecks_opa_system_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/facts/users': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create User */
		post: operations['create_user_facts_users_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/facts/tenants': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Tenant */
		post: operations['create_tenant_facts_tenants_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/facts/users/{user_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/** Sync User */
		put: operations['sync_user_facts_users__user_id__put'];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/** Update User */
		patch: operations['update_user_facts_users__user_id__patch'];
		trace?: never;
	};
	'/facts/users/{user_id}/roles': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Assign User Role */
		post: operations['assign_user_role_facts_users__user_id__roles_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/facts/role_assignments': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Role Assignment */
		post: operations['create_role_assignment_facts_role_assignments_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/facts/resource_instances': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Resource Instance */
		post: operations['create_resource_instance_facts_resource_instances_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/facts/resource_instances/{instance_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/** Update Resource Instance */
		patch: operations['update_resource_instance_facts_resource_instances__instance_id__patch'];
		trace?: never;
	};
	'/facts/relationship_tuples': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Relationship Tuple */
		post: operations['create_relationship_tuple_facts_relationship_tuples_post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** AllTenantsAuthorizationResult */
		AllTenantsAuthorizationResult: {
			/**
			 * Allowed Tenants
			 * @default []
			 */
			allowed_tenants: components['schemas']['_AllTenantsAuthorizationResult'][];
		};
		/**
		 * AuthorizationQuery
		 * @description the format of is_allowed() input
		 */
		AuthorizationQuery: {
			user: components['schemas']['User'];
			/** Action */
			action: string;
			resource: components['schemas']['Resource'];
			/**
			 * Context
			 * @default {}
			 */
			context: Record<string, never>;
			/** Sdk */
			sdk?: string;
		};
		/**
		 * AuthorizationQueryV1
		 * @description the format of is_allowed() input
		 */
		AuthorizationQueryV1: {
			/** User */
			user: string;
			/** Action */
			action: string;
			resource: components['schemas']['ResourceV1'];
			/**
			 * Context
			 * @default {}
			 */
			context: Record<string, never>;
		};
		/** AuthorizationResult */
		AuthorizationResult: {
			/**
			 * Allow
			 * @default false
			 */
			allow: boolean;
			/** Query */
			query?: Record<string, never>;
			/** Debug */
			debug?: Record<string, never>;
			/**
			 * Result
			 * @default false
			 */
			result: boolean;
		};
		/** AuthorizedUserAssignment */
		AuthorizedUserAssignment: {
			/**
			 * User
			 * @description The user that is authorized
			 */
			user: string;
			/**
			 * Tenant
			 * @description The tenant that the user is authorized for
			 */
			tenant: string;
			/**
			 * Resource
			 * @description The resource that the user is authorized for
			 */
			resource: string;
			/**
			 * Role
			 * @description The role that the user is assigned to
			 */
			role: string;
		};
		/**
		 * AuthorizedUsersAuthorizationQuery
		 * @description the format of authorized_users input
		 */
		AuthorizedUsersAuthorizationQuery: {
			/** Action */
			action: string;
			resource: components['schemas']['Resource'];
			/**
			 * Context
			 * @default {}
			 */
			context: Record<string, never>;
			/** Sdk */
			sdk?: string;
		};
		/** AuthorizedUsersResult */
		AuthorizedUsersResult: {
			/**
			 * Resource
			 * @description The resource that the result is about.Can be either 'resource:*' or 'resource:resource_instance'
			 */
			resource: string;
			/**
			 * Tenant
			 * @description The tenant that the result is about
			 */
			tenant: string;
			/**
			 * Users
			 * @description A key value mapping of the users that are authorized for the resource.The key is the user key and the value is a list of assignments allowing the user to performthe requested action
			 */
			users: {
				[key: string]: components['schemas']['AuthorizedUserAssignment'][];
			};
		};
		/** BulkAuthorizationResult */
		BulkAuthorizationResult: {
			/**
			 * Allow
			 * @default []
			 */
			allow: components['schemas']['AuthorizationResult'][];
		};
		/**
		 * CallbackEntry
		 * @description An entry in the callbacks register. this schema is used by the callbacks api
		 */
		CallbackEntry: {
			/**
			 * Key
			 * @description unique id to identify this callback (optional)
			 */
			key?: string;
			/**
			 * Url
			 * @description http/https url to call back on update
			 */
			url: string;
			/**
			 * Config
			 * @description optional http config for the target url (i.e: http method, headers, etc)
			 */
			config?: components['schemas']['HttpFetcherConfig'];
		};
		/** HTTPValidationError */
		HTTPValidationError: {
			/** Detail */
			detail?: components['schemas']['ValidationError'][];
		};
		/**
		 * HttpFetcherConfig
		 * @description Config for HttpFetchProvider's Adding HTTP headers.
		 */
		HttpFetcherConfig: {
			/**
			 * Fetcher
			 * @description indicates to OPAL client that it should use a custom FetcherProvider to fetch the data
			 */
			fetcher?: string;
			/** Headers */
			headers?: Record<string, never>;
			/**
			 * Is Json
			 * @default true
			 */
			is_json: boolean;
			/**
			 * Process Data
			 * @default true
			 */
			process_data: boolean;
			/** @default get */
			method: components['schemas']['HttpMethods'];
			/** Data */
			data?: unknown;
		};
		/**
		 * HttpMethods
		 * @description An enumeration.
		 * @enum {unknown}
		 */
		HttpMethods: 'get' | 'post' | 'put' | 'patch' | 'head' | 'delete';
		/** KongAuthorizationInput */
		KongAuthorizationInput: {
			request: components['schemas']['KongAuthorizationInputRequest'];
			/** Client Ip */
			client_ip?: string;
			service?: components['schemas']['KongAuthorizationInputService'];
			route?: components['schemas']['KongAuthorizationInputRoute'];
			consumer?: components['schemas']['KongAuthorizationInputConsumer'];
		};
		/** KongAuthorizationInputConsumer */
		KongAuthorizationInputConsumer: {
			/**
			 * Id
			 * Format: uuid
			 */
			id: string;
			/** Username */
			username: string;
		};
		/** KongAuthorizationInputRequest */
		KongAuthorizationInputRequest: {
			http: components['schemas']['KongAuthorizationInputRequestHttp'];
		};
		/** KongAuthorizationInputRequestHttp */
		KongAuthorizationInputRequestHttp: {
			/** Host */
			host: string;
			/** Port */
			port: number;
			/** Tls */
			tls: Record<string, never>;
			/** Method */
			method: string;
			/** Scheme */
			scheme: string;
			/** Path */
			path: string;
			/** Querystring */
			querystring: {
				[key: string]: string;
			};
			/** Headers */
			headers: {
				[key: string]: string;
			};
		};
		/** KongAuthorizationInputRoute */
		KongAuthorizationInputRoute: {
			/**
			 * Id
			 * Format: uuid
			 */
			id: string;
			/** Paths */
			paths: string[];
			/** Protocols */
			protocols: string[];
			/** Strip Path */
			strip_path: boolean;
			/** Created At */
			created_at: number;
			/**
			 * Ws Id
			 * Format: uuid
			 */
			ws_id: string;
			/** Request Buffering */
			request_buffering: boolean;
			/** Updated At */
			updated_at: number;
			/** Preserve Host */
			preserve_host: boolean;
			/** Regex Priority */
			regex_priority: number;
			/** Response Buffering */
			response_buffering: boolean;
			/** Https Redirect Status Code */
			https_redirect_status_code: number;
			/** Path Handling */
			path_handling: string;
			service: components['schemas']['KongAuthorizationInputRouteService'];
		};
		/** KongAuthorizationInputRouteService */
		KongAuthorizationInputRouteService: {
			/**
			 * Id
			 * Format: uuid
			 */
			id: string;
		};
		/** KongAuthorizationInputService */
		KongAuthorizationInputService: {
			/** Host */
			host: string;
			/** Created At */
			created_at: number;
			/** Connect Timeout */
			connect_timeout: number;
			/**
			 * Id
			 * Format: uuid
			 */
			id: string;
			/** Procotol */
			procotol: string;
			/** Name */
			name: string;
			/** Read Timeout */
			read_timeout: number;
			/** Port */
			port: number;
			/** Updated At */
			updated_at: number;
			/**
			 * Ws Id
			 * Format: uuid
			 */
			ws_id: string;
			/** Retries */
			retries: number;
			/** Write Timeout */
			write_timeout: number;
		};
		/**
		 * KongAuthorizationQuery
		 * @description the format of is_allowed_kong() input
		 */
		KongAuthorizationQuery: {
			input: components['schemas']['KongAuthorizationInput'];
		};
		/** KongAuthorizationResult */
		KongAuthorizationResult: {
			/**
			 * Result
			 * @default false
			 */
			result: boolean;
		};
		/**
		 * PolicyStoreAuth
		 * @description An enumeration.
		 * @enum {unknown}
		 */
		PolicyStoreAuth: 'none' | 'token' | 'oauth' | 'tls';
		/**
		 * PolicyStoreDetails
		 * @description represents a policy store endpoint - contains the policy store's: - location (url) - type - credentials
		 */
		PolicyStoreDetails: {
			/**
			 * @description the type of policy store, currently only OPA is officially supported
			 * @default OPA
			 */
			type: components['schemas']['PolicyStoreTypes'];
			/**
			 * Url
			 * @description the url that OPA can be found in. if localhost is the host - it means OPA is on the same hostname as OPAL client.
			 */
			url: string;
			/**
			 * Token
			 * @description optional access token required by the policy store
			 */
			token?: string;
			/**
			 * @description the type of authentication is supported for the policy store.
			 * @default none
			 */
			auth_type: components['schemas']['PolicyStoreAuth'];
			/**
			 * Oauth Client Id
			 * @description optional OAuth client id required by the policy store
			 */
			oauth_client_id?: string;
			/**
			 * Oauth Client Secret
			 * @description optional OAuth client secret required by the policy store
			 */
			oauth_client_secret?: string;
			/**
			 * Oauth Server
			 * @description optional OAuth server required by the policy store
			 */
			oauth_server?: string;
		};
		/**
		 * PolicyStoreTypes
		 * @description An enumeration.
		 * @enum {unknown}
		 */
		PolicyStoreTypes: 'OPA' | 'CEDAR' | 'MOCK';
		/** Resource */
		Resource: {
			/** Type */
			type: string;
			/** Key */
			key?: string;
			/** Tenant */
			tenant?: string;
			/**
			 * Attributes
			 * @default {}
			 */
			attributes: Record<string, never>;
			/**
			 * Context
			 * @default {}
			 */
			context: Record<string, never>;
		};
		/**
		 * ResourceV1
		 * @deprecated
		 */
		ResourceV1: {
			/** Type */
			type: string;
			/** Id */
			id?: string;
			/** Tenant */
			tenant?: string;
			/** Attributes */
			attributes?: Record<string, never>;
			/**
			 * Context
			 * @default {}
			 */
			context: Record<string, never>;
		};
		/**
		 * RoleAssignment
		 * @description The format of a role assignment
		 * @example [
		 *       {
		 *         "user": "jane@coolcompany.com",
		 *         "role": "admin",
		 *         "tenant": "stripe-inc"
		 *       },
		 *       {
		 *         "user": "jane@coolcompany.com",
		 *         "role": "admin",
		 *         "tenant": "stripe-inc",
		 *         "resource_instance": "document:doc-1234"
		 *       }
		 *     ]
		 */
		RoleAssignment: {
			/**
			 * User
			 * @description the user the role is assigned to
			 */
			user: string;
			/**
			 * Role
			 * @description the role that is assigned
			 */
			role: string;
			/**
			 * Tenant
			 * @description the tenant the role is associated with
			 */
			tenant: string;
			/**
			 * Resource Instance
			 * @description the resource instance the role is associated with
			 */
			resource_instance?: string;
		};
		/**
		 * UrlAuthorizationQuery
		 * @description the format of is_allowed_url() input
		 */
		UrlAuthorizationQuery: {
			user: components['schemas']['User'];
			/** Http Method */
			http_method: string;
			/**
			 * Url
			 * Format: uri
			 */
			url: string;
			/** Tenant */
			tenant: string;
			/**
			 * Context
			 * @default {}
			 */
			context: Record<string, never>;
			/** Sdk */
			sdk?: string;
		};
		/** User */
		User: {
			/** Key */
			key: string;
			/** Firstname */
			firstName?: string;
			/** Lastname */
			lastName?: string;
			/** Email */
			email?: string;
			/**
			 * Attributes
			 * @default {}
			 */
			attributes: Record<string, never>;
		};
		/** UserPermissionsQuery */
		UserPermissionsQuery: {
			user: components['schemas']['User'];
			/** Tenants */
			tenants?: string[];
			/** Resources */
			resources?: string[];
			/** Resource Types */
			resource_types?: string[];
			/**
			 * Context
			 * @default {}
			 */
			context: Record<string, never>;
		};
		/** UserTenantsQuery */
		UserTenantsQuery: {
			user: components['schemas']['User'];
			/**
			 * Context
			 * @default {}
			 */
			context: Record<string, never>;
		};
		/** ValidationError */
		ValidationError: {
			/** Location */
			loc: (string | number)[];
			/** Message */
			msg: string;
			/** Error Type */
			type: string;
		};
		/** _AllTenantsAuthorizationResult */
		_AllTenantsAuthorizationResult: {
			/**
			 * Allow
			 * @default false
			 */
			allow: boolean;
			/** Query */
			query?: Record<string, never>;
			/** Debug */
			debug?: Record<string, never>;
			/**
			 * Result
			 * @default false
			 */
			result: boolean;
			tenant: components['schemas']['_TenantDetails'];
		};
		/** _ResourceDetails */
		_ResourceDetails: {
			/** Key */
			key: string;
			/**
			 * Attributes
			 * @default {}
			 */
			attributes: Record<string, never>;
			/** Type */
			type: string;
		};
		/** _TenantDetails */
		_TenantDetails: {
			/** Key */
			key: string;
			/**
			 * Attributes
			 * @default {}
			 */
			attributes: Record<string, never>;
		};
		/** _UserPermissionsResult */
		_UserPermissionsResult: {
			tenant?: components['schemas']['_TenantDetails'];
			resource?: components['schemas']['_ResourceDetails'];
			/** Permissions */
			permissions: string[];
			/** Roles */
			roles?: string[];
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	trigger_policy_update_policy_updater_trigger_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
		};
	};
	trigger_policy_data_update_data_updater_trigger_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
		};
	};
	get_policy_store_details_policy_store_config_get: {
		parameters: {
			query?: never;
			header?: {
				authorization?: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PolicyStoreDetails'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	list_callbacks_callbacks_get: {
		parameters: {
			query?: never;
			header?: {
				authorization?: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CallbackEntry'][];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	register_callback_callbacks_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CallbackEntry'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CallbackEntry'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_callback_by_key_callbacks__key__get: {
		parameters: {
			query?: never;
			header?: {
				authorization?: string;
			};
			path: {
				key: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CallbackEntry'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_callback_by_key_callbacks__key__delete: {
		parameters: {
			query?: never;
			header?: {
				authorization?: string;
			};
			path: {
				key: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	authorized_users_authorized_users_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['AuthorizedUsersAuthorizationQuery'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuthorizedUsersResult'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	is_allowed_url_allowed_url_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
				'x-permit-sdk-language'?: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UrlAuthorizationQuery'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuthorizationResult'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	Get_User_Permissions_user_permissions_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
				'x-permit-sdk-language'?: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UserPermissionsQuery'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						[key: string]: components['schemas']['_UserPermissionsResult'];
					};
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	Get_User_Tenants_user_tenants_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
				'x-permit-sdk-language'?: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UserTenantsQuery'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['_TenantDetails'][];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	is_allowed_all_tenants_allowed_all_tenants_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
				'x-permit-sdk-language'?: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['AuthorizationQuery'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AllTenantsAuthorizationResult'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	is_allowed_bulk_allowed_bulk_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
				'x-permit-sdk-language'?: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['AuthorizationQuery'][];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['BulkAuthorizationResult'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	is_allowed_allowed_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
				'x-permit-sdk-language'?: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json':
					| components['schemas']['AuthorizationQuery']
					| components['schemas']['AuthorizationQueryV1'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuthorizationResult'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	is_allowed_nginx_nginx_allowed_post: {
		parameters: {
			query?: never;
			header?: {
				'permit-user-key'?: string;
				'permit-tenant-id'?: string;
				'permit-action'?: string;
				'permit-resource-type'?: string;
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuthorizationResult'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	is_allowed_kong_kong_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['KongAuthorizationQuery'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['KongAuthorizationResult'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	list_role_assignments_local_role_assignments_get: {
		parameters: {
			query?: {
				/** @description optional user filter, will only return role assignments granted to this user. */
				user?: string;
				/** @description optional role filter, will only return role assignments granting this role. */
				role?: string;
				/** @description optional tenant filter, will only return role assignments granted in that tenant. */
				tenant?: string;
				/** @description optional resource **type** filter, will only return role assignments granted on that resource type. */
				resource?: string;
				/** @description optional resource instance filter, will only return role assignments granted on that resource instance. */
				resource_instance?: string;
				/** @description Page number of the results to fetch, starting at 1. */
				page?: number;
				/** @description The number of results per page (max 100). */
				per_page?: number;
			};
			header?: {
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RoleAssignment'][];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	ready_opa_healthcheck_healthchecks_opa_ready_get: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	health_opa_healthcheck_healthchecks_opa_healthy_get: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	system_opa_healthcheck_healthchecks_opa_system_get: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	create_user_facts_users_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	create_tenant_facts_tenants_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	sync_user_facts_users__user_id__put: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path: {
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	update_user_facts_users__user_id__patch: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path: {
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	assign_user_role_facts_users__user_id__roles_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path: {
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	create_role_assignment_facts_role_assignments_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	create_resource_instance_facts_resource_instances_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	update_resource_instance_facts_resource_instances__instance_id__patch: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path: {
				instance_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	create_relationship_tuple_facts_relationship_tuples_post: {
		parameters: {
			query?: never;
			header?: {
				authorization?: unknown;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
}
